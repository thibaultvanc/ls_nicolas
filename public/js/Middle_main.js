(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":3}],2:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};
},{"../core-js/object/define-property":1}],3:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};
},{"../../modules/_core":6,"../../modules/es6.object.define-property":19}],4:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],5:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":15}],6:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],7:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":4}],8:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":11}],9:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":12,"./_is-object":15}],10:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , ctx       = require('./_ctx')
  , hide      = require('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":6,"./_ctx":7,"./_global":12,"./_hide":13}],11:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],12:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],13:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":8,"./_object-dp":16,"./_property-desc":17}],14:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":8,"./_dom-create":9,"./_fails":11}],15:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],16:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":5,"./_descriptors":8,"./_ie8-dom-define":14,"./_to-primitive":18}],17:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],18:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":15}],19:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":8,"./_export":10,"./_object-dp":16}],20:[function(require,module,exports){
/*!
 * Keen UI v0.8.8 (https://github.com/JosephusPaye/keen-ui)
 * (c) 2016 Josephus Paye II
 * Released under the MIT License.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Keen"] = factory();
	else
		root["Keen"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(1);
	
	var _UiAlert = __webpack_require__(2);
	
	var _UiAlert2 = _interopRequireDefault(_UiAlert);
	
	var _UiAutocomplete = __webpack_require__(65);
	
	var _UiAutocomplete2 = _interopRequireDefault(_UiAutocomplete);
	
	var _UiButton = __webpack_require__(89);
	
	var _UiButton2 = _interopRequireDefault(_UiButton);
	
	var _UiCheckbox = __webpack_require__(93);
	
	var _UiCheckbox2 = _interopRequireDefault(_UiCheckbox);
	
	var _UiCollapsible = __webpack_require__(97);
	
	var _UiCollapsible2 = _interopRequireDefault(_UiCollapsible);
	
	var _UiConfirm = __webpack_require__(101);
	
	var _UiConfirm2 = _interopRequireDefault(_UiConfirm);
	
	var _UiFab = __webpack_require__(109);
	
	var _UiFab2 = _interopRequireDefault(_UiFab);
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _UiIconButton = __webpack_require__(10);
	
	var _UiIconButton2 = _interopRequireDefault(_UiIconButton);
	
	var _UiMenu = __webpack_require__(13);
	
	var _UiMenu2 = _interopRequireDefault(_UiMenu);
	
	var _UiMenuItem = __webpack_require__(16);
	
	var _UiMenuItem2 = _interopRequireDefault(_UiMenuItem);
	
	var _UiModal = __webpack_require__(104);
	
	var _UiModal2 = _interopRequireDefault(_UiModal);
	
	var _UiPopover = __webpack_require__(47);
	
	var _UiPopover2 = _interopRequireDefault(_UiPopover);
	
	var _UiPreloader = __webpack_require__(113);
	
	var _UiPreloader2 = _interopRequireDefault(_UiPreloader);
	
	var _UiProgressCircular = __webpack_require__(51);
	
	var _UiProgressCircular2 = _interopRequireDefault(_UiProgressCircular);
	
	var _UiProgressLinear = __webpack_require__(117);
	
	var _UiProgressLinear2 = _interopRequireDefault(_UiProgressLinear);
	
	var _UiRadio = __webpack_require__(121);
	
	var _UiRadio2 = _interopRequireDefault(_UiRadio);
	
	var _UiRadioGroup = __webpack_require__(125);
	
	var _UiRadioGroup2 = _interopRequireDefault(_UiRadioGroup);
	
	var _UiRating = __webpack_require__(129);
	
	var _UiRating2 = _interopRequireDefault(_UiRating);
	
	var _UiRatingIcon = __webpack_require__(132);
	
	var _UiRatingIcon2 = _interopRequireDefault(_UiRatingIcon);
	
	var _UiRatingPreview = __webpack_require__(137);
	
	var _UiRatingPreview2 = _interopRequireDefault(_UiRatingPreview);
	
	var _UiRippleInk = __webpack_require__(20);
	
	var _UiRippleInk2 = _interopRequireDefault(_UiRippleInk);
	
	var _UiSelect = __webpack_require__(141);
	
	var _UiSelect2 = _interopRequireDefault(_UiSelect);
	
	var _UiSlider = __webpack_require__(152);
	
	var _UiSlider2 = _interopRequireDefault(_UiSlider);
	
	var _UiSnackbar = __webpack_require__(164);
	
	var _UiSnackbar2 = _interopRequireDefault(_UiSnackbar);
	
	var _UiSnackbarContainer = __webpack_require__(168);
	
	var _UiSnackbarContainer2 = _interopRequireDefault(_UiSnackbarContainer);
	
	var _UiSwitch = __webpack_require__(172);
	
	var _UiSwitch2 = _interopRequireDefault(_UiSwitch);
	
	var _UiTab = __webpack_require__(176);
	
	var _UiTab2 = _interopRequireDefault(_UiTab);
	
	var _UiTabs = __webpack_require__(180);
	
	var _UiTabs2 = _interopRequireDefault(_UiTabs);
	
	var _UiTextbox = __webpack_require__(188);
	
	var _UiTextbox2 = _interopRequireDefault(_UiTextbox);
	
	var _UiToolbar = __webpack_require__(192);
	
	var _UiToolbar2 = _interopRequireDefault(_UiToolbar);
	
	var _UiTooltip = __webpack_require__(58);
	
	var _UiTooltip2 = _interopRequireDefault(_UiTooltip);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Keen = {
	    UiAlert: _UiAlert2.default,
	    UiAutocomplete: _UiAutocomplete2.default,
	    UiButton: _UiButton2.default,
	    UiCheckbox: _UiCheckbox2.default,
	    UiCollapsible: _UiCollapsible2.default,
	    UiConfirm: _UiConfirm2.default,
	    UiFab: _UiFab2.default,
	    UiIcon: _UiIcon2.default,
	    UiIconButton: _UiIconButton2.default,
	    UiMenu: _UiMenu2.default,
	    UiMenuItem: _UiMenuItem2.default,
	    UiModal: _UiModal2.default,
	    UiPopover: _UiPopover2.default,
	    UiPreloader: _UiPreloader2.default,
	    UiProgressCircular: _UiProgressCircular2.default,
	    UiProgressLinear: _UiProgressLinear2.default,
	    UiRadio: _UiRadio2.default,
	    UiRadioGroup: _UiRadioGroup2.default,
	    UiRating: _UiRating2.default,
	    UiRatingIcon: _UiRatingIcon2.default,
	    UiRatingPreview: _UiRatingPreview2.default,
	    UiRippleInk: _UiRippleInk2.default,
	    UiSelect: _UiSelect2.default,
	    UiSlider: _UiSlider2.default,
	    UiSnackbar: _UiSnackbar2.default,
	    UiSnackbarContainer: _UiSnackbarContainer2.default,
	    UiSwitch: _UiSwitch2.default,
	    UiTab: _UiTab2.default,
	    UiTabs: _UiTabs2.default,
	    UiTextbox: _UiTextbox2.default,
	    UiToolbar: _UiToolbar2.default,
	    UiTooltip: _UiTooltip2.default,
	
	    install: function install(Vue) {
	        Vue.component('ui-alert', _UiAlert2.default);
	        Vue.component('ui-autocomplete', _UiAutocomplete2.default);
	        Vue.component('ui-button', _UiButton2.default);
	        Vue.component('ui-checkbox', _UiCheckbox2.default);
	        Vue.component('ui-collapsible', _UiCollapsible2.default);
	        Vue.component('ui-confirm', _UiConfirm2.default);
	        Vue.component('ui-fab', _UiFab2.default);
	        Vue.component('ui-icon', _UiIcon2.default);
	        Vue.component('ui-icon-button', _UiIconButton2.default);
	        Vue.component('ui-menu', _UiMenu2.default);
	        Vue.component('ui-menu-item', _UiMenuItem2.default);
	        Vue.component('ui-modal', _UiModal2.default);
	        Vue.component('ui-popover', _UiPopover2.default);
	        Vue.component('ui-preloader', _UiPreloader2.default);
	        Vue.component('ui-progress-circular', _UiProgressCircular2.default);
	        Vue.component('ui-progress-linear', _UiProgressLinear2.default);
	        Vue.component('ui-radio', _UiRadio2.default);
	        Vue.component('ui-radio-group', _UiRadioGroup2.default);
	        Vue.component('ui-rating', _UiRating2.default);
	        Vue.component('ui-rating-icon', _UiRatingIcon2.default);
	        Vue.component('ui-rating-preview', _UiRatingPreview2.default);
	        Vue.component('ui-ripple-ink', _UiRippleInk2.default);
	        Vue.component('ui-select', _UiSelect2.default);
	        Vue.component('ui-slider', _UiSlider2.default);
	        Vue.component('ui-snackbar', _UiSnackbar2.default);
	        Vue.component('ui-snackbar-container', _UiSnackbarContainer2.default);
	        Vue.component('ui-switch', _UiSwitch2.default);
	        Vue.component('ui-tab', _UiTab2.default);
	        Vue.component('ui-tabs', _UiTabs2.default);
	        Vue.component('ui-textbox', _UiTextbox2.default);
	        Vue.component('ui-toolbar', _UiToolbar2.default);
	        Vue.component('ui-tooltip', _UiTooltip2.default);
	    }
	};
	
	module.exports = Keen;

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	document.addEventListener('DOMContentLoaded', function () {
	    var hadKeyboardEvent = false;
	    var keyboardModalityWhitelist = ['input:not([type])', 'input[type=text]', 'input[type=number]', 'input[type=date]', 'input[type=time]', 'input[type=datetime]', 'textarea', '[role=textbox]', '[supports-modality=keyboard]'].join(',');
	
	    var isHandlingKeyboardThrottle;
	
	    var matcher = function () {
	        var el = document.body;
	
	        if (el.matchesSelector) {
	            return el.matchesSelector;
	        }
	
	        if (el.webkitMatchesSelector) {
	            return el.webkitMatchesSelector;
	        }
	
	        if (el.mozMatchesSelector) {
	            return el.mozMatchesSelector;
	        }
	
	        if (el.msMatchesSelector) {
	            return el.msMatchesSelector;
	        }
	
	        console.error('Couldn\'t find any matchesSelector method on document.body.');
	    }();
	
	    var disableFocusRingByDefault = function disableFocusRingByDefault() {
	        var css = 'body:not([modality=keyboard]) :focus { outline: none; }';
	        var head = document.head || document.getElementsByTagName('head')[0];
	        var style = document.createElement('style');
	
	        style.type = 'text/css';
	        style.id = 'disable-focus-ring';
	
	        if (style.styleSheet) {
	            style.styleSheet.cssText = css;
	        } else {
	            style.appendChild(document.createTextNode(css));
	        }
	
	        head.insertBefore(style, head.firstChild);
	    };
	
	    var focusTriggersKeyboardModality = function focusTriggersKeyboardModality(el) {
	        var triggers = false;
	
	        if (matcher) {
	            triggers = matcher.call(el, keyboardModalityWhitelist) && matcher.call(el, ':not([readonly])');
	        }
	
	        return triggers;
	    };
	
	    disableFocusRingByDefault();
	
	    document.body.addEventListener('keydown', function () {
	        hadKeyboardEvent = true;
	
	        if (isHandlingKeyboardThrottle) {
	            clearTimeout(isHandlingKeyboardThrottle);
	        }
	
	        isHandlingKeyboardThrottle = setTimeout(function () {
	            hadKeyboardEvent = false;
	        }, 100);
	    }, true);
	
	    document.body.addEventListener('focus', function (e) {
	        if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
	            document.body.setAttribute('modality', 'keyboard');
	        }
	    }, true);
	
	    document.body.addEventListener('blur', function () {
	        document.body.removeAttribute('modality');
	    }, true);
	});

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(3)
	__vue_script__ = __webpack_require__(5)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiAlert.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(64)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiAlert.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 3 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 4 */,
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _UiIconButton = __webpack_require__(10);
	
	var _UiIconButton2 = _interopRequireDefault(_UiIconButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-alert',
	
	    props: {
	        show: {
	            type: Boolean,
	            default: true
	        },
	        type: {
	            type: String,
	            default: 'info' },
	        text: String,
	        icon: String,
	        hideIcon: {
	            type: Boolean,
	            default: false
	        },
	        dismissible: {
	            type: Boolean,
	            default: true
	        }
	    },
	
	    created: function created() {
	        if (!this.icon) {
	            var icon = this.type;
	
	            if (this.type === 'success') {
	                icon = 'check_circle';
	            }
	
	            this.icon = icon;
	        }
	    },
	
	
	    methods: {
	        close: function close() {
	            this.show = false;
	            this.$dispatch('dismissed');
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default,
	        UiIconButton: _UiIconButton2.default
	    }
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(7)
	__vue_script__ = __webpack_require__(8)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiIcon.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(9)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiIcon.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 7 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    name: 'ui-icon',
	
	    props: {
	        icon: {
	            type: String,
	            required: true
	        },
	        removeText: {
	            type: Boolean,
	            default: false
	        }
	    }
	};

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = "\n<i\n    class=\"ui-icon material-icons\" :class=\"[icon]\" v-text=\"removeText ? null : icon\"\n    aria-hidden=\"true\"\n></i>\n";

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(11)
	__vue_script__ = __webpack_require__(12)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiIconButton.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(63)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiIconButton.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 11 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _UiMenu = __webpack_require__(13);
	
	var _UiMenu2 = _interopRequireDefault(_UiMenu);
	
	var _UiPopover = __webpack_require__(47);
	
	var _UiPopover2 = _interopRequireDefault(_UiPopover);
	
	var _UiProgressCircular = __webpack_require__(51);
	
	var _UiProgressCircular2 = _interopRequireDefault(_UiProgressCircular);
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	var _HasDropdown = __webpack_require__(56);
	
	var _HasDropdown2 = _interopRequireDefault(_HasDropdown);
	
	var _ShowsTooltip = __webpack_require__(57);
	
	var _ShowsTooltip2 = _interopRequireDefault(_ShowsTooltip);
	
	var _ShowsRippleInk = __webpack_require__(19);
	
	var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-icon-button',
	
	    props: {
	        type: {
	            type: String,
	            default: 'normal', coerce: function coerce(type) {
	                return 'ui-icon-button-' + type;
	            }
	        },
	        color: {
	            type: String,
	            default: 'default', coerce: function coerce(color) {
	                return 'color-' + color;
	            }
	        },
	        icon: {
	            type: String,
	            required: true
	        },
	        ariaLabel: String,
	        loading: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    computed: {
	        styleClasses: function styleClasses() {
	            var classes = [this.type, this.color];
	
	            if (this.hasDropdown) {
	                classes.push('ui-dropdown');
	            }
	
	            return classes;
	        },
	        spinnerColor: function spinnerColor() {
	            if (this.color === 'color-default' || this.color === 'color-black') {
	                return 'black';
	            }
	
	            return 'white';
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default,
	        UiMenu: _UiMenu2.default,
	        UiPopover: _UiPopover2.default,
	        UiProgressCircular: _UiProgressCircular2.default
	    },
	
	    mixins: [_HasDropdown2.default, _ShowsTooltip2.default, _ShowsRippleInk2.default],
	
	    directives: {
	        disabled: _disabled2.default
	    }
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(14)
	__vue_script__ = __webpack_require__(15)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiMenu.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(46)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiMenu.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 14 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiMenuItem = __webpack_require__(16);
	
	var _UiMenuItem2 = _interopRequireDefault(_UiMenuItem);
	
	var _ShowsDropdown = __webpack_require__(43);
	
	var _ShowsDropdown2 = _interopRequireDefault(_ShowsDropdown);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-menu',
	
	    props: {
	        options: {
	            type: Array,
	            required: true,
	            default: function _default() {
	                return [];
	            }
	        },
	        showIcons: {
	            type: Boolean,
	            default: false
	        },
	        showSecondaryText: {
	            type: Boolean,
	            default: false
	        },
	        hideRippleInk: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    events: {
	        'dropdown-opened': function dropdownOpened() {
	            if (this.containFocus) {
	                document.addEventListener('focus', this.restrictFocus, true);
	            }
	
	            this.$dispatch('opened');
	
	            return true;
	        },
	        'dropdown-closed': function dropdownClosed() {
	            if (this.containFocus) {
	                document.removeEventListener('focus', this.restrictFocus, true);
	            }
	
	            this.$dispatch('closed');
	
	            return true;
	        }
	    },
	
	    methods: {
	        optionSelect: function optionSelect(option) {
	            if (!(option.disabled || option.type === 'divider')) {
	                this.$dispatch('option-selected', option);
	
	                this.closeDropdown();
	            }
	        },
	        restrictFocus: function restrictFocus(e) {
	            if (!this.$els.dropdown.contains(e.target)) {
	                e.stopPropagation();
	
	                this.$els.dropdown.querySelector('.ui-menu-item').focus();
	            }
	        },
	        redirectFocus: function redirectFocus(e) {
	            e.stopPropagation();
	
	            this.$els.dropdown.querySelector('.ui-menu-item').focus();
	        }
	    },
	
	    components: {
	        UiMenuItem: _UiMenuItem2.default
	    },
	
	    mixins: [_ShowsDropdown2.default]
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(17)
	__vue_script__ = __webpack_require__(18)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiMenuItem.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(42)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiMenuItem.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 17 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _ShowsRippleInk = __webpack_require__(19);
	
	var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-menu-item',
	
	    props: {
	        type: String,
	        text: String,
	        icon: String,
	        showIcon: {
	            type: Boolean,
	            default: false
	        },
	        secondaryText: String,
	        showSecondaryText: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    computed: {
	        isDivider: function isDivider() {
	            return this.type === 'divider';
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default
	    },
	
	    mixins: [_ShowsRippleInk2.default]
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiRippleInk = __webpack_require__(20);
	
	var _UiRippleInk2 = _interopRequireDefault(_UiRippleInk);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    props: {
	        hideRippleInk: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    components: {
	        UiRippleInk: _UiRippleInk2.default
	    }
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(21)
	__vue_script__ = __webpack_require__(22)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiRippleInk.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(41)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiRippleInk.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 21 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dominus = __webpack_require__(23);
	
	var _dominus2 = _interopRequireDefault(_dominus);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var startRipple = function startRipple(eventType, event) {
	    var holder = event.currentTarget;
	
	    if (!(0, _dominus2.default)(holder).hasClass('ui-ripple-ink')) {
	        holder = (0, _dominus2.default)(holder).findOne('.ui-ripple-ink');
	
	        if (!holder) {
	            return;
	        }
	    }
	
	    var prev = holder.getAttribute('data-ui-event');
	
	    if (prev && prev !== eventType) {
	        return;
	    }
	
	    holder.setAttribute('data-ui-event', eventType);
	
	    var rect = holder.getBoundingClientRect();
	    var x = event.offsetX;
	    var y;
	
	    if (x !== undefined) {
	        y = event.offsetY;
	    } else {
	        x = event.clientX - rect.left;
	        y = event.clientY - rect.top;
	    }
	
	    var ripple = document.createElement('div');
	    var max;
	
	    if (rect.width === rect.height) {
	        max = rect.width * 1.412;
	    } else {
	        max = Math.sqrt(rect.width * rect.width + rect.height * rect.height);
	    }
	
	    var dim = max * 2 + 'px';
	
	    ripple.style.width = dim;
	    ripple.style.height = dim;
	    ripple.style.marginLeft = -max + x + 'px';
	    ripple.style.marginTop = -max + y + 'px';
	
	    ripple.className = 'ripple';
	    holder.appendChild(ripple);
	
	    setTimeout(function () {
	        (0, _dominus2.default)(ripple).addClass('held');
	    }, 0);
	
	    var releaseEvent = eventType === 'mousedown' ? 'mouseup' : 'touchend';
	
	    var release = function release() {
	        document.removeEventListener(releaseEvent, release);
	
	        (0, _dominus2.default)(ripple).addClass('done');
	
	        setTimeout(function () {
	            holder.removeChild(ripple);
	
	            if (!holder.children.length) {
	                (0, _dominus2.default)(holder).removeClass('active').attr('data-ui-event', null);
	            }
	        }, 450);
	    };
	
	    document.addEventListener(releaseEvent, release);
	};
	
	var handleMouseDown = function handleMouseDown(e) {
	    if (e.button === 0) {
	        startRipple(e.type, e);
	    }
	};
	
	var handleTouchStart = function handleTouchStart(e) {
	    if (e.changedTouches) {
	        for (var i = 0; i < e.changedTouches.length; ++i) {
	            startRipple(e.type, e.changedTouches[i]);
	        }
	    }
	};
	
	exports.default = {
	    name: 'ui-ripple-ink',
	
	    props: {
	        trigger: {
	            type: Element,
	            required: true
	        }
	    },
	
	    watch: {
	        trigger: function trigger() {
	            this.initialize();
	        }
	    },
	
	    ready: function ready() {
	        this.initialize();
	    },
	    beforeDestory: function beforeDestory() {
	        if (this.trigger) {
	            this.trigger.removeEventListener('mousedown', handleMouseDown);
	            this.trigger.removeEventListener('touchstart', handleTouchStart);
	        }
	    },
	
	
	    methods: {
	        initialize: function initialize() {
	            if (this.trigger) {
	                this.trigger.addEventListener('touchstart', handleTouchStart);
	                this.trigger.addEventListener('mousedown', handleMouseDown);
	            }
	        }
	    }
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(24);


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $ = __webpack_require__(25);
	var flatten = __webpack_require__(39);
	var dom = __webpack_require__(26);
	var custom = __webpack_require__(38);
	var classes = __webpack_require__(40);
	var Dominus = __webpack_require__(31);
	
	function equals (selector) {
	  return function equals (elem) {
	    return dom.matches(elem, selector);
	  };
	}
	
	function straight (prop, one) {
	  return function domMapping (selector) {
	    var result = this.map(function (elem) {
	      return dom[prop](elem, selector);
	    });
	    var results = flatten(result);
	    return one ? results[0] : results;
	  };
	}
	
	Dominus.prototype.prev = straight('prev');
	Dominus.prototype.next = straight('next');
	Dominus.prototype.parent = straight('parent');
	Dominus.prototype.parents = straight('parents');
	Dominus.prototype.children = straight('children');
	Dominus.prototype.find = straight('qsa');
	Dominus.prototype.findOne = straight('qs', true);
	
	Dominus.prototype.where = function (selector) {
	  return this.filter(equals(selector));
	};
	
	Dominus.prototype.is = function (selector) {
	  return this.some(equals(selector));
	};
	
	Dominus.prototype.i = function (index) {
	  return this[index] ? new Dominus(this[index]) : new Dominus();
	};
	
	function compareFactory (fn) {
	  return function compare () {
	    $.apply(null, arguments).forEach(fn, this);
	    return this;
	  };
	}
	
	Dominus.prototype.and = compareFactory(function addOne (elem) {
	  if (this.indexOf(elem) === -1) {
	    this.push(elem);
	  }
	  return this;
	});
	
	Dominus.prototype.but = compareFactory(function addOne (elem) {
	  var index = this.indexOf(elem);
	  if (index !== -1) {
	    this.splice(index, 1);
	  }
	  return this;
	});
	
	Dominus.prototype.css = function (name, value) {
	  var props;
	  var many = name && typeof name === 'object';
	  var getter = !many && !value;
	  if (getter) {
	    return this.length ? dom.getCss(this[0], name) : null;
	  }
	  if (many) {
	    props = name;
	  } else {
	    props = {};
	    props[name] = value;
	  }
	  this.forEach(dom.setCss(props));
	  return this;
	};
	
	function eventer (method) {
	  return function (types, filter, fn) {
	    var typelist = types.split(' ');
	    if (typeof fn !== 'function') {
	      fn = filter;
	      filter = null;
	    }
	    this.forEach(function (elem) {
	      typelist.forEach(function (type) {
	        var handler = custom.handlers[type];
	        if (handler) {
	          dom[method](elem, handler.event, filter, handler.wrap(fn));
	        } else {
	          dom[method](elem, type, filter, fn);
	        }
	      });
	    });
	    return this;
	  };
	}
	
	Dominus.prototype.once = eventer('once');
	Dominus.prototype.on = eventer('on');
	Dominus.prototype.off = eventer('off');
	Dominus.prototype.emit = eventer('emit');
	
	[
	  ['addClass', classes.add],
	  ['removeClass', classes.remove],
	  ['setClass', classes.set],
	  ['removeClass', classes.remove],
	  ['remove', dom.remove]
	].forEach(mapMethods);
	
	function mapMethods (data) {
	  Dominus.prototype[data[0]] = function (value) {
	    this.forEach(function (elem) {
	      data[1](elem, value);
	    });
	    return this;
	  };
	}
	
	[
	  'append',
	  'appendTo',
	  'prepend',
	  'prependTo',
	  'before',
	  'beforeOf',
	  'after',
	  'afterOf'
	].forEach(mapManipulation);
	
	function mapManipulation (method) {
	  Dominus.prototype[method] = function (value) {
	    dom[method](this, value);
	    return this;
	  };
	}
	
	Dominus.prototype.hasClass = function (value) {
	  return this.some(function (elem) {
	    return classes.contains(elem, value);
	  });
	};
	
	Dominus.prototype.attr = function (name, value) {
	  var hash = name && typeof name === 'object';
	  var set = hash ? setMany : setSingle;
	  var setter = hash || arguments.length > 1;
	  if (setter) {
	    this.forEach(set);
	    return this;
	  } else {
	    return this.length ? dom.getAttr(this[0], name) : null;
	  }
	  function setMany (elem) {
	    dom.manyAttr(elem, name);
	  }
	  function setSingle (elem) {
	    dom.attr(elem, name, value);
	  }
	};
	
	function keyValue (key, value) {
	  var getter = arguments.length < 2;
	  if (getter) {
	    return this.length ? dom[key](this[0]) : '';
	  }
	  this.forEach(function (elem) {
	    dom[key](elem, value);
	  });
	  return this;
	}
	
	function keyValueProperty (prop) {
	  Dominus.prototype[prop] = function accessor (value) {
	    var getter = arguments.length < 1;
	    if (getter) {
	      return keyValue.call(this, prop);
	    }
	    return keyValue.call(this, prop, value);
	  };
	}
	
	['html', 'text', 'value'].forEach(keyValueProperty);
	
	Dominus.prototype.clone = function () {
	  return this.map(function (elem) {
	    return dom.clone(elem);
	  });
	};
	
	Dominus.prototype.focus = function () {
	  if (this.length) {
	    this[0].focus();
	  }
	  return this;
	};
	
	module.exports = __webpack_require__(25);


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var dom = __webpack_require__(26);
	var cast = __webpack_require__(34);
	var custom = __webpack_require__(38);
	var Dominus = __webpack_require__(31);
	var tag = /^\s*<([a-z]+(?:-[a-z]+)?)\s*\/?>\s*$/i;
	
	function api (selector, context) {
	  var notText = typeof selector !== 'string';
	  if (notText && arguments.length < 2) {
	    return cast(selector);
	  }
	  if (notText) {
	    return new Dominus();
	  }
	  var matches = selector.match(tag);
	  if (matches) {
	    return dom.make(matches[1]);
	  }
	  return api.find(selector, context);
	}
	
	api.find = function (selector, context) {
	  return dom.qsa(context, selector);
	};
	
	api.findOne = function (selector, context) {
	  return dom.qs(context, selector);
	};
	
	api.custom = custom.register;
	
	module.exports = api;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var sektor = __webpack_require__(27);
	var crossvent = __webpack_require__(28);
	var Dominus = __webpack_require__(31);
	var cast = __webpack_require__(34);
	var apply = __webpack_require__(36);
	var text = __webpack_require__(37);
	var test = __webpack_require__(35);
	var api = module.exports = {};
	var delegates = {};
	
	function castContext (context) {
	  if (typeof context === 'string') {
	    return api.qs(null, context);
	  }
	  if (test.isElement(context)) {
	    return context;
	  }
	  if (context instanceof Dominus) {
	    return context[0];
	  }
	  return null;
	}
	
	api.qsa = function (el, selector) {
	  var results = new Dominus();
	  return sektor(selector, castContext(el), results);
	};
	
	api.qs = function (el, selector) {
	  return api.qsa(el, selector)[0];
	};
	
	api.matches = function (el, selector) {
	  return test.isElement(el) && sektor.matchesSelector(el, selector);
	};
	
	function relatedFactory (prop) {
	  return function related (el, selector) {
	    var relative = el[prop];
	    if (relative) {
	      if (!selector || api.matches(relative, selector)) {
	        return cast(relative);
	      }
	    }
	    return new Dominus();
	  };
	}
	
	api.prev = relatedFactory('previousElementSibling');
	api.next = relatedFactory('nextElementSibling');
	api.parent = relatedFactory('parentElement');
	
	function matches (el, value) {
	  if (!value) {
	    return true;
	  }
	  if (value instanceof Dominus) {
	    return value.indexOf(el) !== -1;
	  }
	  if (test.isElement(value)) {
	    return el === value;
	  }
	  return api.matches(el, value);
	}
	
	api.parents = function (el, value) {
	  var elements = [];
	  var current = el;
	  while (current.parentElement) {
	    if (matches(current.parentElement, value)) {
	      elements.push(current.parentElement);
	    }
	    current = current.parentElement;
	  }
	  return apply(elements);
	};
	
	api.children = function (el, value) {
	  var elements = [];
	  var children = el.children;
	  var child;
	  var i;
	  for (i = 0; children && i < children.length; i++) {
	    child = children[i];
	    if (matches(child, value)) {
	      elements.push(child);
	    }
	  }
	  return apply(elements);
	};
	
	// this method caches delegates so that .off() works seamlessly
	function delegate (root, filter, fn) {
	  if (delegates[fn._dd]) {
	    return delegates[fn._dd];
	  }
	  fn._dd = Date.now();
	  delegates[fn._dd] = delegator;
	  function delegator (e) {
	    var el = e.target;
	    while (el && el !== root) {
	      if (api.matches(el, filter)) {
	        fn.apply(this, arguments); return;
	      }
	      el = el.parentElement;
	    }
	  }
	  return delegator;
	}
	
	function evented (method, el, type, filter, fn) {
	  if (filter === null) {
	    crossvent[method](el, type, fn);
	  } else {
	    crossvent[method](el, type, delegate(el, filter, fn));
	  }
	}
	
	function once (el, type, filter, fn) {
	  var things = [el, type, filter, disposable];
	  api.on.apply(api, things);
	  function disposable () {
	    api.off.apply(api, things);
	    return fn.apply(this, arguments);
	  }
	}
	
	api.once = once;
	api.on = evented.bind(null, 'add');
	api.off = evented.bind(null, 'remove');
	api.emit = evented.bind(null, 'fabricate');
	
	api.html = function (elem, html) {
	  var getter = arguments.length < 2;
	  if (getter) {
	    return elem.innerHTML;
	  } else {
	    elem.innerHTML = html;
	  }
	};
	
	api.text = function (elem, text) {
	  var checkable = test.isCheckable(elem);
	  var getter = arguments.length < 2;
	  if (getter) {
	    return checkable ? elem.value : elem.innerText || elem.textContent;
	  } else if (checkable) {
	    elem.value = text;
	  } else {
	    elem.innerText = elem.textContent = text;
	  }
	};
	
	api.value = function (el, value) {
	  var checkable = test.isCheckable(el);
	  var getter = arguments.length < 2;
	  if (getter) {
	    return checkable ? el.checked : el.value;
	  } else if (checkable) {
	    el.checked = value;
	  } else {
	    el.value = value;
	  }
	};
	
	api.attr = function (el, name, value) {
	  if (!test.isElement(el)) {
	    return;
	  }
	  if (value === null || value === void 0) {
	    el.removeAttribute(name); return;
	  }
	  var camel = text.hyphenToCamel(name);
	  if (camel in el) {
	    el[camel] = value;
	  } else {
	    el.setAttribute(name, value);
	  }
	};
	
	api.getAttr = function (el, name) {
	  var camel = text.hyphenToCamel(name);
	  if (camel in el) {
	    return el[camel];
	  } else if (el.getAttribute) {
	    return el.getAttribute(name);
	  }
	  return null;
	};
	
	api.manyAttr = function (elem, attrs) {
	  Object.keys(attrs).forEach(function (attr) {
	    api.attr(elem, attr, attrs[attr]);
	  });
	};
	
	api.make = function (type) {
	  return new Dominus(document.createElement(type));
	};
	
	api.clone = function (el) {
	  if (el.cloneNode) {
	    return el.cloneNode(true);
	  }
	  return el;
	};
	
	api.remove = function (el) {
	  if (el.parentElement) {
	    el.parentElement.removeChild(el);
	  }
	};
	
	api.append = function (el, target) {
	  if (manipulationGuard(el, target, api.append)) {
	    return;
	  }
	  if (el.appendChild) {
	    el.appendChild(target);
	  }
	};
	
	api.prepend = function (el, target) {
	  if (manipulationGuard(el, target, api.prepend)) {
	    return;
	  }
	  if (el.insertBefore) {
	    el.insertBefore(target, el.firstChild);
	  }
	};
	
	api.before = function (el, target) {
	  if (manipulationGuard(el, target, api.before)) {
	    return;
	  }
	  if (el.parentElement) {
	    el.parentElement.insertBefore(target, el);
	  }
	};
	
	api.after = function (el, target) {
	  if (manipulationGuard(el, target, api.after)) {
	    return;
	  }
	  if (el.parentElement) {
	    el.parentElement.insertBefore(target, el.nextSibling);
	  }
	};
	
	function manipulationGuard (el, target, fn) {
	  var right = target instanceof Dominus;
	  var left = el instanceof Dominus;
	  if (left) {
	    el.forEach(manipulateMany);
	  } else if (right) {
	    manipulate(el, true);
	  }
	  return !el || !target || left || right;
	
	  function manipulate (el, precondition) {
	    if (right) {
	      target.forEach(function (target, j) {
	        fn(el, cloneUnless(target, precondition && j === 0));
	      });
	    } else {
	      fn(el, cloneUnless(target, precondition));
	    }
	  }
	
	  function manipulateMany (el, i) {
	    manipulate(el, i === 0);
	  }
	}
	
	function cloneUnless (target, condition) {
	  return condition ? target : api.clone(target);
	}
	
	['appendTo', 'prependTo', 'beforeOf', 'afterOf'].forEach(flip);
	
	function flip (key) {
	  var original = key.split(/[A-Z]/)[0];
	  api[key] = function (el, target) {
	    api[original](target, el);
	  };
	}
	
	var numericCssProperties = {
	  'column-count': true,
	  'fill-opacity': true,
	  'flex-grow': true,
	  'flex-shrink': true,
	  'font-weight': true,
	  'line-height': true,
	  'opacity': true,
	  'order': true,
	  'orphans': true,
	  'widows': true,
	  'z-index': true,
	  'zoom': true
	};
	var numeric = /^\d+$/;
	var canFloat = 'float' in document.body.style;
	
	api.getCss = function (el, prop) {
	  if (!test.isElement(el)) {
	    return null;
	  }
	  var hprop = text.hyphenate(prop);
	  var fprop = !canFloat && hprop === 'float' ? 'cssFloat' : hprop;
	  var result = global.getComputedStyle(el)[hprop];
	  if (prop === 'opacity' && result === '') {
	    return 1;
	  }
	  if (result.substr(-2) === 'px' || numeric.test(result)) {
	    return parseFloat(result, 10);
	  }
	  return result;
	};
	
	api.setCss = function (props) {
	  var mapped = Object.keys(props).filter(bad).map(expand);
	  function bad (prop) {
	    var value = props[prop];
	    return value !== null && value === value;
	  }
	  function expand (prop) {
	    var hprop = text.hyphenate(prop);
	    var value = props[prop];
	    if (typeof value === 'number' && !numericCssProperties[hprop]) {
	      value += 'px';
	    }
	    return {
	      name: hprop, value: value
	    };
	  }
	  return function (el) {
	    if (!test.isElement(el)) {
	      return;
	    }
	    mapped.forEach(function (prop) {
	      el.style[prop.name] = prop.value;
	    });
	  };
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 27 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var expando = 'sektor-' + Date.now();
	var rsiblings = /[+~]/;
	var document = global.document;
	var del = document.documentElement || {};
	var match = (
	  del.matches ||
	  del.webkitMatchesSelector ||
	  del.mozMatchesSelector ||
	  del.oMatchesSelector ||
	  del.msMatchesSelector ||
	  never
	);
	
	module.exports = sektor;
	
	sektor.matches = matches;
	sektor.matchesSelector = matchesSelector;
	
	function qsa (selector, context) {
	  var existed, id, prefix, prefixed, adapter, hack = context !== document;
	  if (hack) { // id hack for context-rooted queries
	    existed = context.getAttribute('id');
	    id = existed || expando;
	    prefix = '#' + id + ' ';
	    prefixed = prefix + selector.replace(/,/g, ',' + prefix);
	    adapter = rsiblings.test(selector) && context.parentNode;
	    if (!existed) { context.setAttribute('id', id); }
	  }
	  try {
	    return (adapter || context).querySelectorAll(prefixed || selector);
	  } catch (e) {
	    return [];
	  } finally {
	    if (existed === null) { context.removeAttribute('id'); }
	  }
	}
	
	function sektor (selector, ctx, collection, seed) {
	  var element;
	  var context = ctx || document;
	  var results = collection || [];
	  var i = 0;
	  if (typeof selector !== 'string') {
	    return results;
	  }
	  if (context.nodeType !== 1 && context.nodeType !== 9) {
	    return []; // bail if context is not an element or document
	  }
	  if (seed) {
	    while ((element = seed[i++])) {
	      if (matchesSelector(element, selector)) {
	        results.push(element);
	      }
	    }
	  } else {
	    results.push.apply(results, qsa(selector, context));
	  }
	  return results;
	}
	
	function matches (selector, elements) {
	  return sektor(selector, null, null, elements);
	}
	
	function matchesSelector (element, selector) {
	  return match.call(element, selector);
	}
	
	function never () { return false; }
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var customEvent = __webpack_require__(29);
	var eventmap = __webpack_require__(30);
	var doc = global.document;
	var addEvent = addEventEasy;
	var removeEvent = removeEventEasy;
	var hardCache = [];
	
	if (!global.addEventListener) {
	  addEvent = addEventHard;
	  removeEvent = removeEventHard;
	}
	
	module.exports = {
	  add: addEvent,
	  remove: removeEvent,
	  fabricate: fabricateEvent
	};
	
	function addEventEasy (el, type, fn, capturing) {
	  return el.addEventListener(type, fn, capturing);
	}
	
	function addEventHard (el, type, fn) {
	  return el.attachEvent('on' + type, wrap(el, type, fn));
	}
	
	function removeEventEasy (el, type, fn, capturing) {
	  return el.removeEventListener(type, fn, capturing);
	}
	
	function removeEventHard (el, type, fn) {
	  var listener = unwrap(el, type, fn);
	  if (listener) {
	    return el.detachEvent('on' + type, listener);
	  }
	}
	
	function fabricateEvent (el, type, model) {
	  var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();
	  if (el.dispatchEvent) {
	    el.dispatchEvent(e);
	  } else {
	    el.fireEvent('on' + type, e);
	  }
	  function makeClassicEvent () {
	    var e;
	    if (doc.createEvent) {
	      e = doc.createEvent('Event');
	      e.initEvent(type, true, true);
	    } else if (doc.createEventObject) {
	      e = doc.createEventObject();
	    }
	    return e;
	  }
	  function makeCustomEvent () {
	    return new customEvent(type, { detail: model });
	  }
	}
	
	function wrapperFactory (el, type, fn) {
	  return function wrapper (originalEvent) {
	    var e = originalEvent || global.event;
	    e.target = e.target || e.srcElement;
	    e.preventDefault = e.preventDefault || function preventDefault () { e.returnValue = false; };
	    e.stopPropagation = e.stopPropagation || function stopPropagation () { e.cancelBubble = true; };
	    e.which = e.which || e.keyCode;
	    fn.call(el, e);
	  };
	}
	
	function wrap (el, type, fn) {
	  var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);
	  hardCache.push({
	    wrapper: wrapper,
	    element: el,
	    type: type,
	    fn: fn
	  });
	  return wrapper;
	}
	
	function unwrap (el, type, fn) {
	  var i = find(el, type, fn);
	  if (i) {
	    var wrapper = hardCache[i].wrapper;
	    hardCache.splice(i, 1); // free up a tad of memory
	    return wrapper;
	  }
	}
	
	function find (el, type, fn) {
	  var i, item;
	  for (i = 0; i < hardCache.length; i++) {
	    item = hardCache[i];
	    if (item.element === el && item.type === type && item.fn === fn) {
	      return i;
	    }
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 29 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	var NativeCustomEvent = global.CustomEvent;
	
	function useNative () {
	  try {
	    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });
	    return  'cat' === p.type && 'bar' === p.detail.foo;
	  } catch (e) {
	  }
	  return false;
	}
	
	/**
	 * Cross-browser `CustomEvent` constructor.
	 *
	 * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
	 *
	 * @public
	 */
	
	module.exports = useNative() ? NativeCustomEvent :
	
	// IE >= 9
	'function' === typeof document.createEvent ? function CustomEvent (type, params) {
	  var e = document.createEvent('CustomEvent');
	  if (params) {
	    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
	  } else {
	    e.initCustomEvent(type, false, false, void 0);
	  }
	  return e;
	} :
	
	// IE <= 8
	function CustomEvent (type, params) {
	  var e = document.createEventObject();
	  e.type = type;
	  if (params) {
	    e.bubbles = Boolean(params.bubbles);
	    e.cancelable = Boolean(params.cancelable);
	    e.detail = params.detail;
	  } else {
	    e.bubbles = false;
	    e.cancelable = false;
	    e.detail = void 0;
	  }
	  return e;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 30 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var eventmap = [];
	var eventname = '';
	var ron = /^on/;
	
	for (eventname in global) {
	  if (ron.test(eventname)) {
	    eventmap.push(eventname.slice(2));
	  }
	}
	
	module.exports = eventmap;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var poser = __webpack_require__(32);
	var Dominus = poser.Array();
	
	module.exports = Dominus;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var poser = __webpack_require__(33);
	
	module.exports = poser;
	
	['Array', 'Function', 'Object', 'Date', 'String'].forEach(pose);
	
	function pose (type) {
	  poser[type] = function poseComputedType () { return poser(type); };
	}


/***/ },
/* 33 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var d = global.document;
	
	function poser (type) {
	  var iframe = d.createElement('iframe');
	
	  iframe.style.display = 'none';
	  d.body.appendChild(iframe);
	
	  return map(type, iframe.contentWindow);
	}
	
	function map (type, source) { // forward polyfills to the stolen reference!
	  var original = window[type].prototype;
	  var value = source[type];
	  var prop;
	
	  for (prop in original) {
	    value.prototype[prop] = original[prop];
	  }
	
	  return value;
	}
	
	module.exports = poser;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var test = __webpack_require__(35);
	var apply = __webpack_require__(36);
	var Dominus = __webpack_require__(31);
	
	function cast (a) {
	  if (a === global) {
	    return new Dominus(a);
	  }
	  if (a instanceof Dominus) {
	    return a;
	  }
	  if (!a) {
	    return new Dominus();
	  }
	  if (test.isElement(a)) {
	    return new Dominus(a);
	  }
	  if (!test.isArray(a)) {
	    return new Dominus();
	  }
	  return apply(a).filter(function (i) {
	    return test.isElement(i);
	  });
	}
	
	module.exports = cast;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 35 */
/***/ function(module, exports) {

	'use strict';
	
	var elementObjects = typeof HTMLElement === 'object';
	
	function isElement (o) {
	  return elementObjects ? o instanceof HTMLElement : isElementObject(o);
	}
	
	function isElementObject (o) {
	  return o &&
	    typeof o === 'object' &&
	    typeof o.nodeName === 'string' &&
	    o.nodeType === 1;
	}
	
	function isArray (a) {
	  return Object.prototype.toString.call(a) === '[object Array]';
	}
	
	function isCheckable (elem) {
	  return 'checked' in elem && elem.type === 'radio' || elem.type === 'checkbox';
	}
	
	module.exports = {
	  isElement: isElement,
	  isArray: isArray,
	  isCheckable: isCheckable
	};


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Dominus = __webpack_require__(31);
	var proto = Dominus.prototype;
	
	function Applied (args) {
	  return Dominus.apply(this, args);
	}
	
	Applied.prototype = proto;
	
	function apply (a) {
	  return new Applied(a);
	}
	
	['map', 'filter', 'concat', 'slice'].forEach(ensure);
	
	function ensure (key) {
	  var original = proto[key];
	  proto[key] = function applied () {
	    return apply(original.apply(this, arguments));
	  };
	}
	
	module.exports = apply;


/***/ },
/* 37 */
/***/ function(module, exports) {

	'use strict';
	
	function hyphenToCamel (hyphens) {
	  var part = /-([a-z])/g;
	  return hyphens.replace(part, function (g, m) {
	    return m.toUpperCase();
	  });
	}
	
	function hyphenate (text) {
	  var camel = /([a-z])([A-Z])/g;
	  return text.replace(camel, '$1-$2').toLowerCase();
	}
	
	module.exports = {
	  hyphenToCamel: hyphenToCamel,
	  hyphenate: hyphenate
	};


/***/ },
/* 38 */
/***/ function(module, exports) {

	'use strict';
	
	var handlers = {};
	
	function register (name, type, filter) {
	  handlers[name] = {
	    event: type,
	    filter: filter,
	    wrap: wrap
	  };
	
	  function wrap (fn) {
	    return wrapper(name, fn);
	  }
	}
	
	function wrapper (name, fn) {
	  if (!fn) {
	    return fn;
	  }
	  var key = '__dce_' + name;
	  if (fn[key]) {
	    return fn[key];
	  }
	  fn[key] = function customEvent (e) {
	    var match = handlers[name].filter(e);
	    if (match) {
	      return fn.apply(this, arguments);
	    }
	  };
	  return fn[key];
	}
	
	register('left-click', 'click', function (e) {
	  return e.which === 1 && !e.metaKey && !e.ctrlKey;
	});
	
	module.exports = {
	  register: register,
	  wrapper: wrapper,
	  handlers: handlers
	};


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Dominus = __webpack_require__(31);
	
	function flatten (a, cache) {
	  return a.reduce(function (current, item) {
	    if (Dominus.isArray(item)) {
	      return flatten(item, current);
	    } else if (current.indexOf(item) === -1) {
	      return current.concat(item);
	    }
	    return current;
	  }, cache || new Dominus());
	}
	
	module.exports = flatten;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var trim = /^\s+|\s+$/g;
	var whitespace = /\s+/g;
	var test = __webpack_require__(35);
	
	function interpret (input) {
	  return typeof input === 'string' ? input.replace(trim, '').split(whitespace) : input;
	}
	
	function classes (el) {
	  if (test.isElement(el)) {
	    return el.className.replace(trim, '').split(whitespace);
	  }
	  return [];
	}
	
	function set (el, input) {
	  if (test.isElement(el)) {
	    el.className = interpret(input).join(' ');
	  }
	}
	
	function add (el, input) {
	  var current = remove(el, input);
	  var values = interpret(input);
	  current.push.apply(current, values);
	  set(el, current);
	  return current;
	}
	
	function remove (el, input) {
	  var current = classes(el);
	  var values = interpret(input);
	  values.forEach(function (value) {
	    var i = current.indexOf(value);
	    if (i !== -1) {
	      current.splice(i, 1);
	    }
	  });
	  set(el, current);
	  return current;
	}
	
	function contains (el, input) {
	  var current = classes(el);
	  var values = interpret(input);
	
	  return values.every(function (value) {
	    return current.indexOf(value) !== -1;
	  });
	}
	
	module.exports = {
	  add: add,
	  remove: remove,
	  contains: contains,
	  set: set,
	  get: classes
	};


/***/ },
/* 41 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-ripple-ink\"></div>\n";

/***/ },
/* 42 */
/***/ function(module, exports) {

	module.exports = "\n<a\n    class=\"ui-menu-item\" role=\"menu-item\" :tabindex=\"(isDivider || disabled) ? null : '0'\"\n    :class=\"{ 'divider': isDivider, 'disabled' : disabled }\"\n>\n    <ui-icon\n        class=\"ui-menu-item-icon\" :icon=\"icon\" v-if=\"showIcon && !isDivider && icon\"\n    ></ui-icon>\n\n    <div class=\"ui-menu-item-text\" v-text=\"text\" v-if=\"!isDivider\"></div>\n\n    <div\n        class=\"ui-menu-item-secondary-text\" v-text=\"secondaryText\"\n        v-if=\"showSecondaryText && !isDivider && secondaryText\"\n    ></div>\n\n    <ui-ripple-ink\n        :trigger=\"$el\" v-if=\"!hideRippleInk && !disabled && !isDivider\"\n    ></ui-ripple-ink>\n</a>\n";

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dominus = __webpack_require__(23);
	
	var _dominus2 = _interopRequireDefault(_dominus);
	
	var _tetherDrop = __webpack_require__(44);
	
	var _tetherDrop2 = _interopRequireDefault(_tetherDrop);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    props: {
	        trigger: Element,
	        containFocus: {
	            type: Boolean,
	            default: true
	        },
	        dropdownPosition: {
	            type: String,
	            default: 'bottom left'
	        },
	        openOn: {
	            type: String,
	            default: 'click' }
	    },
	
	    data: function data() {
	        return {
	            drop: null,
	            lastFocussedElement: null
	        };
	    },
	    ready: function ready() {
	        if (this.trigger) {
	            this.initializeDropdown();
	        }
	    },
	    beforeDestroy: function beforeDestroy() {
	        if (this.drop) {
	            this.drop.remove();
	            this.drop.destroy();
	        }
	    },
	
	
	    methods: {
	        initializeDropdown: function initializeDropdown() {
	            this.drop = new _tetherDrop2.default({
	                target: this.trigger,
	                content: this.$els.dropdown,
	                position: this.dropdownPosition,
	                constrainToWindow: true,
	                openOn: this.openOn
	            });
	
	            if (this.dropdownPosition !== 'bottom left') {
	                this.drop.open();
	                this.drop.close();
	                this.drop.open();
	                this.drop.close();
	            }
	
	            this.drop.on('open', this.dropdownOpened);
	            this.drop.on('close', this.dropdownClosed);
	        },
	        closeDropdown: function closeDropdown() {
	            if (this.drop) {
	                this.drop.close();
	            }
	        },
	        dropdownOpened: function dropdownOpened() {
	            (0, _dominus2.default)(this.trigger).addClass('dropdown-open');
	
	            this.lastFocussedElement = document.activeElement;
	            this.$els.dropdown.focus();
	
	            this.$dispatch('dropdown-opened');
	        },
	        dropdownClosed: function dropdownClosed() {
	            (0, _dominus2.default)(this.trigger).removeClass('dropdown-open');
	
	            this.lastFocussedElement.focus();
	
	            this.$dispatch('dropdown-closed');
	        }
	    }
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether-drop 1.4.1 */
	
	(function(root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(45)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    module.exports = factory(require('tether'));
	  } else {
	    root.Drop = factory(root.Tether);
	  }
	}(this, function(Tether) {
	
	/* global Tether */
	'use strict';
	
	var _bind = Function.prototype.bind;
	
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _Tether$Utils = Tether.Utils;
	var extend = _Tether$Utils.extend;
	var addClass = _Tether$Utils.addClass;
	var removeClass = _Tether$Utils.removeClass;
	var hasClass = _Tether$Utils.hasClass;
	var Evented = _Tether$Utils.Evented;
	
	function sortAttach(str) {
	  var _str$split = str.split(' ');
	
	  var _str$split2 = _slicedToArray(_str$split, 2);
	
	  var first = _str$split2[0];
	  var second = _str$split2[1];
	
	  if (['left', 'right'].indexOf(first) >= 0) {
	    var _ref = [second, first];
	    first = _ref[0];
	    second = _ref[1];
	  }
	  return [first, second].join(' ');
	}
	
	function removeFromArray(arr, item) {
	  var index = undefined;
	  var results = [];
	  while ((index = arr.indexOf(item)) !== -1) {
	    results.push(arr.splice(index, 1));
	  }
	  return results;
	}
	
	var clickEvents = ['click'];
	if ('ontouchstart' in document.documentElement) {
	  clickEvents.push('touchstart');
	}
	
	var transitionEndEvents = {
	  'WebkitTransition': 'webkitTransitionEnd',
	  'MozTransition': 'transitionend',
	  'OTransition': 'otransitionend',
	  'transition': 'transitionend'
	};
	
	var transitionEndEvent = '';
	for (var _name in transitionEndEvents) {
	  if (({}).hasOwnProperty.call(transitionEndEvents, _name)) {
	    var tempEl = document.createElement('p');
	    if (typeof tempEl.style[_name] !== 'undefined') {
	      transitionEndEvent = transitionEndEvents[_name];
	    }
	  }
	}
	
	var MIRROR_ATTACH = {
	  left: 'right',
	  right: 'left',
	  top: 'bottom',
	  bottom: 'top',
	  middle: 'middle',
	  center: 'center'
	};
	
	var allDrops = {};
	
	// Drop can be included in external libraries.  Calling createContext gives you a fresh
	// copy of drop which won't interact with other copies on the page (beyond calling the document events).
	
	function createContext() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	  var drop = function drop() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return new (_bind.apply(DropInstance, [null].concat(args)))();
	  };
	
	  extend(drop, {
	    createContext: createContext,
	    drops: [],
	    defaults: {}
	  });
	
	  var defaultOptions = {
	    classPrefix: 'drop',
	    defaults: {
	      position: 'bottom left',
	      openOn: 'click',
	      beforeClose: null,
	      constrainToScrollParent: true,
	      constrainToWindow: true,
	      classes: '',
	      remove: false,
	      openDelay: 0,
	      closeDelay: 50,
	      // inherited from openDelay and closeDelay if not explicitly defined
	      focusDelay: null,
	      blurDelay: null,
	      hoverOpenDelay: null,
	      hoverCloseDelay: null,
	      tetherOptions: {}
	    }
	  };
	
	  extend(drop, defaultOptions, options);
	  extend(drop.defaults, defaultOptions.defaults, options.defaults);
	
	  if (typeof allDrops[drop.classPrefix] === 'undefined') {
	    allDrops[drop.classPrefix] = [];
	  }
	
	  drop.updateBodyClasses = function () {
	    // There is only one body, so despite the context concept, we still iterate through all
	    // drops which share our classPrefix.
	
	    var anyOpen = false;
	    var drops = allDrops[drop.classPrefix];
	    var len = drops.length;
	    for (var i = 0; i < len; ++i) {
	      if (drops[i].isOpened()) {
	        anyOpen = true;
	        break;
	      }
	    }
	
	    if (anyOpen) {
	      addClass(document.body, drop.classPrefix + '-open');
	    } else {
	      removeClass(document.body, drop.classPrefix + '-open');
	    }
	  };
	
	  var DropInstance = (function (_Evented) {
	    _inherits(DropInstance, _Evented);
	
	    function DropInstance(opts) {
	      _classCallCheck(this, DropInstance);
	
	      _get(Object.getPrototypeOf(DropInstance.prototype), 'constructor', this).call(this);
	      this.options = extend({}, drop.defaults, opts);
	      this.target = this.options.target;
	
	      if (typeof this.target === 'undefined') {
	        throw new Error('Drop Error: You must provide a target.');
	      }
	
	      var dataPrefix = 'data-' + drop.classPrefix;
	
	      var contentAttr = this.target.getAttribute(dataPrefix);
	      if (contentAttr && this.options.content == null) {
	        this.options.content = contentAttr;
	      }
	
	      var attrsOverride = ['position', 'openOn'];
	      for (var i = 0; i < attrsOverride.length; ++i) {
	
	        var override = this.target.getAttribute(dataPrefix + '-' + attrsOverride[i]);
	        if (override && this.options[attrsOverride[i]] == null) {
	          this.options[attrsOverride[i]] = override;
	        }
	      }
	
	      if (this.options.classes && this.options.addTargetClasses !== false) {
	        addClass(this.target, this.options.classes);
	      }
	
	      drop.drops.push(this);
	      allDrops[drop.classPrefix].push(this);
	
	      this._boundEvents = [];
	      this.bindMethods();
	      this.setupElements();
	      this.setupEvents();
	      this.setupTether();
	    }
	
	    _createClass(DropInstance, [{
	      key: '_on',
	      value: function _on(element, event, handler) {
	        this._boundEvents.push({ element: element, event: event, handler: handler });
	        element.addEventListener(event, handler);
	      }
	    }, {
	      key: 'bindMethods',
	      value: function bindMethods() {
	        this.transitionEndHandler = this._transitionEndHandler.bind(this);
	      }
	    }, {
	      key: 'setupElements',
	      value: function setupElements() {
	        var _this = this;
	
	        this.drop = document.createElement('div');
	        addClass(this.drop, drop.classPrefix);
	
	        if (this.options.classes) {
	          addClass(this.drop, this.options.classes);
	        }
	
	        this.content = document.createElement('div');
	        addClass(this.content, drop.classPrefix + '-content');
	
	        if (typeof this.options.content === 'function') {
	          var generateAndSetContent = function generateAndSetContent() {
	            // content function might return a string or an element
	            var contentElementOrHTML = _this.options.content.call(_this, _this);
	
	            if (typeof contentElementOrHTML === 'string') {
	              _this.content.innerHTML = contentElementOrHTML;
	            } else if (typeof contentElementOrHTML === 'object') {
	              _this.content.innerHTML = '';
	              _this.content.appendChild(contentElementOrHTML);
	            } else {
	              throw new Error('Drop Error: Content function should return a string or HTMLElement.');
	            }
	          };
	
	          generateAndSetContent();
	          this.on('open', generateAndSetContent.bind(this));
	        } else if (typeof this.options.content === 'object') {
	          this.content.appendChild(this.options.content);
	        } else {
	          this.content.innerHTML = this.options.content;
	        }
	
	        this.drop.appendChild(this.content);
	      }
	    }, {
	      key: 'setupTether',
	      value: function setupTether() {
	        // Tether expects two attachment points, one in the target element, one in the
	        // drop.  We use a single one, and use the order as well, to allow us to put
	        // the drop on either side of any of the four corners.  This magic converts between
	        // the two:
	        var dropAttach = this.options.position.split(' ');
	        dropAttach[0] = MIRROR_ATTACH[dropAttach[0]];
	        dropAttach = dropAttach.join(' ');
	
	        var constraints = [];
	        if (this.options.constrainToScrollParent) {
	          constraints.push({
	            to: 'scrollParent',
	            pin: 'top, bottom',
	            attachment: 'together none'
	          });
	        } else {
	          // To get 'out of bounds' classes
	          constraints.push({
	            to: 'scrollParent'
	          });
	        }
	
	        if (this.options.constrainToWindow !== false) {
	          constraints.push({
	            to: 'window',
	            attachment: 'together'
	          });
	        } else {
	          // To get 'out of bounds' classes
	          constraints.push({
	            to: 'window'
	          });
	        }
	
	        var opts = {
	          element: this.drop,
	          target: this.target,
	          attachment: sortAttach(dropAttach),
	          targetAttachment: sortAttach(this.options.position),
	          classPrefix: drop.classPrefix,
	          offset: '0 0',
	          targetOffset: '0 0',
	          enabled: false,
	          constraints: constraints,
	          addTargetClasses: this.options.addTargetClasses
	        };
	
	        if (this.options.tetherOptions !== false) {
	          this.tether = new Tether(extend({}, opts, this.options.tetherOptions));
	        }
	      }
	    }, {
	      key: 'setupEvents',
	      value: function setupEvents() {
	        var _this2 = this;
	
	        if (!this.options.openOn) {
	          return;
	        }
	
	        if (this.options.openOn === 'always') {
	          setTimeout(this.open.bind(this));
	          return;
	        }
	
	        var events = this.options.openOn.split(' ');
	
	        if (events.indexOf('click') >= 0) {
	          var openHandler = function openHandler(event) {
	            _this2.toggle(event);
	            event.preventDefault();
	          };
	
	          var closeHandler = function closeHandler(event) {
	            if (!_this2.isOpened()) {
	              return;
	            }
	
	            // Clicking inside dropdown
	            if (event.target === _this2.drop || _this2.drop.contains(event.target)) {
	              return;
	            }
	
	            // Clicking target
	            if (event.target === _this2.target || _this2.target.contains(event.target)) {
	              return;
	            }
	
	            _this2.close(event);
	          };
	
	          for (var i = 0; i < clickEvents.length; ++i) {
	            var clickEvent = clickEvents[i];
	            this._on(this.target, clickEvent, openHandler);
	            this._on(document, clickEvent, closeHandler);
	          }
	        }
	
	        var inTimeout = null;
	        var outTimeout = null;
	
	        var inHandler = function inHandler(event) {
	          if (outTimeout !== null) {
	            clearTimeout(outTimeout);
	          } else {
	            inTimeout = setTimeout(function () {
	              _this2.open(event);
	              inTimeout = null;
	            }, (event.type === 'focus' ? _this2.options.focusDelay : _this2.options.hoverOpenDelay) || _this2.options.openDelay);
	          }
	        };
	
	        var outHandler = function outHandler(event) {
	          if (inTimeout !== null) {
	            clearTimeout(inTimeout);
	          } else {
	            outTimeout = setTimeout(function () {
	              _this2.close(event);
	              outTimeout = null;
	            }, (event.type === 'blur' ? _this2.options.blurDelay : _this2.options.hoverCloseDelay) || _this2.options.closeDelay);
	          }
	        };
	
	        if (events.indexOf('hover') >= 0) {
	          this._on(this.target, 'mouseover', inHandler);
	          this._on(this.drop, 'mouseover', inHandler);
	          this._on(this.target, 'mouseout', outHandler);
	          this._on(this.drop, 'mouseout', outHandler);
	        }
	
	        if (events.indexOf('focus') >= 0) {
	          this._on(this.target, 'focus', inHandler);
	          this._on(this.drop, 'focus', inHandler);
	          this._on(this.target, 'blur', outHandler);
	          this._on(this.drop, 'blur', outHandler);
	        }
	      }
	    }, {
	      key: 'isOpened',
	      value: function isOpened() {
	        if (this.drop) {
	          return hasClass(this.drop, drop.classPrefix + '-open');
	        }
	      }
	    }, {
	      key: 'toggle',
	      value: function toggle(event) {
	        if (this.isOpened()) {
	          this.close(event);
	        } else {
	          this.open(event);
	        }
	      }
	    }, {
	      key: 'open',
	      value: function open(event) {
	        var _this3 = this;
	
	        /* eslint no-unused-vars: 0 */
	        if (this.isOpened()) {
	          return;
	        }
	
	        if (!this.drop.parentNode) {
	          document.body.appendChild(this.drop);
	        }
	
	        if (typeof this.tether !== 'undefined') {
	          this.tether.enable();
	        }
	
	        addClass(this.drop, drop.classPrefix + '-open');
	        addClass(this.drop, drop.classPrefix + '-open-transitionend');
	
	        setTimeout(function () {
	          if (_this3.drop) {
	            addClass(_this3.drop, drop.classPrefix + '-after-open');
	          }
	        });
	
	        if (typeof this.tether !== 'undefined') {
	          this.tether.position();
	        }
	
	        this.trigger('open');
	
	        drop.updateBodyClasses();
	      }
	    }, {
	      key: '_transitionEndHandler',
	      value: function _transitionEndHandler(e) {
	        if (e.target !== e.currentTarget) {
	          return;
	        }
	
	        if (!hasClass(this.drop, drop.classPrefix + '-open')) {
	          removeClass(this.drop, drop.classPrefix + '-open-transitionend');
	        }
	        this.drop.removeEventListener(transitionEndEvent, this.transitionEndHandler);
	      }
	    }, {
	      key: 'beforeCloseHandler',
	      value: function beforeCloseHandler(event) {
	        var shouldClose = true;
	
	        if (!this.isClosing && typeof this.options.beforeClose === 'function') {
	          this.isClosing = true;
	          shouldClose = this.options.beforeClose(event, this) !== false;
	        }
	
	        this.isClosing = false;
	
	        return shouldClose;
	      }
	    }, {
	      key: 'close',
	      value: function close(event) {
	        if (!this.isOpened()) {
	          return;
	        }
	
	        if (!this.beforeCloseHandler(event)) {
	          return;
	        }
	
	        removeClass(this.drop, drop.classPrefix + '-open');
	        removeClass(this.drop, drop.classPrefix + '-after-open');
	
	        this.drop.addEventListener(transitionEndEvent, this.transitionEndHandler);
	
	        this.trigger('close');
	
	        if (typeof this.tether !== 'undefined') {
	          this.tether.disable();
	        }
	
	        drop.updateBodyClasses();
	
	        if (this.options.remove) {
	          this.remove(event);
	        }
	      }
	    }, {
	      key: 'remove',
	      value: function remove(event) {
	        this.close(event);
	        if (this.drop.parentNode) {
	          this.drop.parentNode.removeChild(this.drop);
	        }
	      }
	    }, {
	      key: 'position',
	      value: function position() {
	        if (this.isOpened() && typeof this.tether !== 'undefined') {
	          this.tether.position();
	        }
	      }
	    }, {
	      key: 'destroy',
	      value: function destroy() {
	        this.remove();
	
	        if (typeof this.tether !== 'undefined') {
	          this.tether.destroy();
	        }
	
	        for (var i = 0; i < this._boundEvents.length; ++i) {
	          var _boundEvents$i = this._boundEvents[i];
	          var element = _boundEvents$i.element;
	          var _event = _boundEvents$i.event;
	          var handler = _boundEvents$i.handler;
	
	          element.removeEventListener(_event, handler);
	        }
	
	        this._boundEvents = [];
	
	        this.tether = null;
	        this.drop = null;
	        this.content = null;
	        this.target = null;
	
	        removeFromArray(allDrops[drop.classPrefix], this);
	        removeFromArray(drop.drops, this);
	      }
	    }]);
	
	    return DropInstance;
	  })(Evented);
	
	  return drop;
	}
	
	var Drop = createContext();
	
	document.addEventListener('DOMContentLoaded', function () {
	  Drop.updateBodyClasses();
	});
	return Drop;
	
	}));


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether 1.2.0 */
	
	(function(root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    module.exports = factory(require, exports, module);
	  } else {
	    root.Tether = factory();
	  }
	}(this, function(require, exports, module) {
	
	'use strict';
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var TetherBase = undefined;
	if (typeof TetherBase === 'undefined') {
	  TetherBase = { modules: [] };
	}
	
	function getScrollParent(el) {
	  // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	  var computedStyle = getComputedStyle(el) || {};
	  var position = computedStyle.position;
	
	  if (position === 'fixed') {
	    return el;
	  }
	
	  var parent = el;
	  while (parent = parent.parentNode) {
	    var style = undefined;
	    try {
	      style = getComputedStyle(parent);
	    } catch (err) {}
	
	    if (typeof style === 'undefined' || style === null) {
	      return parent;
	    }
	
	    var _style = style;
	    var overflow = _style.overflow;
	    var overflowX = _style.overflowX;
	    var overflowY = _style.overflowY;
	
	    if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
	      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
	        return parent;
	      }
	    }
	  }
	
	  return document.body;
	}
	
	var uniqueId = (function () {
	  var id = 0;
	  return function () {
	    return ++id;
	  };
	})();
	
	var zeroPosCache = {};
	var getOrigin = function getOrigin(doc) {
	  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
	  // jitter as the user scrolls that messes with our ability to detect if two positions
	  // are equivilant or not.  We place an element at the top left of the page that will
	  // get the same jitter, so we can cancel the two out.
	  var node = doc._tetherZeroElement;
	  if (typeof node === 'undefined') {
	    node = doc.createElement('div');
	    node.setAttribute('data-tether-id', uniqueId());
	    extend(node.style, {
	      top: 0,
	      left: 0,
	      position: 'absolute'
	    });
	
	    doc.body.appendChild(node);
	
	    doc._tetherZeroElement = node;
	  }
	
	  var id = node.getAttribute('data-tether-id');
	  if (typeof zeroPosCache[id] === 'undefined') {
	    zeroPosCache[id] = {};
	
	    var rect = node.getBoundingClientRect();
	    for (var k in rect) {
	      // Can't use extend, as on IE9, elements don't resolve to be hasOwnProperty
	      zeroPosCache[id][k] = rect[k];
	    }
	
	    // Clear the cache when this position call is done
	    defer(function () {
	      delete zeroPosCache[id];
	    });
	  }
	
	  return zeroPosCache[id];
	};
	
	function getBounds(el) {
	  var doc = undefined;
	  if (el === document) {
	    doc = document;
	    el = document.documentElement;
	  } else {
	    doc = el.ownerDocument;
	  }
	
	  var docEl = doc.documentElement;
	
	  var box = {};
	  // The original object returned by getBoundingClientRect is immutable, so we clone it
	  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
	  var rect = el.getBoundingClientRect();
	  for (var k in rect) {
	    box[k] = rect[k];
	  }
	
	  var origin = getOrigin(doc);
	
	  box.top -= origin.top;
	  box.left -= origin.left;
	
	  if (typeof box.width === 'undefined') {
	    box.width = document.body.scrollWidth - box.left - box.right;
	  }
	  if (typeof box.height === 'undefined') {
	    box.height = document.body.scrollHeight - box.top - box.bottom;
	  }
	
	  box.top = box.top - docEl.clientTop;
	  box.left = box.left - docEl.clientLeft;
	  box.right = doc.body.clientWidth - box.width - box.left;
	  box.bottom = doc.body.clientHeight - box.height - box.top;
	
	  return box;
	}
	
	function getOffsetParent(el) {
	  return el.offsetParent || document.documentElement;
	}
	
	function getScrollBarSize() {
	  var inner = document.createElement('div');
	  inner.style.width = '100%';
	  inner.style.height = '200px';
	
	  var outer = document.createElement('div');
	  extend(outer.style, {
	    position: 'absolute',
	    top: 0,
	    left: 0,
	    pointerEvents: 'none',
	    visibility: 'hidden',
	    width: '200px',
	    height: '150px',
	    overflow: 'hidden'
	  });
	
	  outer.appendChild(inner);
	
	  document.body.appendChild(outer);
	
	  var widthContained = inner.offsetWidth;
	  outer.style.overflow = 'scroll';
	  var widthScroll = inner.offsetWidth;
	
	  if (widthContained === widthScroll) {
	    widthScroll = outer.clientWidth;
	  }
	
	  document.body.removeChild(outer);
	
	  var width = widthContained - widthScroll;
	
	  return { width: width, height: width };
	}
	
	function extend() {
	  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	  var args = [];
	
	  Array.prototype.push.apply(args, arguments);
	
	  args.slice(1).forEach(function (obj) {
	    if (obj) {
	      for (var key in obj) {
	        if (({}).hasOwnProperty.call(obj, key)) {
	          out[key] = obj[key];
	        }
	      }
	    }
	  });
	
	  return out;
	}
	
	function removeClass(el, name) {
	  if (typeof el.classList !== 'undefined') {
	    name.split(' ').forEach(function (cls) {
	      if (cls.trim()) {
	        el.classList.remove(cls);
	      }
	    });
	  } else {
	    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');
	    var className = getClassName(el).replace(regex, ' ');
	    setClassName(el, className);
	  }
	}
	
	function addClass(el, name) {
	  if (typeof el.classList !== 'undefined') {
	    name.split(' ').forEach(function (cls) {
	      if (cls.trim()) {
	        el.classList.add(cls);
	      }
	    });
	  } else {
	    removeClass(el, name);
	    var cls = getClassName(el) + (' ' + name);
	    setClassName(el, cls);
	  }
	}
	
	function hasClass(el, name) {
	  if (typeof el.classList !== 'undefined') {
	    return el.classList.contains(name);
	  }
	  var className = getClassName(el);
	  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);
	}
	
	function getClassName(el) {
	  if (el.className instanceof SVGAnimatedString) {
	    return el.className.baseVal;
	  }
	  return el.className;
	}
	
	function setClassName(el, className) {
	  el.setAttribute('class', className);
	}
	
	function updateClasses(el, add, all) {
	  // Of the set of 'all' classes, we need the 'add' classes, and only the
	  // 'add' classes to be set.
	  all.forEach(function (cls) {
	    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
	      removeClass(el, cls);
	    }
	  });
	
	  add.forEach(function (cls) {
	    if (!hasClass(el, cls)) {
	      addClass(el, cls);
	    }
	  });
	}
	
	var deferred = [];
	
	var defer = function defer(fn) {
	  deferred.push(fn);
	};
	
	var flush = function flush() {
	  var fn = undefined;
	  while (fn = deferred.pop()) {
	    fn();
	  }
	};
	
	var Evented = (function () {
	  function Evented() {
	    _classCallCheck(this, Evented);
	  }
	
	  _createClass(Evented, [{
	    key: 'on',
	    value: function on(event, handler, ctx) {
	      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	      if (typeof this.bindings === 'undefined') {
	        this.bindings = {};
	      }
	      if (typeof this.bindings[event] === 'undefined') {
	        this.bindings[event] = [];
	      }
	      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
	    }
	  }, {
	    key: 'once',
	    value: function once(event, handler, ctx) {
	      this.on(event, handler, ctx, true);
	    }
	  }, {
	    key: 'off',
	    value: function off(event, handler) {
	      if (typeof this.bindings !== 'undefined' && typeof this.bindings[event] !== 'undefined') {
	        return;
	      }
	
	      if (typeof handler === 'undefined') {
	        delete this.bindings[event];
	      } else {
	        var i = 0;
	        while (i < this.bindings[event].length) {
	          if (this.bindings[event][i].handler === handler) {
	            this.bindings[event].splice(i, 1);
	          } else {
	            ++i;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'trigger',
	    value: function trigger(event) {
	      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
	        var i = 0;
	
	        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          args[_key - 1] = arguments[_key];
	        }
	
	        while (i < this.bindings[event].length) {
	          var _bindings$event$i = this.bindings[event][i];
	          var handler = _bindings$event$i.handler;
	          var ctx = _bindings$event$i.ctx;
	          var once = _bindings$event$i.once;
	
	          var context = ctx;
	          if (typeof context === 'undefined') {
	            context = this;
	          }
	
	          handler.apply(context, args);
	
	          if (once) {
	            this.bindings[event].splice(i, 1);
	          } else {
	            ++i;
	          }
	        }
	      }
	    }
	  }]);
	
	  return Evented;
	})();
	
	TetherBase.Utils = {
	  getScrollParent: getScrollParent,
	  getBounds: getBounds,
	  getOffsetParent: getOffsetParent,
	  extend: extend,
	  addClass: addClass,
	  removeClass: removeClass,
	  hasClass: hasClass,
	  updateClasses: updateClasses,
	  defer: defer,
	  flush: flush,
	  uniqueId: uniqueId,
	  Evented: Evented,
	  getScrollBarSize: getScrollBarSize
	};
	/* globals TetherBase, performance */
	
	'use strict';
	
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	if (typeof TetherBase === 'undefined') {
	  throw new Error('You must include the utils.js file before tether.js');
	}
	
	var _TetherBase$Utils = TetherBase.Utils;
	var getScrollParent = _TetherBase$Utils.getScrollParent;
	var getBounds = _TetherBase$Utils.getBounds;
	var getOffsetParent = _TetherBase$Utils.getOffsetParent;
	var extend = _TetherBase$Utils.extend;
	var addClass = _TetherBase$Utils.addClass;
	var removeClass = _TetherBase$Utils.removeClass;
	var updateClasses = _TetherBase$Utils.updateClasses;
	var defer = _TetherBase$Utils.defer;
	var flush = _TetherBase$Utils.flush;
	var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;
	
	function within(a, b) {
	  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];
	
	  return a + diff >= b && b >= a - diff;
	}
	
	var transformKey = (function () {
	  if (typeof document === 'undefined') {
	    return '';
	  }
	  var el = document.createElement('div');
	
	  var transforms = ['transform', 'webkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
	  for (var i = 0; i < transforms.length; ++i) {
	    var key = transforms[i];
	    if (el.style[key] !== undefined) {
	      return key;
	    }
	  }
	})();
	
	var tethers = [];
	
	var position = function position() {
	  tethers.forEach(function (tether) {
	    tether.position(false);
	  });
	  flush();
	};
	
	function now() {
	  if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {
	    return performance.now();
	  }
	  return +new Date();
	}
	
	(function () {
	  var lastCall = null;
	  var lastDuration = null;
	  var pendingTimeout = null;
	
	  var tick = function tick() {
	    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
	      // We voluntarily throttle ourselves if we can't manage 60fps
	      lastDuration = Math.min(lastDuration - 16, 250);
	
	      // Just in case this is the last event, remember to position just once more
	      pendingTimeout = setTimeout(tick, 250);
	      return;
	    }
	
	    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {
	      // Some browsers call events a little too frequently, refuse to run more than is reasonable
	      return;
	    }
	
	    if (typeof pendingTimeout !== 'undefined') {
	      clearTimeout(pendingTimeout);
	      pendingTimeout = null;
	    }
	
	    lastCall = now();
	    position();
	    lastDuration = now() - lastCall;
	  };
	
	  if (typeof window !== 'undefined') {
	    ['resize', 'scroll', 'touchmove'].forEach(function (event) {
	      window.addEventListener(event, tick);
	    });
	  }
	})();
	
	var MIRROR_LR = {
	  center: 'center',
	  left: 'right',
	  right: 'left'
	};
	
	var MIRROR_TB = {
	  middle: 'middle',
	  top: 'bottom',
	  bottom: 'top'
	};
	
	var OFFSET_MAP = {
	  top: 0,
	  left: 0,
	  middle: '50%',
	  center: '50%',
	  bottom: '100%',
	  right: '100%'
	};
	
	var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {
	  var left = attachment.left;
	  var top = attachment.top;
	
	  if (left === 'auto') {
	    left = MIRROR_LR[relativeToAttachment.left];
	  }
	
	  if (top === 'auto') {
	    top = MIRROR_TB[relativeToAttachment.top];
	  }
	
	  return { left: left, top: top };
	};
	
	var attachmentToOffset = function attachmentToOffset(attachment) {
	  var left = attachment.left;
	  var top = attachment.top;
	
	  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
	    left = OFFSET_MAP[attachment.left];
	  }
	
	  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
	    top = OFFSET_MAP[attachment.top];
	  }
	
	  return { left: left, top: top };
	};
	
	function addOffset() {
	  var out = { top: 0, left: 0 };
	
	  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {
	    offsets[_key] = arguments[_key];
	  }
	
	  offsets.forEach(function (_ref) {
	    var top = _ref.top;
	    var left = _ref.left;
	
	    if (typeof top === 'string') {
	      top = parseFloat(top, 10);
	    }
	    if (typeof left === 'string') {
	      left = parseFloat(left, 10);
	    }
	
	    out.top += top;
	    out.left += left;
	  });
	
	  return out;
	}
	
	function offsetToPx(offset, size) {
	  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
	    offset.left = parseFloat(offset.left, 10) / 100 * size.width;
	  }
	  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
	    offset.top = parseFloat(offset.top, 10) / 100 * size.height;
	  }
	
	  return offset;
	}
	
	var parseOffset = function parseOffset(value) {
	  var _value$split = value.split(' ');
	
	  var _value$split2 = _slicedToArray(_value$split, 2);
	
	  var top = _value$split2[0];
	  var left = _value$split2[1];
	
	  return { top: top, left: left };
	};
	var parseAttachment = parseOffset;
	
	var TetherClass = (function () {
	  function TetherClass(options) {
	    var _this = this;
	
	    _classCallCheck(this, TetherClass);
	
	    this.position = this.position.bind(this);
	
	    tethers.push(this);
	
	    this.history = [];
	
	    this.setOptions(options, false);
	
	    TetherBase.modules.forEach(function (module) {
	      if (typeof module.initialize !== 'undefined') {
	        module.initialize.call(_this);
	      }
	    });
	
	    this.position();
	  }
	
	  _createClass(TetherClass, [{
	    key: 'getClass',
	    value: function getClass() {
	      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
	      var classes = this.options.classes;
	
	      if (typeof classes !== 'undefined' && classes[key]) {
	        return this.options.classes[key];
	      } else if (this.options.classPrefix) {
	        return this.options.classPrefix + '-' + key;
	      } else {
	        return key;
	      }
	    }
	  }, {
	    key: 'setOptions',
	    value: function setOptions(options) {
	      var _this2 = this;
	
	      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	      var defaults = {
	        offset: '0 0',
	        targetOffset: '0 0',
	        targetAttachment: 'auto auto',
	        classPrefix: 'tether'
	      };
	
	      this.options = extend(defaults, options);
	
	      var _options = this.options;
	      var element = _options.element;
	      var target = _options.target;
	      var targetModifier = _options.targetModifier;
	
	      this.element = element;
	      this.target = target;
	      this.targetModifier = targetModifier;
	
	      if (this.target === 'viewport') {
	        this.target = document.body;
	        this.targetModifier = 'visible';
	      } else if (this.target === 'scroll-handle') {
	        this.target = document.body;
	        this.targetModifier = 'scroll-handle';
	      }
	
	      ['element', 'target'].forEach(function (key) {
	        if (typeof _this2[key] === 'undefined') {
	          throw new Error('Tether Error: Both element and target must be defined');
	        }
	
	        if (typeof _this2[key].jquery !== 'undefined') {
	          _this2[key] = _this2[key][0];
	        } else if (typeof _this2[key] === 'string') {
	          _this2[key] = document.querySelector(_this2[key]);
	        }
	      });
	
	      addClass(this.element, this.getClass('element'));
	      if (!(this.options.addTargetClasses === false)) {
	        addClass(this.target, this.getClass('target'));
	      }
	
	      if (!this.options.attachment) {
	        throw new Error('Tether Error: You must provide an attachment');
	      }
	
	      this.targetAttachment = parseAttachment(this.options.targetAttachment);
	      this.attachment = parseAttachment(this.options.attachment);
	      this.offset = parseOffset(this.options.offset);
	      this.targetOffset = parseOffset(this.options.targetOffset);
	
	      if (typeof this.scrollParent !== 'undefined') {
	        this.disable();
	      }
	
	      if (this.targetModifier === 'scroll-handle') {
	        this.scrollParent = this.target;
	      } else {
	        this.scrollParent = getScrollParent(this.target);
	      }
	
	      if (!(this.options.enabled === false)) {
	        this.enable(pos);
	      }
	    }
	  }, {
	    key: 'getTargetBounds',
	    value: function getTargetBounds() {
	      if (typeof this.targetModifier !== 'undefined') {
	        if (this.targetModifier === 'visible') {
	          if (this.target === document.body) {
	            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };
	          } else {
	            var bounds = getBounds(this.target);
	
	            var out = {
	              height: bounds.height,
	              width: bounds.width,
	              top: bounds.top,
	              left: bounds.left
	            };
	
	            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
	            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));
	            out.height = Math.min(innerHeight, out.height);
	            out.height -= 2;
	
	            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
	            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));
	            out.width = Math.min(innerWidth, out.width);
	            out.width -= 2;
	
	            if (out.top < pageYOffset) {
	              out.top = pageYOffset;
	            }
	            if (out.left < pageXOffset) {
	              out.left = pageXOffset;
	            }
	
	            return out;
	          }
	        } else if (this.targetModifier === 'scroll-handle') {
	          var bounds = undefined;
	          var target = this.target;
	          if (target === document.body) {
	            target = document.documentElement;
	
	            bounds = {
	              left: pageXOffset,
	              top: pageYOffset,
	              height: innerHeight,
	              width: innerWidth
	            };
	          } else {
	            bounds = getBounds(target);
	          }
	
	          var style = getComputedStyle(target);
	
	          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;
	
	          var scrollBottom = 0;
	          if (hasBottomScroll) {
	            scrollBottom = 15;
	          }
	
	          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;
	
	          var out = {
	            width: 15,
	            height: height * 0.975 * (height / target.scrollHeight),
	            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
	          };
	
	          var fitAdj = 0;
	          if (height < 408 && this.target === document.body) {
	            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
	          }
	
	          if (this.target !== document.body) {
	            out.height = Math.max(out.height, 24);
	          }
	
	          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
	          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);
	
	          if (this.target === document.body) {
	            out.height = Math.max(out.height, 24);
	          }
	
	          return out;
	        }
	      } else {
	        return getBounds(this.target);
	      }
	    }
	  }, {
	    key: 'clearCache',
	    value: function clearCache() {
	      this._cache = {};
	    }
	  }, {
	    key: 'cache',
	    value: function cache(k, getter) {
	      // More than one module will often need the same DOM info, so
	      // we keep a cache which is cleared on each position call
	      if (typeof this._cache === 'undefined') {
	        this._cache = {};
	      }
	
	      if (typeof this._cache[k] === 'undefined') {
	        this._cache[k] = getter.call(this);
	      }
	
	      return this._cache[k];
	    }
	  }, {
	    key: 'enable',
	    value: function enable() {
	      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
	
	      if (!(this.options.addTargetClasses === false)) {
	        addClass(this.target, this.getClass('enabled'));
	      }
	      addClass(this.element, this.getClass('enabled'));
	      this.enabled = true;
	
	      if (this.scrollParent !== document) {
	        this.scrollParent.addEventListener('scroll', this.position);
	      }
	
	      if (pos) {
	        this.position();
	      }
	    }
	  }, {
	    key: 'disable',
	    value: function disable() {
	      removeClass(this.target, this.getClass('enabled'));
	      removeClass(this.element, this.getClass('enabled'));
	      this.enabled = false;
	
	      if (typeof this.scrollParent !== 'undefined') {
	        this.scrollParent.removeEventListener('scroll', this.position);
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      var _this3 = this;
	
	      this.disable();
	
	      tethers.forEach(function (tether, i) {
	        if (tether === _this3) {
	          tethers.splice(i, 1);
	          return;
	        }
	      });
	    }
	  }, {
	    key: 'updateAttachClasses',
	    value: function updateAttachClasses(elementAttach, targetAttach) {
	      var _this4 = this;
	
	      elementAttach = elementAttach || this.attachment;
	      targetAttach = targetAttach || this.targetAttachment;
	      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];
	
	      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
	        // updateAttachClasses can be called more than once in a position call, so
	        // we need to clean up after ourselves such that when the last defer gets
	        // ran it doesn't add any extra classes from previous calls.
	        this._addAttachClasses.splice(0, this._addAttachClasses.length);
	      }
	
	      if (typeof this._addAttachClasses === 'undefined') {
	        this._addAttachClasses = [];
	      }
	      var add = this._addAttachClasses;
	
	      if (elementAttach.top) {
	        add.push(this.getClass('element-attached') + '-' + elementAttach.top);
	      }
	      if (elementAttach.left) {
	        add.push(this.getClass('element-attached') + '-' + elementAttach.left);
	      }
	      if (targetAttach.top) {
	        add.push(this.getClass('target-attached') + '-' + targetAttach.top);
	      }
	      if (targetAttach.left) {
	        add.push(this.getClass('target-attached') + '-' + targetAttach.left);
	      }
	
	      var all = [];
	      sides.forEach(function (side) {
	        all.push(_this4.getClass('element-attached') + '-' + side);
	        all.push(_this4.getClass('target-attached') + '-' + side);
	      });
	
	      defer(function () {
	        if (!(typeof _this4._addAttachClasses !== 'undefined')) {
	          return;
	        }
	
	        updateClasses(_this4.element, _this4._addAttachClasses, all);
	        if (!(_this4.options.addTargetClasses === false)) {
	          updateClasses(_this4.target, _this4._addAttachClasses, all);
	        }
	
	        delete _this4._addAttachClasses;
	      });
	    }
	  }, {
	    key: 'position',
	    value: function position() {
	      var _this5 = this;
	
	      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
	
	      // flushChanges commits the changes immediately, leave true unless you are positioning multiple
	      // tethers (in which case call Tether.Utils.flush yourself when you're done)
	
	      if (!this.enabled) {
	        return;
	      }
	
	      this.clearCache();
	
	      // Turn 'auto' attachments into the appropriate corner or edge
	      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);
	
	      this.updateAttachClasses(this.attachment, targetAttachment);
	
	      var elementPos = this.cache('element-bounds', function () {
	        return getBounds(_this5.element);
	      });
	
	      var width = elementPos.width;
	      var height = elementPos.height;
	
	      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
	        var _lastSize = this.lastSize;
	
	        // We cache the height and width to make it possible to position elements that are
	        // getting hidden.
	        width = _lastSize.width;
	        height = _lastSize.height;
	      } else {
	        this.lastSize = { width: width, height: height };
	      }
	
	      var targetPos = this.cache('target-bounds', function () {
	        return _this5.getTargetBounds();
	      });
	      var targetSize = targetPos;
	
	      // Get an actual px offset from the attachment
	      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });
	      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);
	
	      var manualOffset = offsetToPx(this.offset, { width: width, height: height });
	      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);
	
	      // Add the manually provided offset
	      offset = addOffset(offset, manualOffset);
	      targetOffset = addOffset(targetOffset, manualTargetOffset);
	
	      // It's now our goal to make (element position + offset) == (target position + target offset)
	      var left = targetPos.left + targetOffset.left - offset.left;
	      var top = targetPos.top + targetOffset.top - offset.top;
	
	      for (var i = 0; i < TetherBase.modules.length; ++i) {
	        var _module2 = TetherBase.modules[i];
	        var ret = _module2.position.call(this, {
	          left: left,
	          top: top,
	          targetAttachment: targetAttachment,
	          targetPos: targetPos,
	          elementPos: elementPos,
	          offset: offset,
	          targetOffset: targetOffset,
	          manualOffset: manualOffset,
	          manualTargetOffset: manualTargetOffset,
	          scrollbarSize: scrollbarSize,
	          attachment: this.attachment
	        });
	
	        if (ret === false) {
	          return false;
	        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {
	          continue;
	        } else {
	          top = ret.top;
	          left = ret.left;
	        }
	      }
	
	      // We describe the position three different ways to give the optimizer
	      // a chance to decide the best possible way to position the element
	      // with the fewest repaints.
	      var next = {
	        // It's position relative to the page (absolute positioning when
	        // the element is a child of the body)
	        page: {
	          top: top,
	          left: left
	        },
	
	        // It's position relative to the viewport (fixed positioning)
	        viewport: {
	          top: top - pageYOffset,
	          bottom: pageYOffset - top - height + innerHeight,
	          left: left - pageXOffset,
	          right: pageXOffset - left - width + innerWidth
	        }
	      };
	
	      var scrollbarSize = undefined;
	      if (document.body.scrollWidth > window.innerWidth) {
	        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
	        next.viewport.bottom -= scrollbarSize.height;
	      }
	
	      if (document.body.scrollHeight > window.innerHeight) {
	        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
	        next.viewport.right -= scrollbarSize.width;
	      }
	
	      if (['', 'static'].indexOf(document.body.style.position) === -1 || ['', 'static'].indexOf(document.body.parentElement.style.position) === -1) {
	        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
	        next.page.bottom = document.body.scrollHeight - top - height;
	        next.page.right = document.body.scrollWidth - left - width;
	      }
	
	      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {
	        (function () {
	          var offsetParent = _this5.cache('target-offsetparent', function () {
	            return getOffsetParent(_this5.target);
	          });
	          var offsetPosition = _this5.cache('target-offsetparent-bounds', function () {
	            return getBounds(offsetParent);
	          });
	          var offsetParentStyle = getComputedStyle(offsetParent);
	          var offsetParentSize = offsetPosition;
	
	          var offsetBorder = {};
	          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
	            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);
	          });
	
	          offsetPosition.right = document.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
	          offsetPosition.bottom = document.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;
	
	          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {
	            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {
	              // We're within the visible part of the target's scroll parent
	              var scrollTop = offsetParent.scrollTop;
	              var scrollLeft = offsetParent.scrollLeft;
	
	              // It's position relative to the target's offset parent (absolute positioning when
	              // the element is moved to be a child of the target's offset parent).
	              next.offset = {
	                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
	                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
	              };
	            }
	          }
	        })();
	      }
	
	      // We could also travel up the DOM and try each containing context, rather than only
	      // looking at the body, but we're gonna get diminishing returns.
	
	      this.move(next);
	
	      this.history.unshift(next);
	
	      if (this.history.length > 3) {
	        this.history.pop();
	      }
	
	      if (flushChanges) {
	        flush();
	      }
	
	      return true;
	    }
	
	    // THE ISSUE
	  }, {
	    key: 'move',
	    value: function move(pos) {
	      var _this6 = this;
	
	      if (!(typeof this.element.parentNode !== 'undefined')) {
	        return;
	      }
	
	      var same = {};
	
	      for (var type in pos) {
	        same[type] = {};
	
	        for (var key in pos[type]) {
	          var found = false;
	
	          for (var i = 0; i < this.history.length; ++i) {
	            var point = this.history[i];
	            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {
	              found = true;
	              break;
	            }
	          }
	
	          if (!found) {
	            same[type][key] = true;
	          }
	        }
	      }
	
	      var css = { top: '', left: '', right: '', bottom: '' };
	
	      var transcribe = function transcribe(_same, _pos) {
	        var hasOptimizations = typeof _this6.options.optimizations !== 'undefined';
	        var gpu = hasOptimizations ? _this6.options.optimizations.gpu : null;
	        if (gpu !== false) {
	          var yPos = undefined,
	              xPos = undefined;
	          if (_same.top) {
	            css.top = 0;
	            yPos = _pos.top;
	          } else {
	            css.bottom = 0;
	            yPos = -_pos.bottom;
	          }
	
	          if (_same.left) {
	            css.left = 0;
	            xPos = _pos.left;
	          } else {
	            css.right = 0;
	            xPos = -_pos.right;
	          }
	
	          css[transformKey] = 'translateX(' + Math.round(xPos) + 'px) translateY(' + Math.round(yPos) + 'px)';
	
	          if (transformKey !== 'msTransform') {
	            // The Z transform will keep this in the GPU (faster, and prevents artifacts),
	            // but IE9 doesn't support 3d transforms and will choke.
	            css[transformKey] += " translateZ(0)";
	          }
	        } else {
	          if (_same.top) {
	            css.top = _pos.top + 'px';
	          } else {
	            css.bottom = _pos.bottom + 'px';
	          }
	
	          if (_same.left) {
	            css.left = _pos.left + 'px';
	          } else {
	            css.right = _pos.right + 'px';
	          }
	        }
	      };
	
	      var moved = false;
	      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
	        css.position = 'absolute';
	        transcribe(same.page, pos.page);
	      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
	        css.position = 'fixed';
	        transcribe(same.viewport, pos.viewport);
	      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
	        (function () {
	          css.position = 'absolute';
	          var offsetParent = _this6.cache('target-offsetparent', function () {
	            return getOffsetParent(_this6.target);
	          });
	
	          if (getOffsetParent(_this6.element) !== offsetParent) {
	            defer(function () {
	              _this6.element.parentNode.removeChild(_this6.element);
	              offsetParent.appendChild(_this6.element);
	            });
	          }
	
	          transcribe(same.offset, pos.offset);
	          moved = true;
	        })();
	      } else {
	        css.position = 'absolute';
	        transcribe({ top: true, left: true }, pos.page);
	      }
	
	      if (!moved) {
	        var offsetParentIsBody = true;
	        var currentNode = this.element.parentNode;
	        while (currentNode && currentNode.tagName !== 'BODY') {
	          if (getComputedStyle(currentNode).position !== 'static') {
	            offsetParentIsBody = false;
	            break;
	          }
	
	          currentNode = currentNode.parentNode;
	        }
	
	        if (!offsetParentIsBody) {
	          this.element.parentNode.removeChild(this.element);
	          document.body.appendChild(this.element);
	        }
	      }
	
	      // Any css change will trigger a repaint, so let's avoid one if nothing changed
	      var writeCSS = {};
	      var write = false;
	      for (var key in css) {
	        var val = css[key];
	        var elVal = this.element.style[key];
	
	        if (elVal !== '' && val !== '' && ['top', 'left', 'bottom', 'right'].indexOf(key) >= 0) {
	          elVal = parseFloat(elVal);
	          val = parseFloat(val);
	        }
	
	        if (elVal !== val) {
	          write = true;
	          writeCSS[key] = val;
	        }
	      }
	
	      if (write) {
	        defer(function () {
	          extend(_this6.element.style, writeCSS);
	        });
	      }
	    }
	  }]);
	
	  return TetherClass;
	})();
	
	TetherClass.modules = [];
	
	TetherBase.position = position;
	
	var Tether = extend(TetherClass, TetherBase);
	/* globals TetherBase */
	
	'use strict';
	
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
	
	var _TetherBase$Utils = TetherBase.Utils;
	var getBounds = _TetherBase$Utils.getBounds;
	var extend = _TetherBase$Utils.extend;
	var updateClasses = _TetherBase$Utils.updateClasses;
	var defer = _TetherBase$Utils.defer;
	
	var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];
	
	function getBoundingRect(tether, to) {
	  if (to === 'scrollParent') {
	    to = tether.scrollParent;
	  } else if (to === 'window') {
	    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
	  }
	
	  if (to === document) {
	    to = to.documentElement;
	  }
	
	  if (typeof to.nodeType !== 'undefined') {
	    (function () {
	      var size = getBounds(to);
	      var pos = size;
	      var style = getComputedStyle(to);
	
	      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];
	
	      BOUNDS_FORMAT.forEach(function (side, i) {
	        side = side[0].toUpperCase() + side.substr(1);
	        if (side === 'Top' || side === 'Left') {
	          to[i] += parseFloat(style['border' + side + 'Width']);
	        } else {
	          to[i] -= parseFloat(style['border' + side + 'Width']);
	        }
	      });
	    })();
	  }
	
	  return to;
	}
	
	TetherBase.modules.push({
	  position: function position(_ref) {
	    var _this = this;
	
	    var top = _ref.top;
	    var left = _ref.left;
	    var targetAttachment = _ref.targetAttachment;
	
	    if (!this.options.constraints) {
	      return true;
	    }
	
	    var _cache = this.cache('element-bounds', function () {
	      return getBounds(_this.element);
	    });
	
	    var height = _cache.height;
	    var width = _cache.width;
	
	    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
	      var _lastSize = this.lastSize;
	
	      // Handle the item getting hidden as a result of our positioning without glitching
	      // the classes in and out
	      width = _lastSize.width;
	      height = _lastSize.height;
	    }
	
	    var targetSize = this.cache('target-bounds', function () {
	      return _this.getTargetBounds();
	    });
	
	    var targetHeight = targetSize.height;
	    var targetWidth = targetSize.width;
	
	    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];
	
	    this.options.constraints.forEach(function (constraint) {
	      var outOfBoundsClass = constraint.outOfBoundsClass;
	      var pinnedClass = constraint.pinnedClass;
	
	      if (outOfBoundsClass) {
	        allClasses.push(outOfBoundsClass);
	      }
	      if (pinnedClass) {
	        allClasses.push(pinnedClass);
	      }
	    });
	
	    allClasses.forEach(function (cls) {
	      ['left', 'top', 'right', 'bottom'].forEach(function (side) {
	        allClasses.push(cls + '-' + side);
	      });
	    });
	
	    var addClasses = [];
	
	    var tAttachment = extend({}, targetAttachment);
	    var eAttachment = extend({}, this.attachment);
	
	    this.options.constraints.forEach(function (constraint) {
	      var to = constraint.to;
	      var attachment = constraint.attachment;
	      var pin = constraint.pin;
	
	      if (typeof attachment === 'undefined') {
	        attachment = '';
	      }
	
	      var changeAttachX = undefined,
	          changeAttachY = undefined;
	      if (attachment.indexOf(' ') >= 0) {
	        var _attachment$split = attachment.split(' ');
	
	        var _attachment$split2 = _slicedToArray(_attachment$split, 2);
	
	        changeAttachY = _attachment$split2[0];
	        changeAttachX = _attachment$split2[1];
	      } else {
	        changeAttachX = changeAttachY = attachment;
	      }
	
	      var bounds = getBoundingRect(_this, to);
	
	      if (changeAttachY === 'target' || changeAttachY === 'both') {
	        if (top < bounds[1] && tAttachment.top === 'top') {
	          top += targetHeight;
	          tAttachment.top = 'bottom';
	        }
	
	        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
	          top -= targetHeight;
	          tAttachment.top = 'top';
	        }
	      }
	
	      if (changeAttachY === 'together') {
	        if (top < bounds[1] && tAttachment.top === 'top') {
	          if (eAttachment.top === 'bottom') {
	            top += targetHeight;
	            tAttachment.top = 'bottom';
	
	            top += height;
	            eAttachment.top = 'top';
	          } else if (eAttachment.top === 'top') {
	            top += targetHeight;
	            tAttachment.top = 'bottom';
	
	            top -= height;
	            eAttachment.top = 'bottom';
	          }
	        }
	
	        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
	          if (eAttachment.top === 'top') {
	            top -= targetHeight;
	            tAttachment.top = 'top';
	
	            top -= height;
	            eAttachment.top = 'bottom';
	          } else if (eAttachment.top === 'bottom') {
	            top -= targetHeight;
	            tAttachment.top = 'top';
	
	            top += height;
	            eAttachment.top = 'top';
	          }
	        }
	
	        if (tAttachment.top === 'middle') {
	          if (top + height > bounds[3] && eAttachment.top === 'top') {
	            top -= height;
	            eAttachment.top = 'bottom';
	          } else if (top < bounds[1] && eAttachment.top === 'bottom') {
	            top += height;
	            eAttachment.top = 'top';
	          }
	        }
	      }
	
	      if (changeAttachX === 'target' || changeAttachX === 'both') {
	        if (left < bounds[0] && tAttachment.left === 'left') {
	          left += targetWidth;
	          tAttachment.left = 'right';
	        }
	
	        if (left + width > bounds[2] && tAttachment.left === 'right') {
	          left -= targetWidth;
	          tAttachment.left = 'left';
	        }
	      }
	
	      if (changeAttachX === 'together') {
	        if (left < bounds[0] && tAttachment.left === 'left') {
	          if (eAttachment.left === 'right') {
	            left += targetWidth;
	            tAttachment.left = 'right';
	
	            left += width;
	            eAttachment.left = 'left';
	          } else if (eAttachment.left === 'left') {
	            left += targetWidth;
	            tAttachment.left = 'right';
	
	            left -= width;
	            eAttachment.left = 'right';
	          }
	        } else if (left + width > bounds[2] && tAttachment.left === 'right') {
	          if (eAttachment.left === 'left') {
	            left -= targetWidth;
	            tAttachment.left = 'left';
	
	            left -= width;
	            eAttachment.left = 'right';
	          } else if (eAttachment.left === 'right') {
	            left -= targetWidth;
	            tAttachment.left = 'left';
	
	            left += width;
	            eAttachment.left = 'left';
	          }
	        } else if (tAttachment.left === 'center') {
	          if (left + width > bounds[2] && eAttachment.left === 'left') {
	            left -= width;
	            eAttachment.left = 'right';
	          } else if (left < bounds[0] && eAttachment.left === 'right') {
	            left += width;
	            eAttachment.left = 'left';
	          }
	        }
	      }
	
	      if (changeAttachY === 'element' || changeAttachY === 'both') {
	        if (top < bounds[1] && eAttachment.top === 'bottom') {
	          top += height;
	          eAttachment.top = 'top';
	        }
	
	        if (top + height > bounds[3] && eAttachment.top === 'top') {
	          top -= height;
	          eAttachment.top = 'bottom';
	        }
	      }
	
	      if (changeAttachX === 'element' || changeAttachX === 'both') {
	        if (left < bounds[0]) {
	          if (eAttachment.left === 'right') {
	            left += width;
	            eAttachment.left = 'left';
	          } else if (eAttachment.left === 'center') {
	            left += width / 2;
	            eAttachment.left = 'left';
	          }
	        }
	
	        if (left + width > bounds[2]) {
	          if (eAttachment.left === 'left') {
	            left -= width;
	            eAttachment.left = 'right';
	          } else if (eAttachment.left === 'center') {
	            left -= width / 2;
	            eAttachment.left = 'right';
	          }
	        }
	      }
	
	      if (typeof pin === 'string') {
	        pin = pin.split(',').map(function (p) {
	          return p.trim();
	        });
	      } else if (pin === true) {
	        pin = ['top', 'left', 'right', 'bottom'];
	      }
	
	      pin = pin || [];
	
	      var pinned = [];
	      var oob = [];
	
	      if (top < bounds[1]) {
	        if (pin.indexOf('top') >= 0) {
	          top = bounds[1];
	          pinned.push('top');
	        } else {
	          oob.push('top');
	        }
	      }
	
	      if (top + height > bounds[3]) {
	        if (pin.indexOf('bottom') >= 0) {
	          top = bounds[3] - height;
	          pinned.push('bottom');
	        } else {
	          oob.push('bottom');
	        }
	      }
	
	      if (left < bounds[0]) {
	        if (pin.indexOf('left') >= 0) {
	          left = bounds[0];
	          pinned.push('left');
	        } else {
	          oob.push('left');
	        }
	      }
	
	      if (left + width > bounds[2]) {
	        if (pin.indexOf('right') >= 0) {
	          left = bounds[2] - width;
	          pinned.push('right');
	        } else {
	          oob.push('right');
	        }
	      }
	
	      if (pinned.length) {
	        (function () {
	          var pinnedClass = undefined;
	          if (typeof _this.options.pinnedClass !== 'undefined') {
	            pinnedClass = _this.options.pinnedClass;
	          } else {
	            pinnedClass = _this.getClass('pinned');
	          }
	
	          addClasses.push(pinnedClass);
	          pinned.forEach(function (side) {
	            addClasses.push(pinnedClass + '-' + side);
	          });
	        })();
	      }
	
	      if (oob.length) {
	        (function () {
	          var oobClass = undefined;
	          if (typeof _this.options.outOfBoundsClass !== 'undefined') {
	            oobClass = _this.options.outOfBoundsClass;
	          } else {
	            oobClass = _this.getClass('out-of-bounds');
	          }
	
	          addClasses.push(oobClass);
	          oob.forEach(function (side) {
	            addClasses.push(oobClass + '-' + side);
	          });
	        })();
	      }
	
	      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {
	        eAttachment.left = tAttachment.left = false;
	      }
	      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {
	        eAttachment.top = tAttachment.top = false;
	      }
	
	      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {
	        _this.updateAttachClasses(eAttachment, tAttachment);
	      }
	    });
	
	    defer(function () {
	      if (!(_this.options.addTargetClasses === false)) {
	        updateClasses(_this.target, addClasses, allClasses);
	      }
	      updateClasses(_this.element, addClasses, allClasses);
	    });
	
	    return { top: top, left: left };
	  }
	});
	/* globals TetherBase */
	
	'use strict';
	
	var _TetherBase$Utils = TetherBase.Utils;
	var getBounds = _TetherBase$Utils.getBounds;
	var updateClasses = _TetherBase$Utils.updateClasses;
	var defer = _TetherBase$Utils.defer;
	
	TetherBase.modules.push({
	  position: function position(_ref) {
	    var _this = this;
	
	    var top = _ref.top;
	    var left = _ref.left;
	
	    var _cache = this.cache('element-bounds', function () {
	      return getBounds(_this.element);
	    });
	
	    var height = _cache.height;
	    var width = _cache.width;
	
	    var targetPos = this.getTargetBounds();
	
	    var bottom = top + height;
	    var right = left + width;
	
	    var abutted = [];
	    if (top <= targetPos.bottom && bottom >= targetPos.top) {
	      ['left', 'right'].forEach(function (side) {
	        var targetPosSide = targetPos[side];
	        if (targetPosSide === left || targetPosSide === right) {
	          abutted.push(side);
	        }
	      });
	    }
	
	    if (left <= targetPos.right && right >= targetPos.left) {
	      ['top', 'bottom'].forEach(function (side) {
	        var targetPosSide = targetPos[side];
	        if (targetPosSide === top || targetPosSide === bottom) {
	          abutted.push(side);
	        }
	      });
	    }
	
	    var allClasses = [];
	    var addClasses = [];
	
	    var sides = ['left', 'top', 'right', 'bottom'];
	    allClasses.push(this.getClass('abutted'));
	    sides.forEach(function (side) {
	      allClasses.push(_this.getClass('abutted') + '-' + side);
	    });
	
	    if (abutted.length) {
	      addClasses.push(this.getClass('abutted'));
	    }
	
	    abutted.forEach(function (side) {
	      addClasses.push(_this.getClass('abutted') + '-' + side);
	    });
	
	    defer(function () {
	      if (!(_this.options.addTargetClasses === false)) {
	        updateClasses(_this.target, addClasses, allClasses);
	      }
	      updateClasses(_this.element, addClasses, allClasses);
	    });
	
	    return true;
	  }
	});
	/* globals TetherBase */
	
	'use strict';
	
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
	
	TetherBase.modules.push({
	  position: function position(_ref) {
	    var top = _ref.top;
	    var left = _ref.left;
	
	    if (!this.options.shift) {
	      return;
	    }
	
	    var shift = this.options.shift;
	    if (typeof this.options.shift === 'function') {
	      shift = this.options.shift.call(this, { top: top, left: left });
	    }
	
	    var shiftTop = undefined,
	        shiftLeft = undefined;
	    if (typeof shift === 'string') {
	      shift = shift.split(' ');
	      shift[1] = shift[1] || shift[0];
	
	      var _shift = shift;
	
	      var _shift2 = _slicedToArray(_shift, 2);
	
	      shiftTop = _shift2[0];
	      shiftLeft = _shift2[1];
	
	      shiftTop = parseFloat(shiftTop, 10);
	      shiftLeft = parseFloat(shiftLeft, 10);
	    } else {
	      shiftTop = shift.top;
	      shiftLeft = shift.left;
	    }
	
	    top += shiftTop;
	    left += shiftLeft;
	
	    return { top: top, left: left };
	  }
	});
	return Tether;
	
	}));


/***/ },
/* 46 */
/***/ function(module, exports) {

	module.exports = "\n<ul\n    class=\"ui-menu\" role=\"menu\" tabindex=\"-1\" @keydown.esc=\"closeDropdown\" v-el:dropdown\n    :class=\"{ 'has-icons': showIcons, 'has-secondary-text': showSecondaryText }\"\n>\n    <ui-menu-item\n        :type=\"o.type\" :icon=\"o.icon\" :text=\"o.text\" :secondary-text=\"o.secondaryText\"\n        :show-icon=\"showIcons\" :show-secondary-text=\"showSecondaryText\"\n        :hide-ripple-ink=\"hideRippleInk\" :disabled=\"o.disabled\"\n\n        @keydown.enter.prevent=\"optionSelect(o)\" @click=\"optionSelect(o)\"\n\n        v-for=\"o in options\"\n    ></ui-menu-item>\n\n    <div\n        class=\"ui-menu-focus-redirector\" @focus=\"redirectFocus\" tabindex=\"0\"\n    ></div>\n</ul>\n";

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(48)
	__vue_script__ = __webpack_require__(49)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiPopover.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(50)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiPopover.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 48 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _ShowsDropdown = __webpack_require__(43);
	
	var _ShowsDropdown2 = _interopRequireDefault(_ShowsDropdown);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-popover',
	
	    events: {
	        'dropdown-opened': function dropdownOpened() {
	            if (this.containFocus) {
	                document.addEventListener('focus', this.restrictFocus, true);
	            }
	
	            this.$dispatch('opened');
	
	            return true;
	        },
	        'dropdown-closed': function dropdownClosed() {
	            if (this.containFocus) {
	                document.removeEventListener('focus', this.restrictFocus, true);
	            }
	
	            this.$dispatch('closed');
	
	            return true;
	        }
	    },
	
	    methods: {
	        restrictFocus: function restrictFocus(e) {
	            if (!this.$els.dropdown.contains(e.target)) {
	                e.stopPropagation();
	
	                this.$els.dropdown.focus();
	            }
	        }
	    },
	
	    mixins: [_ShowsDropdown2.default]
	};

/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-popover\" role=\"dialog\" tabindex=\"-1\" @keydown.esc=\"closeDropdown\" v-el:dropdown\n>\n    <slot></slot>\n</div>\n";

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(52)
	__vue_script__ = __webpack_require__(53)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiProgressCircular.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(54)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiProgressCircular.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 52 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 53 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    name: 'ui-progress-circular',
	
	    props: {
	        show: {
	            type: Boolean,
	            default: false
	        },
	        type: {
	            type: String,
	            default: 'indeterminate' },
	        color: {
	            type: String,
	            default: 'primary' },
	        value: {
	            type: Number,
	            default: 0
	        },
	        size: {
	            type: Number,
	            default: 32
	        },
	        stroke: Number,
	        autoStroke: {
	            type: Boolean,
	            default: true
	        },
	        disableTransition: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    computed: {
	        strokeDashArray: function strokeDashArray() {
	            var circumference = 2 * Math.PI * this.radius;
	
	            return Math.round(circumference * 1000) / 1000;
	        },
	        strokeDashOffset: function strokeDashOffset() {
	            var value = this.moderateValue(this.value);
	            var circumference = 2 * Math.PI * this.radius;
	
	            return (100 - value) / 100 * circumference;
	        },
	        radius: function radius() {
	            return (this.size - this.stroke) / 2;
	        }
	    },
	
	    created: function created() {
	        if (!this.stroke) {
	            if (this.autoStroke) {
	                this.stroke = parseInt(this.size / 8, 10);
	            } else {
	                this.stroke = 4;
	            }
	        }
	    },
	
	
	    methods: {
	        moderateValue: function moderateValue(value) {
	            if (isNaN(value) || value < 0) {
	                return 0;
	            }
	
	            if (value > 100) {
	                return 100;
	            }
	
	            return value;
	        }
	    }
	};

/***/ },
/* 54 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-progress-circular\" :style=\"{ 'width': size + 'px', 'height': size + 'px' }\"\n    v-show=\"show\" :transition=\"disableTransition ? null : 'ui-progress-circular-toggle'\"\n>\n    <svg\n        class=\"ui-progress-circular-determinate\" :width=\"size\" :height=\"size\"\n        role=\"progressbar\" :aria-valuemin=\"0\" :aria-valuemax=\"100\" :aria-valuenow=\"value\"\n        v-if=\"type === 'determinate'\"\n    >\n        <circle\n            class=\"ui-progress-circular-determinate-path\" :class=\"[color]\" :r=\"radius\"\n            :cx=\"size / 2\" :cy=\"size / 2\" fill=\"transparent\" :stroke-dasharray=\"strokeDashArray\"\n            stroke-dashoffset=\"0\"\n\n            :style=\"{ 'stroke-dashoffset': strokeDashOffset, 'stroke-width': stroke }\"\n        ></circle>\n    </svg>\n\n    <svg\n        class=\"ui-progress-circular-indeterminate\" viewBox=\"25 25 50 50\"\n        role=\"progressbar\" :aria-valuemin=\"0\" :aria-valuemax=\"100\" v-else\n    >\n        <circle\n            class=\"ui-progress-circular-indeterminate-path\" :class=\"[color]\" cx=\"50\" cy=\"50\"\n            r=\"20\" fill=\"none\" stroke-miterlimit=\"10\" :stroke-width=\"stroke\"\n        >\n    </svg>\n</div>\n";

/***/ },
/* 55 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (value) {
	    this.el.disabled = Boolean(value);
	};

/***/ },
/* 56 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    props: {
	        openDropdownOn: String,
	        dropdownPosition: String,
	        hasPopover: {
	            type: Boolean,
	            default: false
	        },
	        hasDropdownMenu: {
	            type: Boolean,
	            default: false
	        },
	        menuOptions: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        showMenuIcons: {
	            type: Boolean,
	            default: false
	        },
	        showMenuSecondaryText: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    methods: {
	        menuOptionSelect: function menuOptionSelect(option) {
	            this.$dispatch('menu-option-selected', option);
	        }
	    }
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiTooltip = __webpack_require__(58);
	
	var _UiTooltip2 = _interopRequireDefault(_UiTooltip);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    props: {
	        tooltip: String,
	        tooltipPosition: String
	    },
	
	    components: {
	        UiTooltip: _UiTooltip2.default
	    }
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(59)
	__vue_script__ = __webpack_require__(60)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiTooltip.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(62)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiTooltip.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 59 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _tetherTooltip = __webpack_require__(61);
	
	var _tetherTooltip2 = _interopRequireDefault(_tetherTooltip);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-tooltip',
	
	    props: {
	        content: String,
	        trigger: {
	            type: Element,
	            required: true
	        },
	        position: {
	            type: String,
	            default: 'bottom center'
	        },
	        openOn: {
	            type: String,
	            default: 'hover focus'
	        }
	    },
	
	    data: function data() {
	        return {
	            tooltip: null
	        };
	    },
	
	
	    watch: {
	        trigger: function trigger() {
	            if (!this.tooltip) {
	                this.initialize();
	            }
	        }
	    },
	
	    ready: function ready() {
	        this.initialize();
	    },
	    beforeDestory: function beforeDestory() {
	        if (this.tooltip) {
	            this.tooltip.remove();
	            this.tooltip.destroy();
	        }
	    },
	
	
	    methods: {
	        initialize: function initialize() {
	            if (this.trigger) {
	                this.tooltip = new _tetherTooltip2.default({
	                    target: this.trigger,
	                    content: this.$els.tooltip,
	                    classes: 'ui-tooltip-theme',
	                    position: this.position,
	                    openOn: 'hover focus'
	                });
	            }
	        }
	    }
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether-tooltip 1.1.0 */
	
	(function(root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(44),__webpack_require__(45)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    module.exports = factory(require('tether-drop'), require('tether'));
	  } else {
	    root.Tooltip = factory(root.Drop, root.Tether);
	  }
	}(this, function(Drop, Tether) {
	
	/* global Tether Drop */
	
	'use strict';
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var extend = Tether.Utils.extend;
	
	var _Drop = Drop.createContext({
	  classPrefix: 'tooltip'
	});
	
	var defaults = {
	  position: 'top center',
	  openOn: 'hover',
	  classes: 'tooltip-theme-arrows',
	  constrainToWindow: true,
	  constrainToScrollParent: false
	};
	
	var tooltipCount = 0;
	
	var Tooltip = (function () {
	  function Tooltip(options) {
	    _classCallCheck(this, Tooltip);
	
	    this.options = options;
	
	    if (!this.options.target) {
	      throw new Error('Tooltip Error: You must provide a target for Tooltip to attach to');
	    }
	
	    var position = this.options.target.getAttribute('data-tooltip-position');
	    if (position) {
	      if (typeof this.options.position === 'undefined') {
	        this.options.position = position;
	      }
	    }
	
	    var content = this.options.target.getAttribute('data-tooltip');
	
	    if (content) {
	      if (typeof this.options.content === 'undefined') {
	        var contentEl = document.createElement('div');
	        contentEl.innerHTML = content;
	
	        // Add ARIA attributes (see #50)
	        contentEl.setAttribute('role', 'tooltip');
	        contentEl.id = 'drop-tooltip-' + tooltipCount;
	        this.options.target.setAttribute('aria-describedby', contentEl.id);
	        tooltipCount += 1;
	
	        this.options.content = contentEl;
	      }
	    }
	
	    if (!this.options.content) {
	      throw new Error('Tooltip Error: You must provide content for Tooltip to display');
	    }
	
	    this.options = extend({}, defaults, this.options);
	
	    this.drop = new _Drop(this.options);
	  }
	
	  _createClass(Tooltip, [{
	    key: 'close',
	    value: function close() {
	      this.drop.close();
	    }
	  }, {
	    key: 'open',
	    value: function open() {
	      this.drop.open();
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle() {
	      this.drop.toggle();
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {
	      this.drop.remove();
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.drop.destroy();
	    }
	  }, {
	    key: 'position',
	    value: function position() {
	      this.drop.position();
	    }
	  }]);
	
	  return Tooltip;
	})();
	
	var initialized = [];
	
	Tooltip.init = function () {
	  var tooltipElements = document.querySelectorAll('[data-tooltip]');
	  var len = tooltipElements.length;
	  for (var i = 0; i < len; ++i) {
	    var el = tooltipElements[i];
	    if (initialized.indexOf(el) === -1) {
	      new Tooltip({
	        target: el
	      });
	      initialized.push(el);
	    }
	  }
	};
	
	document.addEventListener('DOMContentLoaded', function () {
	  if (Tooltip.autoinit !== false) {
	    Tooltip.init();
	  }
	});
	return Tooltip;
	
	}));


/***/ },
/* 62 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-tooltip\" v-text=\"content\" v-el:tooltip></div>\n";

/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = "\n<button\n    class=\"ui-icon-button\" :class=\"styleClasses\" :aria-label=\"ariaLabel || tooltip\"\n    v-disabled=\"disabled || loading\" v-el:button\n>\n    <ui-icon\n        class=\"ui-icon-button-icon\" :icon=\"icon\" v-show=\"!loading\"\n    ></ui-icon>\n\n    <ui-progress-circular\n        class=\"ui-icon-button-spinner\" :color=\"spinnerColor\" :size=\"24\" :stroke=\"4.5\"\n        disable-transition v-show=\"loading\"\n    ></ui-progress-circular>\n\n    <ui-ripple-ink v-if=\"!hideRippleInk && !disabled\" :trigger=\"$els.button\"></ui-ripple-ink>\n\n    <ui-tooltip\n        :trigger=\"$els.button\" :content=\"tooltip\" :position=\"tooltipPosition\" v-if=\"tooltip\"\n    ></ui-tooltip>\n\n    <ui-menu\n        class=\"ui-button-dropdown-menu\" :trigger=\"$els.button\" :options=\"menuOptions\"\n        :show-icons=\"showMenuIcons\" :show-secondary-text=\"showMenuSecondaryText\"\n        :open-on=\"openDropdownOn\" @option-selected=\"menuOptionSelect\"\n        :dropdown-position=\"dropdownPosition\" v-if=\"hasDropdownMenu\"\n    ></ui-menu>\n\n    <ui-popover :trigger=\"$els.button\" :open-on=\"openDropdownOn\" v-if=\"hasPopover\">\n        <slot name=\"popover\"></slot>\n    </ui-popover>\n</button>\n";

/***/ },
/* 64 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-alert\">\n    <div\n        class=\"ui-alert-body\" :class=\"[type]\" role=\"alert\" v-show=\"show\"\n        transition=\"ui-alert-toggle\"\n    >\n        <ui-icon class=\"ui-alert-icon\" :icon=\"icon\" v-if=\"!hideIcon\"></ui-icon>\n\n        <div class=\"ui-alert-text\">\n            <slot>\n                <span v-text=\"text\"></span>\n            </slot>\n        </div>\n\n        <ui-icon-button\n            class=\"ui-alert-close-button\" type=\"clear\" icon=\"&#xE5CD\" aria-label=\"Close\"\n            @click=\"close\" v-if=\"dismissible\"\n        ></ui-icon-button>\n    </div>\n</div>\n";

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(66)
	__vue_script__ = __webpack_require__(67)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiAutocomplete.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(88)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiAutocomplete.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 66 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _fuzzysearch = __webpack_require__(68);
	
	var _fuzzysearch2 = _interopRequireDefault(_fuzzysearch);
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _UiAutocompleteSuggestion = __webpack_require__(69);
	
	var _UiAutocompleteSuggestion2 = _interopRequireDefault(_UiAutocompleteSuggestion);
	
	var _HasTextInput = __webpack_require__(74);
	
	var _HasTextInput2 = _interopRequireDefault(_HasTextInput);
	
	var _ValidatesInput = __webpack_require__(76);
	
	var _ValidatesInput2 = _interopRequireDefault(_ValidatesInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-autocomplete',
	
	    props: {
	        suggestions: {
	            type: Array,
	            default: []
	        },
	        limit: {
	            type: Number,
	            default: 8
	        },
	        partial: String,
	        append: {
	            type: Boolean,
	            default: false
	        },
	        appendDelimiter: {
	            type: String,
	            default: ', '
	        },
	        minChars: {
	            type: Number,
	            default: 2
	        },
	        showOnUpDown: {
	            type: Boolean,
	            default: true
	        }
	    },
	
	    data: function data() {
	        return {
	            showDropdown: false,
	            highlightedItem: -1,
	            ignoreValueChange: false
	        };
	    },
	
	
	    computed: {
	        showIcon: function showIcon() {
	            return Boolean(this.icon);
	        }
	    },
	
	    events: {
	        'ui-input::reset': function uiInputReset(id) {
	            if (!this.eventTargetsComponent(id)) {
	                return;
	            }
	
	            if (document.activeElement === this.$els.input) {
	                document.activeElement.blur();
	            }
	
	            this.value = this.initialValue;
	            this.dirty = false;
	            this.valid = true;
	        }
	    },
	
	    watch: {
	        value: function value() {
	            if (!this.ignoreValueChange && this.value.length >= this.minChars) {
	                this.open();
	            }
	
	            this.highlightedItem = 0;
	        }
	    },
	
	    ready: function ready() {
	        document.addEventListener('click', this.closeOnExternalClick);
	    },
	    beforeDestroy: function beforeDestroy() {
	        document.removeEventListener('click', this.closeOnExternalClick);
	    },
	
	
	    methods: {
	        search: function search(item) {
	            var text = item.text || item;
	            var query = this.value.toLowerCase();
	
	            return (0, _fuzzysearch2.default)(query, text.toLowerCase());
	        },
	        select: function select(item) {
	            var _this = this;
	
	            if (this.append) {
	                this.value += this.appendDelimiter + (item.text || item);
	            } else {
	                this.value = item.text || item;
	            }
	
	            this.validate();
	
	            this.$nextTick(function () {
	                _this.close();
	                _this.$els.input.focus();
	            });
	        },
	        highlight: function highlight(index) {
	            if (index < 0) {
	                index = this.$refs.items.length - 1;
	            } else if (index >= this.$refs.items.length) {
	                index = 0;
	            }
	
	            this.highlightedItem = index;
	
	            if (this.showOnUpDown) {
	                this.open();
	            }
	        },
	        selectHighlighted: function selectHighlighted(index, e) {
	            if (this.showDropdown && this.$refs.items.length) {
	                e.preventDefault();
	                this.select(this.$refs.items[index].item);
	            }
	        },
	        clearSearch: function clearSearch() {
	            this.value = '';
	        },
	        open: function open() {
	            this.showDropdown = true;
	        },
	        close: function close() {
	            this.showDropdown = false;
	
	            this.validate();
	        },
	        closeOnExternalClick: function closeOnExternalClick(e) {
	            if (!this.$els.autocomplete.contains(e.target) && this.showDropdown) {
	                this.close();
	            }
	        },
	        focus: function focus() {
	            this.active = true;
	        },
	        blur: function blur() {
	            this.active = false;
	
	            if (!this.dirty) {
	                this.dirty = true;
	            }
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default,
	        UiAutocompleteSuggestion: _UiAutocompleteSuggestion2.default
	    },
	
	    mixins: [_HasTextInput2.default, _ValidatesInput2.default]
	};

/***/ },
/* 68 */
/***/ function(module, exports) {

	'use strict';
	
	function fuzzysearch (needle, haystack) {
	  var tlen = haystack.length;
	  var qlen = needle.length;
	  if (qlen > tlen) {
	    return false;
	  }
	  if (qlen === tlen) {
	    return needle === haystack;
	  }
	  outer: for (var i = 0, j = 0; i < qlen; i++) {
	    var nch = needle.charCodeAt(i);
	    while (j < tlen) {
	      if (haystack.charCodeAt(j++) === nch) {
	        continue outer;
	      }
	    }
	    return false;
	  }
	  return true;
	}
	
	module.exports = fuzzysearch;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(70)
	__vue_script__ = __webpack_require__(71)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiAutocompleteSuggestion.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(73)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiAutocompleteSuggestion.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 70 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _uuid = __webpack_require__(72);
	
	var _uuid2 = _interopRequireDefault(_uuid);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-autocomplete-suggestion',
	
	    props: {
	        id: {
	            type: String,
	            default: function _default() {
	                return _uuid2.default.short();
	            }
	        },
	        item: {
	            type: [String, Object],
	            required: true
	        },
	        partial: {
	            type: String,
	            default: 'ui-autocomplete-simple' },
	        highlighted: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    partials: {
	        'ui-autocomplete-simple': '<li class="ui-autocomplete-suggestion-item" v-text="item.text || item"></li>',
	
	        'ui-autocomplete-image': '<div class="image" :style="{ \'background-image\': \'url(\' + item.image + \')\' }"></div>\n            <div class="text" v-text="item.text"></div>'
	    }
	};

/***/ },
/* 72 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * Fast UUID generator, RFC4122 version 4 compliant.
	 * @author Jeff Ward (jcward.com).
	 * @license MIT license
	 * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
	 **/
	
	var lut = [];
	
	for (var i = 0; i < 256; i++) {
	    lut[i] = (i < 16 ? '0' : '') + i.toString(16);
	}
	
	var generate = function generate() {
	    var d0 = Math.random() * 0xffffffff | 0;
	    var d1 = Math.random() * 0xffffffff | 0;
	    var d2 = Math.random() * 0xffffffff | 0;
	    var d3 = Math.random() * 0xffffffff | 0;
	
	    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];
	};
	
	var short = function short(prefix) {
	    prefix = prefix || '';
	
	    var uuid = generate();
	
	    return prefix + uuid.split('-')[0];
	};
	
	exports.default = {
	    generate: generate,
	    short: short
	};

/***/ },
/* 73 */
/***/ function(module, exports) {

	module.exports = "\n<li\n    class=\"ui-autocomplete-suggestion\":id=\"id\"\n    :class=\"[partial, { 'highlighted': highlighted }]\"\n>\n    <partial :name=\"partial\"></partial>\n</li>\n";

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	var _ReceivesTargetedEvent = __webpack_require__(75);
	
	var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    props: {
	        id: String,
	        name: {
	            type: String,
	            required: true
	        },
	        placeholder: String,
	        value: {
	            type: [String, Number],
	            default: '',
	            twoWay: true
	        },
	        icon: String,
	        iconRight: {
	            type: Boolean,
	            default: false
	        },
	        label: String,
	        hideLabel: {
	            type: Boolean,
	            default: false
	        },
	        helpText: String,
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        debounce: {
	            type: Number,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            active: false,
	            initialValue: ''
	        };
	    },
	
	
	    computed: {
	        showFeedback: function showFeedback() {
	            var canBeValidated = Boolean(this.validationRules);
	            var hasHelpText = Boolean(this.helpText);
	
	            return canBeValidated || hasHelpText;
	        }
	    },
	
	    created: function created() {
	        this.initialValue = this.value;
	    },
	
	
	    directives: {
	        disabled: _disabled2.default
	    },
	
	    mixins: [_ReceivesTargetedEvent2.default]
	};

/***/ },
/* 75 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    props: {
	        id: String
	    },
	
	    methods: {
	        eventTargetsComponent: function eventTargetsComponent(eventTarget) {
	            if (eventTarget === undefined || this.id === eventTarget) {
	                return true;
	            }
	
	            return false;
	        }
	    }
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _validatorjs = __webpack_require__(77);
	
	var _validatorjs2 = _interopRequireDefault(_validatorjs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    props: {
	        valid: {
	            type: Boolean,
	            default: true,
	            twoWay: true
	        },
	        dirty: {
	            type: Boolean,
	            default: false,
	            twoWay: true
	        },
	        hideValidationErrors: {
	            type: Boolean,
	            default: false
	        },
	        validationRules: String,
	        validationMessages: Object
	    },
	
	    data: function data() {
	        return {
	            validationError: ''
	        };
	    },
	
	
	    methods: {
	        validate: function validate() {
	            if (!this.validationRules || !this.dirty) {
	                return;
	            }
	
	            var data = {
	                value: this.value
	            };
	
	            var rules = {
	                value: this.validationRules
	            };
	
	            var validation = new _validatorjs2.default(data, rules, this.validationMessages);
	            validation.setAttributeNames({ value: this.name.replace(/_/g, ' ') });
	
	            this.valid = validation.passes();
	
	            if (!this.valid) {
	                this.validationError = validation.errors.first('value');
	            }
	        }
	    }
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// Get required modules
	var Rules = __webpack_require__(78);
	var Lang = __webpack_require__(79);
	var Errors = __webpack_require__(86);
	var Attributes = __webpack_require__(81);
	var AsyncResolvers = __webpack_require__(87);
	
	var Validator = function(input, rules, customMessages) {
		var lang = Validator.getDefaultLang();
		this.input = input;
	
		this.messages = Lang._make(lang);
		this.messages._setCustom(customMessages);
		this.setAttributeFormatter(Validator.prototype.attributeFormatter);
	
		this.errors = new Errors();
		this.errorCount = 0;
		
		this.hasAsync = false;
		this.rules = this._parseRules(rules);
	};
	
	Validator.prototype = {
	
		constructor: Validator,
	
		/**
		 * Default language
		 *
		 * @type {string}
		 */
		lang: 'en',
	
		/**
		 * Numeric based rules
		 *
		 * @type {array}
		 */
		numericRules: ['integer', 'numeric', 'between'],
	
		/**
		 * Attribute formatter.
		 *
		 * @type {function}
		 */
		attributeFormatter: Attributes.formatter,
	
		/**
		 * Run validator
		 *
		 * @return {boolean} Whether it passes; true = passes, false = fails
		 */
		check: function() {
			var self = this;
	
			for (var attribute in this.rules) {
				var attributeRules = this.rules[attribute];
				var inputValue = this.input[attribute]; // if it doesnt exist in input, it will be undefined
	
				for (var i = 0, len = attributeRules.length, rule, ruleOptions, rulePassed; i < len; i++) {
					ruleOptions = attributeRules[i];
					rule = this.getRule(ruleOptions.name);
	
					if (!this._isValidatable(rule, inputValue)) {
						continue;
					}
					
					rulePassed = rule.validate(inputValue, ruleOptions.value, attribute);
					if (!rulePassed) {
						this._addFailure(rule);
					}
	
					if (this._shouldStopValidating(attribute, rulePassed)) {
						break;
					}
				}
			}
	
			return this.errorCount === 0;
		},
	
		/**
		 * Run async validator
		 *
		 * @param {function} passes
		 * @param {function} fails
		 * @return {void}
		 */
		/**
		 * Run async validator
		 *
		 * @param {function} passes
		 * @param {function} fails
		 * @return {void}
		 */
		checkAsync: function(passes, fails) {
			var _this = this;
			passes = passes || function() {};
			fails = fails || function() {};
	
			var failsOne = function(rule, message) {
				_this._addFailure(rule, message);
			};
	
			var resolvedAll = function(allPassed) {
				if (allPassed) {
					passes();
				}
				else {
					fails();
				}
			};
	
			var validateRule = function(inputValue, ruleOptions, attribute, rule) {
				return function() {
					var resolverIndex = asyncResolvers.add(rule);
					rule.validate(inputValue, ruleOptions.value, attribute, function() { asyncResolvers.resolve(resolverIndex); });
				};
			};
	
			var asyncResolvers = new AsyncResolvers(failsOne, resolvedAll);
	
			for (var attribute in this.rules) {
				var attributeRules = this.rules[attribute];
				var inputValue = this.input[attribute]; // if it doesnt exist in input, it will be undefined
	
				for (var i = 0, len = attributeRules.length, rule, ruleOptions; i < len; i++) {
					ruleOptions = attributeRules[i];
	
					rule = this.getRule(ruleOptions.name);
	
					if (!this._isValidatable(rule, inputValue)) {
						continue;
					}
	
					validateRule(inputValue, ruleOptions, attribute, rule)();
				}
			}
	
			asyncResolvers.enableFiring();
			asyncResolvers.fire();
		},
	
		/**
		 * Add failure and error message for given rule
		 *
		 * @param {Rule} rule
		 */
		_addFailure: function(rule) {
			var msg = this.messages.render(rule);	
			this.errors.add(rule.attribute, msg);
			this.errorCount++;
		},
	
		/**
		 * Parse rules, normalizing format into: { attribute: [{ name: 'age', value: 3 }] }
		 *
		 * @param  {object} rules
		 * @return {object}
		 */
		_parseRules: function(rules) {
			var parsedRules = {};
			for (var attribute in rules) {
				var rulesArray = rules[attribute];
				var attributeRules = [];
	
				if (typeof rulesArray === 'string') {
					rulesArray = rulesArray.split('|');
				}
				
				for (var i = 0, len = rulesArray.length, rule; i < len; i++) {
					rule = this._extractRuleAndRuleValue(rulesArray[i]);
					if (Rules.isAsync(rule.name)) {
						this.hasAsync = true;
					}
					attributeRules.push(rule);
				}
	
				parsedRules[attribute] = attributeRules;
			}
			return parsedRules;
		},
	
		/**
		 * Extract a rule and a value from a ruleString (i.e. min:3), rule = min, value = 3
		 * 
		 * @param  {string} ruleString min:3
		 * @return {object} object containing the name of the rule and value
		 */
		_extractRuleAndRuleValue: function(ruleString) {
			var rule = {}, ruleArray;
	
			rule.name = ruleString;
	
			if (ruleString.indexOf(':') >= 0) {
				ruleArray = ruleString.split(':');
				rule.name = ruleArray[0];
				rule.value = ruleArray.slice(1).join(":");
			}
	
			return rule;
		},
	
		/**
		 * Determine if attribute has any of the given rules
		 *
		 * @param  {string}  attribute
		 * @param  {array}   findRules
		 * @return {boolean}
		 */
		_hasRule: function(attribute, findRules) {
			var rules = this.rules[attribute] || [];
			for (var i = 0, len = rules.length; i < len; i++) {
				if (findRules.indexOf(rules[i].name) > -1) {
					return true;
				}
			}
			return false;
		},
	
		/**
		 * Determine if attribute has any numeric-based rules.
		 *
		 * @param  {string}  attribute
		 * @return {Boolean}
		 */
		_hasNumericRule: function(attribute) {
			return this._hasRule(attribute, this.numericRules);
		},
	
		/**
		 * Determine if rule is validatable
		 *
		 * @param  {Rule}   rule
		 * @param  {mixed}  value
		 * @return {boolean} 
		 */
		_isValidatable: function(rule, value) {
			if (Rules.isImplicit(rule.name)) {
				return true;
			}
	
			return this.getRule('required').validate(value);
		},
	
	
		/**
		 * Determine if we should stop validating.
		 *
		 * @param  {string} attribute
		 * @param  {boolean} rulePassed
		 * @return {boolean}
		 */
		_shouldStopValidating: function(attribute, rulePassed) {
	
			var stopOnAttributes = this.stopOnAttributes;
			if (stopOnAttributes === false || rulePassed === true) {
				return false;
			}
	
			if (stopOnAttributes instanceof Array) {
				return stopOnAttributes.indexOf(attribute) > -1;
			}
	
			return true;
		},
	
		/**
		 * Set custom attribute names.
		 *
		 * @param {object} attributes
		 * @return {void}
		 */
		setAttributeNames: function(attributes) {
			this.messages._setAttributeNames(attributes);
		},
	
		/**
		 * Set the attribute formatter.
		 *
		 * @param {fuction} func
		 * @return {void}
		 */
		setAttributeFormatter: function(func) {
			this.messages._setAttributeFormatter(func);
		},
	
		/**
		 * Get validation rule
		 *
		 * @param  {string} name
		 * @return {Rule}
		 */
		getRule: function(name) {
			return Rules.make(name, this);
		},
	
		/**
		 * Stop on first error.
		 *
		 * @param  {boolean|array} An array of attributes or boolean true/false for all attributes.
		 * @return {void}
		 */
		stopOnError: function(attributes) {
			this.stopOnAttributes = attributes;
		},
	
		/**
		 * Determine if validation passes
		 *
		 * @param {function} passes
		 * @return {boolean|undefined}
		 */
		passes: function(passes) {
			var async = this._checkAsync('passes', passes);
			if (async) {
				return this.checkAsync(passes);
			}
			return this.check();
		},
	
		/**
		 * Determine if validation fails
		 *
		 * @param {function} fails
		 * @return {boolean|undefined}
		 */
		fails: function(fails) {
			var async = this._checkAsync('fails', fails);
			if (async) {
				return this.checkAsync(function() {}, fails);
			}
			return !this.check();
		},
	
		/**
		 * Check if validation should be called asynchronously
		 *
	 	 * @param  {string}   funcName Name of the caller
		 * @param  {function} callback
		 * @return {boolean}
		 */
		_checkAsync: function(funcName, callback) {
			var hasCallback = typeof callback === 'function';
			if (this.hasAsync && !hasCallback) {
				throw funcName + ' expects a callback when async rules are being tested.';
			}
	
			return this.hasAsync || hasCallback;
		}
	
	};
	
	/**
	 * Set messages for language
	 *
	 * @param {string} lang
	 * @param {object} messages
	 * @return {this}
	 */
	Validator.setMessages = function(lang, messages) {
		Lang._set(lang, messages);
		return this;
	};
	
	/**
	 * Get messages for given language
	 *
	 * @param  {string} lang
	 * @return {Messages}
	 */
	Validator.getMessages = function(lang) {
		return Lang._get(lang);
	};
	
	/**
	 * Set default language to use
	 *
	 * @param {string} lang
	 * @return {void}
	 */
	Validator.useLang = function(lang) {
		this.prototype.lang = lang;
	};
	
	/**
	 * Get default language
	 *
	 * @return {string}
	 */
	Validator.getDefaultLang = function() {
		return this.prototype.lang;
	};
	
	/**
	 * Set the attribute formatter.
	 *
	 * @param {fuction} func
	 * @return {void}
	 */
	Validator.setAttributeFormatter = function(func) {
		this.prototype.attributeFormatter = func;
	};
	
	/**
	 * Stop on first error.
	 *
	 * @param  {boolean|array} An array of attributes or boolean true/false for all attributes.
	 * @return {void}
	 */
	Validator.stopOnError = function(attributes) {
		this.prototype.stopOnAttributes = attributes;
	};
	
	/**
	 * Register custom validation rule
	 *
	 * @param  {string}   name
	 * @param  {function} fn
	 * @param  {string}   message
	 * @return {void}
	 */
	Validator.register = function(name, fn, message) {
		var lang = Validator.getDefaultLang();
		Rules.register(name, fn);
		Lang._setRuleMessage(lang, name, message);
	};
	
	/**
	 * Register asynchronous validation rule
	 *
	 * @param  {string}   name
	 * @param  {function} fn
	 * @param  {string}   message
	 * @return {void}
	 */
	Validator.registerAsync = function(name, fn, message) {
		var lang = Validator.getDefaultLang();
		Rules.registerAsync(name, fn);
		Lang._setRuleMessage(lang, name, message);
	};
	
	module.exports = Validator;


/***/ },
/* 78 */
/***/ function(module, exports) {

	var rules = {
	
		required: function(val) {
			var str;
	
			if (val === undefined || val === null) {
				return false;
			}
	
			str = String(val).replace(/\s/g, "");
			return str.length > 0 ? true : false;
		},
	
		required_if: function(val, req, attribute) {
			req = this.getParameters();
			if (this.validator.input[req[0]] === req[1]) {
				return this.validator.getRule('required').validate(val);
			}
	
			return true;
		},
	
		// compares the size of strings
		// with numbers, compares the value
		size: function(val, req, attribute) {
			if (val) {
				req = parseFloat(req);
	
				var size = this.getSize();
	
				return size === req;
			}
	
			return true;
		},
	
		/**
		 * Compares the size of strings or the value of numbers if there is a truthy value
		 */
		min: function(val, req, attribute) {
			var size = this.getSize();
			return size >= req;
		},
	
		/**
		 * Compares the size of strings or the value of numbers if there is a truthy value
		 */
		max: function(val, req, attribute) {
			var size = this.getSize();
			return size <= req;
		},
	
		between: function(val, req, attribute) {
			req = this.getParameters();
			var size = this.getSize();
			var min = parseFloat(req[0], 10);
			var max = parseFloat(req[1], 10);
			return size >= min && size <= max;
		},
	
		email: function(val) {
			var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
			return re.test(val);
		},
	
		numeric: function(val) {
			var num;
	
			num = Number(val); // tries to convert value to a number. useful if value is coming from form element
	
			if (typeof num === 'number' && !isNaN(num) && typeof val !== 'boolean') {
				return true;
			} else {
				return false;
			}
		},
	
		array: function(val) {
			return val instanceof Array;
		},
	
		url: function(url) {
			return (/^https?:\/\/\S+/).test(url);
		},
	
		alpha: function(val) {
			return (/^[a-zA-Z]+$/).test(val);
		},
	
		alpha_dash: function(val) {
			return (/^[a-zA-Z0-9_\-]+$/).test(val);
		},
	
		alpha_num: function(val) {
			return (/^[a-zA-Z0-9]+$/).test(val);
		},
	
		same: function(val, req) {
			var val1 = this.validator.input[req];
			var val2 = val;
	
			if (val1 === val2) {
				return true;
			}
	
			return false;
		},
	
		different: function(val, req) {
			var val1 = this.validator.input[req];
			var val2 = val;
	
			if (val1 !== val2) {
				return true;
			}
	
			return false;
		},
	
		"in": function(val, req) {
			var list, i;
	
			if (val) {
				list = req.split(',');
			}
	
			if (val && !(val instanceof Array)) {
				val = String(val); // if it is a number
	
				for (i = 0; i < list.length; i++) {
					if (val === list[i]) {
						return true;
					}
				}
	
				return false;
			}
	
			if (val && val instanceof Array) {
				for (i = 0; i < val.length; i++) {
					if (list.indexOf(val[i]) < 0) {
						return false;
					}
				}
			}
	
			return true;
		},
	
		not_in: function(val, req) {
			var list = req.split(',');
			var len = list.length;
			var returnVal = true;
	
			val = String(val); // convert val to a string if it is a number
	
			for (var i = 0; i < len; i++) {
				if (val === list[i]) {
					returnVal = false;
					break;
				}
			}
	
			return returnVal;
		},
	
		accepted: function(val) {
			if (val === 'on' || val === 'yes' || val === 1 || val === '1') {
				return true;
			}
	
			return false;
		},
	
		confirmed: function(val, req, key) {
			var confirmedKey = key + '_confirmation';
	
			if (this.validator.input[confirmedKey] === val) {
				return true;
			}
	
			return false;
		},
	
		integer: function(val) {
			return String(parseInt(val, 10)) === String(val);
		},
	
		digits: function(val, req) {
			var numericRule = this.validator.getRule('numeric');
			if (numericRule.validate(val) && String(val).length === parseInt(req)) {
				return true;
			}
	
			return false;
		},
	
		regex: function(val, req) {
			var mod = /[g|i|m]{1,3}$/;
			var flag = req.match(mod);
			flag = flag ? flag[0] : "i";
			req = req.replace(mod,"").slice(1,-1);
			req = new RegExp(req,flag);
			return !!val.match(req);
		}
	
	};
	
	function Rule(name, fn, async) {
		this.name = name;
		this.fn = fn;
		this.passes = null;
		this.customMessage = undefined;
		this.async = async;
	}
	
	Rule.prototype = {
	
		/**
		 * Validate rule
		 *
		 * @param  {mixed} inputValue
		 * @param  {mixed} ruleValue
		 * @param  {string} attribute
		 * @param  {function} callback
		 * @return {boolean|undefined}
		 */
		validate: function(inputValue, ruleValue, attribute, callback) {
			var _this = this;
			this._setValidatingData(attribute, inputValue, ruleValue);
			if (typeof callback === 'function') {
				this.callback = callback;
				var handleResponse = function(passes, message) {
					_this.response(passes, message);
				};
	
				if (this.async) {
					return this.fn.apply(this, [inputValue, ruleValue, attribute, handleResponse]);
				}
				else {
					return handleResponse(this.fn.apply(this, [inputValue, ruleValue, attribute]));
				}
			}
			return this.fn.apply(this, [inputValue, ruleValue, attribute]);
		},
	
		/**
		 * Set validating data
		 *
		 * @param {string} attribute
		 * @param {mixed} inputValue
		 * @param {mixed} ruleValue
		 * @return {void}
		 */
		_setValidatingData: function(attribute, inputValue, ruleValue) {
			this.attribute = attribute;
			this.inputValue = inputValue;
			this.ruleValue = ruleValue;
		},
	
		/**
		 * Get parameters
		 *
		 * @return {array}
		 */
		getParameters: function() {
			return this.ruleValue ? this.ruleValue.split(',') : [];
		},
	
		/**
		 * Get true size of value
		 *
		 * @return {integer|float}
		 */
		getSize: function() {
			var value = this.inputValue;
	
			if (value instanceof Array) {
				return value.length;
			}
	
			if (typeof value === 'number') {
				return value;
			}
	
			if (this.validator._hasNumericRule(this.attribute)) {
				return parseFloat(value, 10);
			}
	
			return value.length;
		},
	
		/**
		 * Get the type of value being checked; numeric or string.
		 *
		 * @return {string}
		 */
		_getValueType: function() {
			
			if (typeof this.inputValue === 'number' || this.validator._hasNumericRule(this.attribute))
			{
				return 'numeric';
			}
	
			return 'string';
		},
	
		/**
		 * Set the async callback response
		 *
		 * @param  {boolean|undefined} passes  Whether validation passed
		 * @param  {string|undefined} message Custom error message
		 * @return {void}
		 */
		response: function(passes, message) {
			this.passes = (passes === undefined || passes === true);
			this.customMessage = message;
			this.callback(this.passes, message);
		},
	
		/**
		 * Set validator instance
		 *
		 * @param {Validator} validator
		 * @return {void}
		 */
		setValidator: function(validator) {
			this.validator = validator;
		}
	
	};
	
	var manager = {
	
		/**
		 * List of async rule names
		 *
		 * @type {Array}
		 */
		asyncRules: [],
	
		/**
		 * Implicit rules (rules to always validate)
		 *
		 * @type {Array}
		 */
		implicitRules: ['required', 'required_if', 'accepted'],
	
		/**
		 * Get rule by name
		 *
		 * @param  {string} name
		 * @param {Validator}
		 * @return {Rule}
		 */
		make: function(name, validator) {
			var async = this.isAsync(name);
			var rule = new Rule(name, rules[name], async);
			rule.setValidator(validator);
			return rule;
		},
	
		/**
		 * Determine if given rule is async
		 *
		 * @param  {string}  name
		 * @return {boolean}
		 */
		isAsync: function(name) {
			for (var i = 0, len = this.asyncRules.length; i < len; i++) {
				if (this.asyncRules[i] === name) {
					return true;
				}
			}
			return false;
		},
	
		/**
		 * Determine if rule is implicit (should always validate)
		 *
		 * @param {string} name
		 * @return {boolean}
		 */
		isImplicit: function(name) {
			return this.implicitRules.indexOf(name) > -1;
		},
	
		/**
		 * Register new rule
		 *
		 * @param  {string}   name
		 * @param  {function} fn
		 * @return {void}
		 */
		register: function(name, fn) {
			rules[name] = fn;
		},
	
		/**
		 * Register async rule
		 *
		 * @param  {string}   name
		 * @param  {function} fn
		 * @return {void}
		 */
		registerAsync: function(name, fn) {
			this.register(name, fn);
			this.asyncRules.push(name);
		}
	
	};
	
	
	module.exports = manager;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var Messages = __webpack_require__(80);
	
	__webpack_require__(82);
	
	var container = {
	
		messages: {},
	
		/**
		 * Set messages for language
		 *
		 * @param {string} lang
		 * @param {object} rawMessages
		 * @return {void}
		 */
		_set: function(lang, rawMessages) {
			this.messages[lang] = rawMessages;
		},
	
		/**
		 * Set message for given language's rule.
		 *
		 * @param {string} lang
		 * @param {string} attribute
		 * @param {string|object} message
		 * @return {void}
		 */
		_setRuleMessage: function(lang, attribute, message) {
			this._load(lang);
			if (message === undefined) {
				message = this.messages[lang].def;
			}
	
			this.messages[lang][attribute] = message;
		},
	
		/**
		 * Load messages (if not already loaded)
		 *
		 * @param  {string} lang 
		 * @return {void}
		 */
		_load: function(lang) {
			if (!this.messages[lang]) {
				var rawMessages = __webpack_require__(83)("./" + lang);
				this._set(lang, rawMessages);
			}
		},
	
		/**
		 * Get raw messages for language
		 *
		 * @param  {string} lang
		 * @return {object}
		 */
		_get: function(lang) {
			this._load(lang);
			return this.messages[lang];
		},
	
		/**
		 * Make messages for given language
		 *
		 * @param  {string} lang
		 * @return {Messages}
		 */
		_make: function(lang) {
			this._load(lang);
			return new Messages(lang, this.messages[lang]);
		}
	
	};
	
	module.exports = container;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var Attributes = __webpack_require__(81);
	
	var Messages = function(lang, messages) {
		this.lang = lang;
		this.messages = messages;
		this.customMessages = {};
		this.attributeNames = {};
	};
	
	Messages.prototype = {
		constructor: Messages,
	
		/**
		 * Set custom messages
		 *
		 * @param {object} customMessages
		 * @return {void}
		 */
		_setCustom: function(customMessages) {
			this.customMessages = customMessages || {};
		},
	
		/**
		 * Set custom attribute names.
		 *
		 * @param {object} attributes
		 */
		_setAttributeNames: function(attributes) {
			this.attributeNames = attributes;
		},
	
		/**
		 * Set the attribute formatter.
		 *
		 * @param {fuction} func
		 * @return {void}
		 */
		_setAttributeFormatter: function(func) {
			this.attributeFormatter = func;
		},
	
		/**
		 * Get attribute name to display.
		 *
		 * @param  {string} attribute
		 * @return {string}
		 */
		_getAttributeName: function(attribute) {
			var name = attribute;
			if (this.attributeNames.hasOwnProperty(attribute)) {
				return this.attributeNames[attribute];
			}
			else if (this.messages.attributes.hasOwnProperty(attribute)) {
				name = this.messages.attributes[attribute];
			}
	
			if (this.attributeFormatter)
			{
				name = this.attributeFormatter(name);
			}
			
			return name;
		},
	
		/**
		 * Get all messages
		 *
		 * @return {object}
		 */
		all: function() {
			return this.messages;
		},
	
		/**
		 * Render message
		 *
		 * @param  {Rule} rule
		 * @return {string}
		 */
		render: function(rule) {
			if (rule.customMessage) {
				return rule.customMessage;
			}
			var template = this._getTemplate(rule);
	
			var message;
			if (Attributes.replacements[rule.name]) {
				message = Attributes.replacements[rule.name].apply(this, [template, rule]);
			}
			else {
				message = this._replacePlaceholders(rule, template, {});
			}
	
			return message;
		},
	
		/**
		 * Get the template to use for given rule
		 *
		 * @param  {Rule} rule
		 * @return {string}
		 */
		_getTemplate: function(rule) {
	
			var messages = this.messages;
			var template = messages.def;
			var customMessages = this.customMessages;
			var formats = [rule.name + '.' + rule.attribute, rule.name];
	
			for (var i = 0, format; i < formats.length; i++) {
				format = formats[i];
				if (customMessages.hasOwnProperty(format)) {
					template = customMessages[format];
					break;
				}
				else if (messages.hasOwnProperty(format)) {
					template = messages[format];
					break;
				}
			}
	
			if (typeof template === 'object') {
				template = template[rule._getValueType()];
			}
	
			return template;
		},
	
		/**
		 * Replace placeholders in the template using the data object
		 *
		 * @param  {Rule} rule
		 * @param  {string} template
		 * @param  {object} data
		 * @return {string}
		 */
		_replacePlaceholders: function(rule, template, data) {
			var message, attribute;
	
			data.attribute = this._getAttributeName(rule.attribute);
			data[rule.name] = rule.getParameters().join(',');
	
			if (typeof template === 'string' && typeof data === 'object') {
				message = template;
	
				for (attribute in data) {
					message = message.replace(':' + attribute, data[attribute]);
				}
			}
	
			return message;
		}
	
	};
	
	module.exports = Messages;


/***/ },
/* 81 */
/***/ function(module, exports) {

	var replacements = {
	
		/**
		 * Between replacement (replaces :min and :max)
		 *
		 * @param  {string} template
		 * @param  {Rule} rule
		 * @return {string}
		 */
		between: function(template, rule) {
			var parameters = rule.getParameters();
			return this._replacePlaceholders(rule, template, { min: parameters[0], max: parameters[1] });
		},
	
		/**
		 * Required_if replacement.
		 *
		 * @param  {string} template
		 * @param  {Rule} rule
		 * @return {string}
		 */
		required_if: function(template, rule) {
			var parameters = rule.getParameters();
			return this._replacePlaceholders(rule, template, { other: parameters[0], value: parameters[1] });
		}
	};
	
	function formatter(attribute)
	{
		return attribute.replace(/[_\[]/g, ' ').replace(/]/g, '');
	}
	
	module.exports = {
		replacements: replacements,
		formatter: formatter
	};


/***/ },
/* 82 */
/***/ function(module, exports) {

	module.exports = {
		accepted: 'The :attribute must be accepted.',
		alpha: 'The :attribute field must contain only alphabetic characters.',
		alpha_dash: 'The :attribute field may only contain alpha-numeric characters, as well as dashes and underscores.',
		alpha_num: 'The :attribute field must be alphanumeric.',
		between: 'The :attribute field must be between :min and :max.',
		confirmed: 'The :attribute confirmation does not match.',
		email: 'The :attribute format is invalid.',
		def: 'The :attribute attribute has errors.',
		digits: 'The :attribute must be :digits digits.',
		different: 'The :attribute and :different must be different.',
		'in': 'The selected :attribute is invalid.',
		integer: 'The :attribute must be an integer.',
		min: {
			numeric: 'The :attribute must be at least :min.',
			string: 'The :attribute must be at least :min characters.'
		},
		max: {
			numeric: 'The :attribute must be less than :max.',
			string: 'The :attribute must be less than :max characters.'
		},
		not_in: 'The selected :attribute is invalid.',
		numeric: 'The :attribute must be a number.',
		required: 'The :attribute field is required.',
		required_if: 'The :attribute field is required when :other is :value.',
		same: 'The :attribute and :same fields must match.',
		size: {
			numeric: 'The :attribute must be :size.',
			string: 'The :attribute must be :size characters.'
		},
		url: 'The :attribute format is invalid.',
		regex: 'The :attribute format is invalid',
		attributes: {}
	};

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./en": 82,
		"./en.js": 82,
		"./es": 84,
		"./es.js": 84,
		"./ru": 85,
		"./ru.js": 85
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 83;


/***/ },
/* 84 */
/***/ function(module, exports) {

	module.exports = {
	    accepted: 'El campo :attribute debe ser aceptado.',
	    alpha: 'El campo :attribute solo debe contener letras.',
	    alpha_dash: 'El campo :attribute solo debe contener letras, números y guiones.',
	    alpha_num: 'El campo :attribute solo debe contener letras y números.',
	    attributes: {},
	    between: 'El campo :attribute tiene que estar entre :min - :max.',
	    confirmed: 'La confirmación de :attribute no coincide.',
	    different: 'El campo :attribute y :other deben ser diferentes.',
	    digits: 'El campo :attribute debe tener :digits dígitos.',
	    email: 'El campo :attribute no es un correo válido',
	    'in': 'El campo :attribute es inválido.',
	    integer: 'El campo :attribute debe ser un número entero.',
	    max: {
	        numeric: 'El campo :attribute no debe ser mayor a :max.',
	        string: 'El campo :attribute no debe ser mayor que :max caracteres.'
	    },
	    min: {
	        numeric: 'El tamaño del campo :attribute debe ser de al menos :min.',
	        string: 'El campo :attribute debe contener al menos :min caracteres.'
	    },
	    not_in: 'El campo :attribute es inválido.',
	    numeric: 'El campo :attribute debe ser numérico.',
	    regex: 'El formato del campo :attribute es inválido.',
	    required: 'El campo :attribute es obligatorio.',
	    required_if: 'El campo :attribute es obligatorio cuando :other es :value.',
	    same: 'El campo :attribute y :other deben coincidir.',
	    size: {
	        numeric: 'El tamaño del campo :attribute debe ser :size.',
	        string: 'El campo :attribute debe contener :size caracteres.'
	    },
	    url: 'El formato de :attribute es inválido.'
	};


/***/ },
/* 85 */
/***/ function(module, exports) {

	module.exports = {
		accepted: 'Вы должны принять :attribute.',
		alpha: 'Поле :attribute может содержать только буквы.',
		alpha_dash: '"Поле :attribute может содержать только буквы, цифры, дефисы и символы подчёркивания.',
		alpha_num: 'Поле :attribute может содержать только буквы и цифры.',
		between: 'Поле :attribute должно быть между :min :max и.',
		confirmed: 'Поле :attribute не совпадает с подтверждением.',
		email: 'Поле :attribute должно быть действительным электронным адресом.',
		def: 'Поле :attribute содержит ошибки.',
		digits: 'Длина цифрового поля :attribute должна быть :digits.',
		different: 'Поля :attribute и :different должны различаться.',
		'in': 'Выбранное значение для :attribute ошибочно.',
		integer: 'Поле :attribute должно быть целым числом.',
		min: {
			numeric: 'Поле :attribute должно быть не менее :min.',
			string: 'Количество символов в поле :attribute должно быть не менее :min.'
		},
		max: {
			numeric: 'Поле :attribute не может быть более :max.',
			string: 'Количество символов в поле :attribute не может превышать :max.'
		},
		not_in: 'Выбранное значение для :attribute ошибочно.',
		numeric: 'Поле :attribute должно быть числом.',
		required: 'Поле :attribute обязательно для заполнения.',
		required_if: 'Поле :attribute требуется при :attribute :other является.',
		same: 'Значение :attribute должно совпадать с :same.',
		size: {
			numeric: 'Поле :attribute должно быть равным :size.',
			string: 'Количество символов в поле :attribute должно быть равным :size.'
		},
		url: 'Поле :attribute имеет ошибочный формат.',
		regex: 'Поле :attribute имеет ошибочный формат.',
		attributes: {}
	};

/***/ },
/* 86 */
/***/ function(module, exports) {

	var Errors = function() {
		this.errors = {};
	};
	
	Errors.prototype = {
		constructor: Errors,
	
		/**
		 * Add new error message for given attribute
		 *
		 * @param  {string} attribute
		 * @param  {string} message
		 * @return {void}
		 */
		add: function(attribute, message) {
			if (!this.has(attribute)) {
				this.errors[attribute] = [];
			}
			this.errors[attribute].push(message);
		},
	
		/**
		 * Returns an array of error messages for an attribute, or an empty array
		 * 
		 * @param  {string} attribute A key in the data object being validated
		 * @return {array} An array of error messages
		 */
		get: function(attribute) {
			if (this.has(attribute)) {
				return this.errors[attribute];
			}
	
			return [];
		},
	
		/**
		 * Returns the first error message for an attribute, false otherwise
		 * 
		 * @param  {string} attribute A key in the data object being validated
		 * @return {string|false} First error message or false
		 */
		first: function(attribute) {
			if (this.has(attribute)) {
				return this.errors[attribute][0];
			}
	
			return false;
		},
	
		/**
		 * Get all error messages from all failing attributes
		 * 
		 * @return {Object} Failed attribute names for keys and an array of messages for values
		 */
		all: function() {
			return this.errors;
		},
	
		/**
		 * Determine if there are any error messages for an attribute
		 * 
		 * @param  {string}  attribute A key in the data object being validated
		 * @return {boolean}
		 */
		has: function(attribute) {
			if (this.errors.hasOwnProperty(attribute)) {
				return true;
			}
	
			return false;
		}
	};
	
	module.exports = Errors;

/***/ },
/* 87 */
/***/ function(module, exports) {

	function AsyncResolvers(onFailedOne, onResolvedAll) {
		this.onResolvedAll = onResolvedAll;
		this.onFailedOne = onFailedOne;
		this.resolvers = {};
		this.resolversCount = 0;
		this.passed = [];
		this.failed = [];
		this.firing = false;
	}
	
	AsyncResolvers.prototype = {
	
		/**
		 * Add resolver
		 *
		 * @param {Rule} rule
		 * @return {integer}
		 */
		add: function(rule) {
			var index = this.resolversCount;
			this.resolvers[index] = rule;
			this.resolversCount++;
			return index;
		},
	
		/**
		 * Resolve given index
		 *
		 * @param  {integer} index
		 * @return {void}
		 */
		resolve: function(index) {
			var rule = this.resolvers[index];
			if (rule.passes === true) {
				this.passed.push(rule);
			}
			else if (rule.passes === false) {
				this.failed.push(rule);
				this.onFailedOne(rule);
			}
	
			this.fire();
		},
	
		/**
		 * Determine if all have been resolved
		 *
		 * @return {boolean}
		 */
		isAllResolved: function() {
			return (this.passed.length + this.failed.length) === this.resolversCount;
		},
	
		/**
		 * Attempt to fire final all resolved callback if completed
		 *
		 * @return {void}
		 */
		fire: function() {
	
			if (!this.firing) {
				return;
			}
	
			if (this.isAllResolved()) {
				this.onResolvedAll(this.failed.length === 0);
			}
	
		},
	
		/**
		 * Enable firing
		 *
		 * @return {void}
		 */
		enableFiring: function() {
			this.firing = true;
		}
	
	};
	
	module.exports = AsyncResolvers;


/***/ },
/* 88 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-autocomplete\" v-el:autocomplete\n    :class=\"{\n        'disabled': disabled, 'invalid': !valid, 'dirty': dirty, 'active': active,\n        'has-label': !hideLabel, 'icon-right': iconRight\n    }\"\n>\n    <div class=\"ui-autocomplete-icon-wrapper\" v-if=\"showIcon\">\n        <ui-icon :icon=\"icon\" class=\"ui-autocomplete-icon\"></ui-icon>\n    </div>\n\n    <div class=\"ui-autocomplete-content\">\n        <label class=\"ui-autocomplete-label\">\n            <div class=\"ui-autocomplete-label-text\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n            <ui-icon\n                class=\"ui-autocomplete-clear-button\" icon=\"&#xE5CD\" title=\"Clear\"\n                @click=\"clearSearch\" v-show=\"!disabled && value.length\"\n            ></ui-icon>\n\n            <input\n                class=\"ui-autocomplete-input\" :placeholder=\"placeholder\" :name=\"name\"\n                :id=\"id\" autocomplete=\"off\"\n\n                @focus=\"focus\" @blur=\"blur\" @keydown.up=\"highlight(highlightedItem - 1)\"\n                @keydown.down=\"highlight(highlightedItem + 1)\" @keydown.tab=\"close\"\n                @keydown.enter=\"selectHighlighted(highlightedItem, $event)\"\n\n                v-model=\"value\" v-disabled=\"disabled\" v-el:input\n            >\n\n            <ul class=\"ui-autocomplete-suggestions\" v-show=\"showDropdown\">\n                <ui-autocomplete-suggestion\n                    :highlighted=\"highlightedItem === index\" :item=\"item\" :partial=\"partial\"\n                    v-for=\"(index, item) in suggestions | filterBy search | limitBy limit\"\n                    v-ref:items @click=\"select(item)\"\n                ></ui-autocomplete-suggestion>\n            </ul>\n        </label>\n\n        <div class=\"ui-autocomplete-feedback\" v-if=\"showFeedback\">\n            <div\n                class=\"ui-autocomplete-error-text\" v-text=\"validationError\"\n                transition=\"ui-autocomplete-feedback-toggle\"\n                v-show=\"!hideValidationErrors && !valid\"\n            ></div>\n\n            <div\n                class=\"ui-autocomplete-help-text\" transition=\"ui-autocomplete-feedback-toggle\"\n                v-text=\"helpText\" v-else\n            ></div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(90)
	__vue_script__ = __webpack_require__(91)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiButton.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(92)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiButton.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 90 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _UiMenu = __webpack_require__(13);
	
	var _UiMenu2 = _interopRequireDefault(_UiMenu);
	
	var _UiPopover = __webpack_require__(47);
	
	var _UiPopover2 = _interopRequireDefault(_UiPopover);
	
	var _UiProgressCircular = __webpack_require__(51);
	
	var _UiProgressCircular2 = _interopRequireDefault(_UiProgressCircular);
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	var _HasDropdown = __webpack_require__(56);
	
	var _HasDropdown2 = _interopRequireDefault(_HasDropdown);
	
	var _ShowsRippleInk = __webpack_require__(19);
	
	var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-button',
	
	    props: {
	        type: {
	            type: String,
	            default: 'normal', coerce: function coerce(type) {
	                return 'ui-button-' + type;
	            }
	        },
	        color: {
	            type: String,
	            default: 'default', coerce: function coerce(color) {
	                return 'color-' + color;
	            }
	        },
	        raised: {
	            type: Boolean,
	            default: false
	        },
	        text: String,
	        icon: String,
	        iconRight: {
	            type: Boolean,
	            default: false
	        },
	        loading: {
	            type: Boolean,
	            default: false
	        },
	        showDropdownIcon: {
	            type: Boolean,
	            default: true
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    computed: {
	        styleClasses: function styleClasses() {
	            var classes = [this.type, this.color];
	
	            if (this.raised) {
	                classes.push('ui-button-raised');
	            }
	
	            if (this.hasDropdownMenu || this.hasPopover) {
	                classes.push('has-dropdown');
	            }
	
	            return classes;
	        },
	        spinnerColor: function spinnerColor() {
	            if (this.color === 'color-default' || this.type === 'ui-button-flat') {
	                return 'black';
	            }
	
	            return 'white';
	        },
	        showIcon: function showIcon() {
	            return Boolean(this.icon);
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default,
	        UiMenu: _UiMenu2.default,
	        UiPopover: _UiPopover2.default,
	        UiProgressCircular: _UiProgressCircular2.default
	    },
	
	    mixins: [_HasDropdown2.default, _ShowsRippleInk2.default],
	
	    directives: {
	        disabled: _disabled2.default
	    }
	};

/***/ },
/* 92 */
/***/ function(module, exports) {

	module.exports = "\n<button\n    class=\"ui-button\" :class=\"styleClasses\" v-disabled=\"disabled || loading\"\n    v-el:button\n>\n    <div class=\"ui-button-content\" :class=\"{ 'invisible': loading }\">\n        <ui-icon\n            class=\"ui-button-icon\" :class=\"{ 'position-right': iconRight }\" :icon=\"icon\"\n            v-if=\"showIcon\"\n        ></ui-icon>\n\n        <div class=\"ui-button-text\">\n            <slot>\n                <span v-text=\"text\"></span>\n            </slot>\n        </div>\n\n        <ui-icon\n            class=\"ui-button-dropdown-icon\" icon=\"&#xE5C5;\"\n            v-if=\"!iconRight && showDropdownIcon && (hasDropdownMenu || hasPopover)\"\n        ></ui-icon>\n    </div>\n\n    <ui-progress-circular\n        class=\"ui-button-spinner\" :color=\"spinnerColor\" :size=\"18\" :stroke=\"4.5\"\n        disable-transition v-show=\"loading\"\n    ></ui-progress-circular>\n\n    <ui-ripple-ink v-if=\"!hideRippleInk && !disabled\" :trigger=\"$els.button\"></ui-ripple-ink>\n\n    <ui-menu\n        class=\"ui-button-dropdown-menu\" :trigger=\"$els.button\" :options=\"menuOptions\"\n        :show-icons=\"showMenuIcons\" :show-secondary-text=\"showMenuSecondaryText\"\n        :open-on=\"openDropdownOn\" @option-selected=\"menuOptionSelect\"\n        :dropdown-position=\"dropdownPosition\" v-if=\"hasDropdownMenu\"\n    ></ui-menu>\n\n    <ui-popover :trigger=\"$els.button\" :open-on=\"openDropdownOn\" v-if=\"hasPopover\">\n        <slot name=\"popover\"></slot>\n    </ui-popover>\n</button>\n";

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(94)
	__vue_script__ = __webpack_require__(95)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiCheckbox.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(96)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiCheckbox.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 94 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	var _ReceivesTargetedEvent = __webpack_require__(75);
	
	var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-checkbox',
	
	    props: {
	        name: String,
	        value: {
	            type: Boolean,
	            required: true,
	            twoWay: true
	        },
	        label: String,
	        hideLabel: {
	            type: Boolean,
	            default: false
	        },
	        labelLeft: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            active: false,
	            initialValue: false
	        };
	    },
	    created: function created() {
	        this.initialValue = this.value;
	    },
	
	
	    events: {
	        'ui-input::reset': function uiInputReset(id) {
	            if (!this.eventTargetsComponent(id)) {
	                return;
	            }
	
	            this.value = this.initialValue;
	        }
	    },
	
	    methods: {
	        focus: function focus() {
	            this.active = true;
	        },
	        blur: function blur() {
	            this.active = false;
	        }
	    },
	
	    directives: {
	        disabled: _disabled2.default
	    },
	
	    mixins: [_ReceivesTargetedEvent2.default]
	};

/***/ },
/* 96 */
/***/ function(module, exports) {

	module.exports = "\n<label\n    class=\"ui-checkbox\"\n    :class=\"{ 'disabled': disabled, 'checked': value, 'active': active, 'label-left': labelLeft }\"\n>\n    <input\n        class=\"ui-checkbox-input\" type=\"checkbox\" :name=\"name\" @focus=\"focus\" @blur=\"blur\"\n        v-model=\"value\" v-disabled=\"disabled\"\n    >\n\n    <div class=\"ui-checkbox-checkmark\">\n        <div class=\"ui-checkbox-focus-ring\"></div>\n    </div>\n\n    <div class=\"ui-checkbox-label-text\" v-if=\"!hideLabel\">\n        <slot>\n            <span v-text=\"label\"></span>\n        </slot>\n    </div>\n</label>\n";

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(98)
	__vue_script__ = __webpack_require__(99)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiCollapsible.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(100)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiCollapsible.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 98 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _uuid = __webpack_require__(72);
	
	var _uuid2 = _interopRequireDefault(_uuid);
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	var _ShowsRippleInk = __webpack_require__(19);
	
	var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
	
	var _ReceivesTargetedEvent = __webpack_require__(75);
	
	var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-collapsible',
	
	    props: {
	        id: String,
	        open: {
	            type: Boolean,
	            default: false
	        },
	        header: String,
	        transition: {
	            type: String,
	            default: 'ui-collapsible-toggle'
	        },
	        hideIcon: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            height: 0,
	            isReady: false
	        };
	    },
	
	
	    computed: {
	        icon: function icon() {
	            return this.open ? 'keyboard_arrow_up' : 'keyboard_arrow_down';
	        },
	        calculatedHeight: function calculatedHeight() {
	            if (this.height === 0) {
	                return 'initial';
	            }
	
	            return this.height + 'px';
	        }
	    },
	
	    created: function created() {
	        this.id = this.id || _uuid2.default.short('ui-collapsible-');
	    },
	    ready: function ready() {
	        this.isReady = true;
	        this.setHeight();
	    },
	
	
	    events: {
	        'ui-collapsible::refresh-height': function uiCollapsibleRefreshHeight(id) {
	            if (!this.eventTargetsComponent(id)) {
	                return;
	            }
	
	            this.setHeight();
	        }
	    },
	
	    methods: {
	        toggleMenu: function toggleMenu() {
	            if (this.disabled) {
	                return;
	            }
	
	            this.open = !this.open;
	        },
	        setHeight: function setHeight() {
	            var body = this.$els.body;
	
	            body.style.display = 'block';
	            this.height = body.offsetHeight;
	
	            if (!this.open) {
	                body.style.display = 'none';
	            }
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default
	    },
	
	    directives: {
	        disabled: _disabled2.default
	    },
	
	    mixins: [_ShowsRippleInk2.default, _ReceivesTargetedEvent2.default],
	
	    transitions: {
	        'ui-collapsible-toggle': {
	            afterEnter: function afterEnter() {
	                this.$dispatch('opened');
	                this.setHeight();
	            },
	            afterLeave: function afterLeave() {
	                this.$dispatch('closed');
	            }
	        }
	    }
	};

/***/ },
/* 100 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-collapsible\">\n    <button\n        class=\"ui-collapsible-header\" :class=\"{ 'disabled': disabled }\" :aria-controls=\"id\"\n        :aria-expanded=\"open ? 'true' : 'false'\" @click=\"toggleMenu\" v-disabled=\"disabled\"\n        v-el:button\n    >\n        <div class=\"ui-collapsible-header-content\">\n            <slot name=\"header\">\n                <div v-text=\"header\"></div>\n            </slot>\n        </div>\n\n        <ui-icon class=\"ui-collapsible-header-icon\" :icon=\"icon\" v-if=\"!hideIcon\"></ui-icon>\n\n        <ui-ripple-ink\n            v-if=\"!hideRippleInk && !disabled && isReady\" :trigger=\"$els.button\"\n        ></ui-ripple-ink>\n    </button>\n\n    <div\n        class=\"ui-collapsible-body-wrapper\" :transition=\"transition\"\n        :style=\"{ 'height': calculatedHeight }\" v-show=\"open\"v-el:body\n    >\n        <div class=\"ui-collapsible-body\" :id=\"id\" :aria-hidden=\"open ? null : 'true'\">\n            <slot></slot>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(102)
	__vue_script__ = __webpack_require__(103)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiConfirm.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(108)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiConfirm.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 102 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dominus = __webpack_require__(23);
	
	var _dominus2 = _interopRequireDefault(_dominus);
	
	var _UiModal = __webpack_require__(104);
	
	var _UiModal2 = _interopRequireDefault(_UiModal);
	
	var _UiButton = __webpack_require__(89);
	
	var _UiButton2 = _interopRequireDefault(_UiButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-confirm',
	
	    props: {
	        show: {
	            type: Boolean,
	            required: true,
	            twoWay: true
	        },
	        type: {
	            type: String,
	            default: 'primary' },
	        header: {
	            type: String,
	            default: 'UiConfirm'
	        },
	        confirmButtonText: {
	            type: String,
	            default: 'OK'
	        },
	        confirmButtonIcon: String,
	        denyButtonText: {
	            type: String,
	            default: 'Cancel'
	        },
	        denyButtonIcon: String,
	        autofocus: {
	            type: String,
	            default: 'deny-button' },
	        closeOnConfirm: {
	            type: Boolean,
	            default: false
	        },
	        backdropDismissible: {
	            type: Boolean,
	            default: true
	        },
	        loading: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    methods: {
	        confirm: function confirm() {
	            this.$dispatch('confirmed');
	
	            if (this.closeOnConfirm) {
	                this.show = false;
	            }
	        },
	        deny: function deny() {
	            this.show = false;
	            this.$dispatch('denied');
	        },
	        opened: function opened() {
	            if (this.autofocus === 'confirm-button') {
	                (0, _dominus2.default)(this.$els.confirmButton).addClass('autofocus').once('blur', this.removeAutoFocus);
	
	                this.$els.confirmButton.focus();
	            } else if (this.autofocus === 'deny-button') {
	                (0, _dominus2.default)(this.$els.denyButton).addClass('autofocus').once('blur', this.removeAutoFocus);
	
	                this.$els.denyButton.focus();
	            }
	
	            return true;
	        },
	        removeAutoFocus: function removeAutoFocus() {
	            if (this.autofocus === 'confirm-button') {
	                (0, _dominus2.default)(this.$els.confirmButton).removeClass('autofocus');
	            } else if (this.autofocus === 'deny-button') {
	                (0, _dominus2.default)(this.$els.denyButton).removeClass('autofocus');
	            }
	        }
	    },
	
	    components: {
	        UiModal: _UiModal2.default,
	        UiButton: _UiButton2.default
	    }
	};

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(105)
	__vue_script__ = __webpack_require__(106)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiModal.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(107)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiModal.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 105 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dominus = __webpack_require__(23);
	
	var _dominus2 = _interopRequireDefault(_dominus);
	
	var _UiIconButton = __webpack_require__(10);
	
	var _UiIconButton2 = _interopRequireDefault(_UiIconButton);
	
	var _UiButton = __webpack_require__(89);
	
	var _UiButton2 = _interopRequireDefault(_UiButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-modal',
	
	    props: {
	        show: {
	            type: Boolean,
	            required: true,
	            twoWay: true
	        },
	        type: {
	            type: String,
	            default: 'normal', coerce: function coerce(type) {
	                return 'ui-modal-' + type;
	            }
	        },
	        header: {
	            type: String,
	            default: 'UiModal Header'
	        },
	        body: {
	            type: String,
	            default: 'UiModal body'
	        },
	        role: {
	            type: String,
	            default: 'dialog' },
	        transition: {
	            type: String,
	            default: 'ui-modal-scale' },
	        showCloseButton: {
	            type: Boolean,
	            default: true
	        },
	        hideFooter: {
	            type: Boolean,
	            default: false
	        },
	        dismissible: {
	            type: Boolean,
	            default: true
	        },
	        backdropDismissible: {
	            type: Boolean,
	            default: true
	        }
	    },
	
	    data: function data() {
	        return {
	            lastFocussedElement: null
	        };
	    },
	
	
	    watch: {
	        'show': function show() {
	            var _this = this;
	
	            this.$nextTick(function () {
	                if (_this.show) {
	                    _this.opened();
	                } else {
	                    _this.closed();
	                }
	            });
	        }
	    },
	
	    beforeDestroy: function beforeDestroy() {
	        if (this.show) {
	            this.tearDown();
	        }
	    },
	
	
	    methods: {
	        close: function close(e) {
	            if (!this.dismissible) {
	                return;
	            }
	
	            if (e.currentTarget === this.$els.modalMask && e.target !== e.currentTarget) {
	                return;
	            }
	
	            if (e.currentTarget === this.$els.modalMask && !this.backdropDismissible) {
	                return;
	            }
	
	            this.show = false;
	        },
	        opened: function opened() {
	            this.lastFocussedElement = document.activeElement;
	            this.$els.modalContainer.focus();
	
	            (0, _dominus2.default)('body').addClass('ui-modal-open');
	
	            document.addEventListener('focus', this.restrictFocus, true);
	
	            this.$dispatch('opened');
	        },
	        closed: function closed() {
	            this.tearDown();
	            this.$dispatch('closed');
	        },
	        redirectFocus: function redirectFocus(e) {
	            e.stopPropagation();
	
	            this.$els.modalContainer.focus();
	        },
	        restrictFocus: function restrictFocus(e) {
	            if (!this.$els.modalContainer.contains(e.target)) {
	                e.stopPropagation();
	                this.$els.modalContainer.focus();
	            }
	        },
	        tearDown: function tearDown() {
	            (0, _dominus2.default)('body').removeClass('ui-modal-open');
	
	            document.removeEventListener('focus', this.restrictFocus, true);
	
	            this.lastFocussedElement.focus();
	        }
	    },
	
	    components: {
	        UiIconButton: _UiIconButton2.default,
	        UiButton: _UiButton2.default
	    }
	};

/***/ },
/* 107 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-modal ui-modal-mask\" v-show=\"show\" :transition=\"transition\" :class=\"[type]\"\n    :role=\"role\"\n>\n    <div class=\"ui-modal-wrapper\" @click=\"close\" v-el:modal-mask>\n        <div\n            class=\"ui-modal-container\" tabindex=\"-1\" @keydown.esc=\"close\"\n            v-el:modal-container\n        >\n            <div class=\"ui-modal-header\">\n                <slot name=\"header\">\n                    <h1 v-text=\"header\" class=\"ui-modal-header-text\"></h1>\n                </slot>\n\n                <ui-icon-button\n                    type=\"clear\" icon=\"&#xE5CD\" class=\"ui-modal-close-button\" @click=\"close\"\n                    :disabled=\"!dismissible\" v-if=\"showCloseButton\" v-el:close-button\n                ></ui-icon-button>\n            </div>\n\n            <div class=\"ui-modal-body\">\n                <slot>\n                    <div v-text=\"body\"></div>\n                </slot>\n            </div>\n\n            <div class=\"ui-modal-footer\" v-if=\"!hideFooter\">\n                <slot name=\"footer\">\n                    <ui-button @click=\"close\" v-if=\"dismissible\">Close</ui-button>\n                </slot>\n            </div>\n\n            <div class=\"focus-redirector\" @focus=\"redirectFocus\" tabindex=\"0\"></div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 108 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-confirm\">\n    <ui-modal\n        :show.sync=\"show\" role=\"alertdialog\" :header=\"header\" @opened=\"opened\" show-close-button\n        :dismissible=\"!loading\" :backdrop-dismissible=\"backdropDismissible\"\n    >\n        <div class=\"ui-confirm-message\">\n            <slot></slot>\n        </div>\n\n        <div slot=\"footer\">\n            <ui-button\n                :color=\"type\" :text=\"confirmButtonText\" :icon=\"confirmButtonIcon\"\n                @click=\"confirm\" :loading=\"loading\" v-el:confirm-button\n            ></ui-button>\n\n            <ui-button\n                :text=\"denyButtonText\" :icon=\"denyButtonIcon\" @click=\"deny\"\n                :disabled=\"loading\" v-el:deny-button\n            ></ui-button>\n        </div>\n    </ui-modal>\n</div>\n";

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(110)
	__vue_script__ = __webpack_require__(111)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiFab.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(112)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiFab.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 110 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	var _ShowsTooltip = __webpack_require__(57);
	
	var _ShowsTooltip2 = _interopRequireDefault(_ShowsTooltip);
	
	var _ShowsRippleInk = __webpack_require__(19);
	
	var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-fab',
	
	    props: {
	        type: {
	            type: String,
	            default: 'normal',
	            coerce: function coerce(type) {
	                return 'ui-fab-' + type;
	            }
	        },
	        color: {
	            type: String,
	            default: 'default', coerce: function coerce(color) {
	                return 'color-' + color;
	            }
	        },
	        icon: {
	            type: String,
	            required: true
	        },
	        ariaLabel: String,
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default
	    },
	
	    mixins: [_ShowsTooltip2.default, _ShowsRippleInk2.default],
	
	    directives: {
	        disabled: _disabled2.default
	    }
	};

/***/ },
/* 112 */
/***/ function(module, exports) {

	module.exports = "\n<button\n    class=\"ui-fab\" :class=\"[this.type, this.color]\" :aria-label=\"ariaLabel || tooltip\"\n    v-disabled=\"disabled\" v-el:button\n>\n    <ui-icon class=\"ui-fab-icon\" :icon=\"icon\"></ui-icon>\n\n    <ui-ripple-ink :trigger=\"$els.button\" v-if=\"!hideRippleInk && !disabled\"></ui-ripple-ink>\n\n    <ui-tooltip\n        :trigger=\"$els.button\" :content=\"tooltip\" :position=\"tooltipPosition\" v-if=\"tooltip\"\n    ></ui-tooltip>\n</button>\n";

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(114)
	__vue_script__ = __webpack_require__(115)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiPreloader.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(116)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiPreloader.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 114 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 115 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    name: 'ui-preloader',
	
	    props: {
	        show: {
	            type: Boolean,
	            required: true
	        }
	    }
	};

/***/ },
/* 116 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-preloader\">\n    <div\n        class=\"ui-preloader-progressbar\" :class=\"{ 'loading' : show }\"\n        :aria-busy=\"show ? 'true' : false\" role=\"progressbar\"\n    ></div>\n</div>\n";

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(118)
	__vue_script__ = __webpack_require__(119)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiProgressLinear.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(120)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiProgressLinear.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 118 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 119 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    name: 'ui-progress-linear',
	
	    props: {
	        show: {
	            type: Boolean,
	            default: false
	        },
	        type: {
	            type: String,
	            default: 'indeterminate' },
	        color: {
	            type: String,
	            default: 'color-primary', coerce: function coerce(color) {
	                return 'color-' + color;
	            }
	        },
	        value: {
	            type: Number,
	            coerce: Number,
	            default: 0
	        }
	    },
	
	    computed: {
	        progress: function progress() {
	            if (this.value < 0) {
	                return 0;
	            }
	
	            if (this.value > 100) {
	                return 100;
	            }
	
	            return this.value;
	        }
	    }
	};

/***/ },
/* 120 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-progress-linear\" :class=\"[color]\" v-show=\"show\"\n    transition=\"ui-progress-linear-toggle\"\n>\n    <div\n        class=\"ui-progress-linear-determinate\" :style=\"{ 'width': progress + '%' }\"\n        role=\"progressbar\" :aria-valuemin=\"0\" :aria-valuemax=\"100\" :aria-valuenow=\"value\"\n        v-if=\"type === 'determinate'\"\n    ></div>\n\n    <div\n        class=\"ui-progress-linear-indeterminate\" role=\"progressbar\" :aria-valuemin=\"0\"\n        :aria-valuemax=\"100\" v-else\n    ></div>\n</div>\n";

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(122)
	__vue_script__ = __webpack_require__(123)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiRadio.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(124)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiRadio.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 122 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-radio',
	
	    props: {
	        id: String,
	        name: String,
	        model: {
	            type: String,
	            default: '',
	            twoWay: true
	        },
	        checked: {
	            type: Boolean,
	            default: false
	        },
	        value: String,
	        label: String,
	        hideLabel: {
	            type: Boolean,
	            default: false
	        },
	        labelLeft: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            active: false
	        };
	    },
	
	
	    methods: {
	        focus: function focus() {
	            this.active = true;
	
	            this.$dispatch('focussed');
	        },
	        blur: function blur() {
	            this.active = false;
	
	            this.$dispatch('blurred');
	        }
	    },
	
	    directives: {
	        disabled: _disabled2.default
	    }
	};

/***/ },
/* 124 */
/***/ function(module, exports) {

	module.exports = "\n<label\n    class=\"ui-radio\"\n    :class=\"{ 'disabled': disabled, 'checked': active, 'label-left': labelLeft }\"\n>\n    <div class=\"ui-radio-input-wrapper\">\n        <input\n            class=\"ui-radio-input\" type=\"radio\" :id=\"id\" :name=\"name\" :value=\"value\"\n            :checked=\"checked\" @focus=\"focus\" @blur=\"blur\" v-model=\"model\" v-disabled=\"disabled\"\n        >\n\n        <span class=\"ui-radio-border\"></span>\n        <span class=\"ui-radio-inner-dot\"></span>\n    </div>\n\n    <div class=\"ui-radio-label-text\" v-if=\"!hideLabel\">\n        <slot>\n            <span v-text=\"label\"></span>\n        </slot>\n    </div>\n</label>\n";

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(126)
	__vue_script__ = __webpack_require__(127)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiRadioGroup.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(128)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiRadioGroup.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 126 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	var _UiRadio = __webpack_require__(121);
	
	var _UiRadio2 = _interopRequireDefault(_UiRadio);
	
	var _ReceivesTargetedEvent = __webpack_require__(75);
	
	var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-radio-group',
	
	    props: {
	        name: {
	            type: String,
	            required: true
	        },
	        value: {
	            type: String,
	            default: '',
	            twoWay: true
	        },
	        options: {
	            type: Array,
	            required: true
	        },
	        label: String,
	        hideLabel: {
	            type: Boolean,
	            default: false
	        },
	        helpText: String,
	        vertical: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            active: false,
	            initialValue: ''
	        };
	    },
	    created: function created() {
	        this.initialValue = this.value;
	    },
	
	
	    computed: {
	        showFeedback: function showFeedback() {
	            return Boolean(this.helpText);
	        }
	    },
	
	    events: {
	        'ui-input::reset': function uiInputReset(id) {
	            if (!this.eventTargetsComponent(id)) {
	                return;
	            }
	
	            this.value = this.initialValue;
	        }
	    },
	
	    methods: {
	        focus: function focus() {
	            this.active = true;
	        },
	        blur: function blur() {
	            this.active = false;
	        }
	    },
	
	    components: {
	        UiRadio: _UiRadio2.default
	    },
	
	    directives: {
	        disabled: _disabled2.default
	    },
	
	    mixins: [_ReceivesTargetedEvent2.default]
	};

/***/ },
/* 128 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-radio-group\" :id=\"id\"\n    :class=\"{ 'disabled': disabled, 'active': active, 'vertical': vertical }\"\n>\n    <div class=\"ui-radio-group-label\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n    <div class=\"ui-radio-group-options-wrapper\">\n        <ui-radio\n            class=\"ui-radio-group-radio\" v-for=\"option in options\" :model.sync=\"value\"\n            :name=\"name\" :label=\"option.text || option\" :value=\"option.value || option\"\n            :disabled=\"disabled || option.disabled\" @focussed=\"focus\" @blurred=\"blur\"\n        ></ui-radio>\n    </div>\n\n    <div\n        class=\"ui-radio-group-feedback\" v-if=\"showFeedback\"\n        transition=\"ui-radio-group-feedback-toggle\"\n    >\n        <div class=\"ui-radio-group-help-text\" v-text=\"helpText\"></div>\n    </div>\n</div>\n";

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(130)
	__vue_script__ = __webpack_require__(131)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiRating.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(136)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiRating.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 130 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiRatingIcon = __webpack_require__(132);
	
	var _UiRatingIcon2 = _interopRequireDefault(_UiRatingIcon);
	
	var _ReceivesTargetedEvent = __webpack_require__(75);
	
	var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-rating',
	
	    props: {
	        type: {
	            type: String,
	            default: 'star' },
	        value: {
	            type: Number,
	            coerce: Number,
	            required: true,
	            twoWay: true
	        },
	        total: {
	            type: Number,
	            coerce: Number,
	            required: true
	        },
	        label: String,
	        hideLabel: {
	            type: Boolean,
	            default: false
	        },
	        helpText: String,
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            active: false,
	            initialValue: 0,
	            previewValue: 0,
	            previewing: false
	        };
	    },
	
	
	    computed: {
	        showFeedback: function showFeedback() {
	            return Boolean(this.helpText);
	        }
	    },
	
	    watch: {
	        value: function value() {
	            this.previewValue = this.value;
	        },
	        previewValue: function previewValue() {
	            this.$dispatch('preview-value-changed', this.previewValue);
	        }
	    },
	
	    created: function created() {
	        this.initialValue = this.value;
	
	        this.previewValue = this.value;
	    },
	
	
	    events: {
	        'ui-input::reset': function uiInputReset(id) {
	            if (!this.eventTargetsComponent(id)) {
	                return;
	            }
	
	            this.value = this.initialValue;
	        }
	    },
	
	    methods: {
	        startPreview: function startPreview() {
	            if (this.disabled) {
	                return;
	            }
	
	            this.previewing = true;
	        },
	        endPreview: function endPreview() {
	            if (this.disabled) {
	                return;
	            }
	
	            this.previewing = false;
	            this.previewValue = this.value;
	        },
	        preview: function preview(n) {
	            if (this.disabled) {
	                return;
	            }
	
	            this.previewValue = n + 1;
	        },
	        commitValue: function commitValue(value) {
	            if (this.disabled) {
	                return;
	            }
	
	            if (value > 0 && value <= this.total) {
	                this.value = value;
	            }
	        },
	        incrementPreviewValue: function incrementPreviewValue() {
	            if (this.disabled) {
	                return;
	            }
	
	            var proposedValue = this.previewValue + 1;
	
	            if (proposedValue <= this.total) {
	                this.previewValue = proposedValue;
	            }
	        },
	        decrementPreviewValue: function decrementPreviewValue() {
	            if (this.disabled) {
	                return;
	            }
	
	            var proposedValue = this.previewValue - 1;
	
	            if (proposedValue > 0) {
	                this.previewValue = proposedValue;
	            }
	        },
	        focus: function focus() {
	            this.active = true;
	            this.startPreview();
	        },
	        blur: function blur() {
	            this.active = false;
	
	            this.commitValue(this.previewValue);
	            this.endPreview();
	        }
	    },
	
	    components: {
	        UiRatingIcon: _UiRatingIcon2.default
	    },
	
	    mixins: [_ReceivesTargetedEvent2.default]
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(133)
	__vue_script__ = __webpack_require__(134)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiRatingIcon.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(135)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiRatingIcon.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 133 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-rating-icon',
	
	    props: {
	        type: {
	            type: String,
	            default: 'star' },
	        selected: {
	            type: Boolean,
	            required: true
	        },
	        filled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    computed: {
	        icon: function icon() {
	            if (this.filled || this.selected) {
	                return this.type === 'star' ? 'star' : 'favorite';
	            }
	
	            return this.type === 'star' ? 'star_border' : 'favorite_border';
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default
	    }
	};

/***/ },
/* 135 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-rating-icon\">\n    <ui-icon\n        class=\"ui-rating-icon-icon\" :icon=\"icon\"\n        :class=\"{ 'selected': selected, 'filled' : filled }\"\n    ></ui-icon>\n</div>\n";

/***/ },
/* 136 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-rating\" :class=\"{ 'disabled': disabled, 'preview': previewing, 'active': active }\"\n\n    :tabindex=\"disabled ? null : 0\" role=\"slider\" :aria-valuemin=\"0\" :aria-valuemax=\"total\"\n    :aria-valuenow=\"previewValue\"\n\n    @keydown.up.prevent=\"incrementPreviewValue\" @keydown.down.prevent=\"decrementPreviewValue\"\n    @keydown.right.prevent=\"incrementPreviewValue\" @keydown.left.prevent=\"decrementPreviewValue\"\n    @keydown.enter.prevent=\"commitValue(previewValue)\" @focus=\"focus\" @blur=\"blur\"\n>\n    <div class=\"ui-rating-label\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n    <div\n        class=\"ui-rating-icons-wrapper\" @mouseenter=\"startPreview\" @mouseleave=\"endPreview\"\n    >\n        <ui-rating-icon\n            :type=\"type\" v-for=\"n in total\" :selected=\"(n + 1) <= value\" @mouseover=\"preview(n)\"\n            :filled=\"(n + 1) <= previewValue\" @click=\"commitValue(n + 1)\"\n        ></ui-rating-icon>\n    </div>\n\n    <div\n        class=\"ui-rating-feedback\" v-if=\"showFeedback\" transition=\"ui-rating-feedback-toggle\"\n    >\n        <div class=\"ui-rating-help-text\" v-text=\"helpText\"></div>\n    </div>\n</div>\n";

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(138)
	__vue_script__ = __webpack_require__(139)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiRatingPreview.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(140)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiRatingPreview.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 138 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiRatingIcon = __webpack_require__(132);
	
	var _UiRatingIcon2 = _interopRequireDefault(_UiRatingIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-rating-preview',
	
	    props: {
	        type: {
	            type: String,
	            default: 'star' },
	        value: {
	            type: Number,
	            coerce: Number,
	            required: true
	        },
	        total: {
	            type: Number,
	            coerce: Number,
	            required: true
	        }
	    },
	
	    components: {
	        UiRatingIcon: _UiRatingIcon2.default
	    }
	};

/***/ },
/* 140 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-rating-preview\" role=\"slider\" :aria-valuemin=\"0\" :aria-valuemax=\"total\"\n    :aria-valuenow=\"value\"\n>\n    <ui-rating-icon\n        :type=\"type\" v-for=\"n in total\" :selected=\"(n + 1) <= value\"\n    ></ui-rating-icon>\n</div>\n";

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(142)
	__vue_script__ = __webpack_require__(143)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiSelect.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(151)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiSelect.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 142 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _mergeOptions = __webpack_require__(144);
	
	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
	
	var _fuzzysearch = __webpack_require__(68);
	
	var _fuzzysearch2 = _interopRequireDefault(_fuzzysearch);
	
	var _elementScroll = __webpack_require__(146);
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _UiSelectOption = __webpack_require__(147);
	
	var _UiSelectOption2 = _interopRequireDefault(_UiSelectOption);
	
	var _UiProgressCircular = __webpack_require__(51);
	
	var _UiProgressCircular2 = _interopRequireDefault(_UiProgressCircular);
	
	var _HasTextInput = __webpack_require__(74);
	
	var _HasTextInput2 = _interopRequireDefault(_HasTextInput);
	
	var _ValidatesInput = __webpack_require__(76);
	
	var _ValidatesInput2 = _interopRequireDefault(_ValidatesInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-select',
	
	    props: {
	        value: {
	            type: [Object, Array],
	            default: null,
	            twoWay: true
	        },
	        default: {
	            type: [Object, Array],
	            default: null
	        },
	        options: {
	            type: Array,
	            default: []
	        },
	        partial: String,
	        showSearch: {
	            type: Boolean,
	            default: false
	        },
	        searchPlaceholder: {
	            type: String,
	            default: 'Search'
	        },
	        multiple: {
	            type: Boolean,
	            default: false
	        },
	        multipleDelimiter: {
	            type: String,
	            default: ', '
	        },
	        disableFiltering: {
	            type: Boolean,
	            default: false
	        },
	        loading: {
	            type: Boolean,
	            default: false
	        },
	        noResults: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            query: '',
	            selectedIndex: -1,
	            highlightedIndex: -1,
	            showDropdown: false,
	            ignoreQueryChange: false
	        };
	    },
	
	
	    computed: {
	        filteredOptions: function filteredOptions() {
	            if (this.disableFiltering) {
	                return this.options;
	            }
	
	            return this.options.filter(this.search);
	        },
	        displayText: function displayText() {
	            if (this.multiple && this.value.length) {
	                var labels = this.value.map(function (value) {
	                    return value.text;
	                });
	                return labels.join(this.multipleDelimiter);
	            }
	
	            return this.value ? this.value.text : '';
	        },
	        hasDisplayText: function hasDisplayText() {
	            return this.displayText && Boolean(this.displayText.length);
	        },
	        showIcon: function showIcon() {
	            return Boolean(this.icon);
	        },
	        nothingFound: function nothingFound() {
	            if (this.disableFiltering) {
	                return this.noResults;
	            }
	
	            return Boolean(this.options.length && !this.filteredOptions.length);
	        }
	    },
	
	    watch: {
	        filteredOptions: function filteredOptions() {
	            this.highlightedIndex = 0;
	            (0, _elementScroll.resetScroll)(this.$els.optionsList);
	        },
	        showDropdown: function showDropdown() {
	            if (this.showDropdown) {
	                this.opened();
	                this.$dispatch('opened');
	            } else {
	                this.closed();
	                this.$dispatch('closed');
	            }
	        },
	        query: function query() {
	            if (!this.ignoreQueryChange) {
	                this.$dispatch('query-changed', this.query);
	            }
	        }
	    },
	
	    created: function created() {
	        this.initValue();
	
	        var errorMessages = {
	            min: 'You must select at least :min options.',
	            max: 'You must select no more than :max options.',
	            between: 'You must select at least :min but no more than :max options.'
	        };
	
	        if (this.validationRules) {
	            this.validationMessages = (0, _mergeOptions2.default)(errorMessages, this.validationMessages);
	        }
	    },
	    ready: function ready() {
	        document.addEventListener('click', this.closeOnExternalClick);
	    },
	    beforeDestroy: function beforeDestroy() {
	        document.removeEventListener('click', this.closeOnExternalClick);
	    },
	
	
	    events: {
	        'ui-input::reset': function uiInputReset(id) {
	            if (!this.eventTargetsComponent(id)) {
	                return;
	            }
	
	            this.initValue();
	            this.dirty = false;
	            this.valid = true;
	
	            this.clearQuery();
	            this.selectedIndex = -1;
	            this.highlightedIndex = -1;
	        }
	    },
	
	    methods: {
	        initValue: function initValue() {
	            this.value = this.multiple ? [] : null;
	
	            if (this.default) {
	                this.setDefaultValue(this.default);
	            }
	        },
	        search: function search(option) {
	            var text = option.text.toLowerCase();
	            var query = this.query.toLowerCase();
	
	            return (0, _fuzzysearch2.default)(query, text);
	        },
	        clearQuery: function clearQuery() {
	            var _this = this;
	
	            this.ignoreQueryChange = true;
	
	            this.$nextTick(function () {
	                _this.query = '';
	
	                _this.$nextTick(function () {
	                    _this.ignoreQueryChange = false;
	                });
	            });
	        },
	        select: function select(option, index) {
	            var close = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	
	            if (this.multiple) {
	                if (this.isSelected(option)) {
	                    this.deselect(option);
	                    return;
	                }
	
	                this.value.push(option);
	            } else {
	                this.value = option;
	                this.selectedIndex = index;
	            }
	
	            this.$dispatch('selected', option);
	
	            this.highlightedIndex = index;
	            this.clearQuery();
	            this.validate();
	
	            if (!this.multiple && close) {
	                this.close();
	            }
	        },
	        deselect: function deselect(option) {
	            this.value.$remove(option);
	        },
	        isSelected: function isSelected(option) {
	            if (this.multiple) {
	                return this.value.indexOf(option) > -1;
	            }
	
	            return this.value === option;
	        },
	        selectHighlighted: function selectHighlighted(index, e) {
	            if (this.$refs.options.length) {
	                e.preventDefault();
	                this.select(this.$refs.options[index].option, index);
	            }
	        },
	        highlight: function highlight(index, preventScroll) {
	            if (this.highlightedIndex === index) {
	                return;
	            }
	
	            if (index < 0) {
	                index = this.$refs.options.length - 1;
	            } else if (index >= this.$refs.options.length) {
	                index = 0;
	            }
	
	            this.highlightedIndex = index;
	
	            if (!preventScroll) {
	                this.scrollOptionIntoView(this.$refs.options[index].$el);
	            }
	        },
	        focus: function focus() {
	            this.active = true;
	        },
	        blur: function blur() {
	            this.active = false;
	
	            if (this.showDropdown) {
	                this.close();
	            }
	        },
	        toggle: function toggle() {
	            if (this.showDropdown) {
	                this.close();
	            } else {
	                this.open();
	            }
	        },
	        open: function open() {
	            if (this.disabled) {
	                return;
	            }
	
	            this.showDropdown = true;
	        },
	        opened: function opened() {
	            var _this2 = this;
	
	            this.$nextTick(function () {
	                if (_this2.showSearch) {
	                    _this2.$els.searchInput.focus();
	                } else {
	                    _this2.$els.dropdown.focus();
	                }
	
	                _this2.scrollOptionIntoView(_this2.$els.optionsList.querySelector('.selected'));
	            });
	        },
	        close: function close(deactivate) {
	            this.showDropdown = false;
	
	            if (!this.dirty) {
	                this.dirty = true;
	            }
	
	            if (deactivate) {
	                this.active = false;
	            } else {
	                this.$els.label.focus();
	            }
	        },
	        closeOnExternalClick: function closeOnExternalClick(e) {
	            if (!this.$el.contains(e.target) && (this.showDropdown || this.active)) {
	                this.close(true);
	            }
	        },
	        closed: function closed() {
	            this.validate();
	
	            if (!this.multiple) {
	                this.highlightedIndex = this.selectedIndex;
	            } else {
	                this.highlightedIndex = -1;
	            }
	        },
	        setDefaultValue: function setDefaultValue(defaults) {
	            if (this.multiple) {
	                if (!defaults.length) {
	                    return;
	                }
	
	                for (var i = 0; i < this.options.length; i++) {
	                    for (var j = 0; j < defaults.length; j++) {
	                        if (this.options[i] === defaults[j]) {
	                            this.select(this.options[i], i, false);
	                            break;
	                        }
	                    }
	                }
	
	                return;
	            }
	
	            for (var _i = 0; _i < this.options.length; _i++) {
	                if (this.options[_i] === defaults) {
	                    this.select(this.options[_i], _i, false);
	                    break;
	                }
	            }
	        },
	        scrollOptionIntoView: function scrollOptionIntoView(optionEl) {
	            (0, _elementScroll.scrollIntoView)(optionEl, this.$els.optionsList, 80);
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default,
	        UiSelectOption: _UiSelectOption2.default,
	        UiProgressCircular: _UiProgressCircular2.default
	    },
	
	    mixins: [_HasTextInput2.default, _ValidatesInput2.default]
	};

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isOptionObject = __webpack_require__(145);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.propertyIsEnumerable;
	var globalThis = this;
	var defaultMergeOpts = {
		concatArrays: false
	};
	
	function getEnumerableOwnPropertyKeys(value) {
		var keys = [];
	
		for (var key in value) {
			if (hasOwnProperty.call(value, key)) {
				keys.push(key);
			}
		}
	
		if (Object.getOwnPropertySymbols) {
			var symbols = Object.getOwnPropertySymbols(value);
	
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(value, symbols[i])) {
					keys.push(symbols[i]);
				}
			}
		}
	
		return keys;
	}
	
	function clone(value) {
		if (Array.isArray(value)) {
			return cloneArray(value);
		}
	
		if (isOptionObject(value)) {
			return cloneOptionObject(value);
		}
	
		return value;
	}
	
	function cloneArray(array) {
		var result = array.slice(0, 0);
	
		getEnumerableOwnPropertyKeys(array).forEach(function (key) {
			result[key] = clone(array[key]);
		});
	
		return result;
	}
	
	function cloneOptionObject(obj) {
		var result = Object.getPrototypeOf(obj) === null ? Object.create(null) : {};
	
		getEnumerableOwnPropertyKeys(obj).forEach(function (key) {
			result[key] = clone(obj[key]);
		});
	
		return result;
	}
	
	/**
	 * @param merged {already cloned}
	 * @return {cloned Object}
	 */
	function mergeKeys(merged, source, keys, mergeOpts) {
		keys.forEach(function (key) {
			if (key in merged) {
				merged[key] = merge(merged[key], source[key], mergeOpts);
			} else {
				merged[key] = clone(source[key]);
			}
		});
	
		return merged;
	}
	
	/**
	 * @param merged {already cloned}
	 * @return {cloned Object}
	 *
	 * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)
	 */
	function concatArrays(merged, source, mergeOpts) {
		var result = merged.slice(0, 0);
		var resultIndex = 0;
	
		[merged, source].forEach(function (array) {
			var indices = [];
	
			// result.concat(array) with cloning
			for (var k = 0; k < array.length; k++) {
				if (!hasOwnProperty.call(array, k)) {
					continue;
				}
	
				indices.push(String(k));
	
				if (array === merged) {
					// already cloned
					result[resultIndex++] = array[k];
				} else {
					result[resultIndex++] = clone(array[k]);
				}
			}
	
			// merge non-index keys
			result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(function (key) {
				return indices.indexOf(key) === -1;
			}), mergeOpts);
		});
	
		return result;
	}
	
	/**
	 * @param merged {already cloned}
	 * @return {cloned Object}
	 */
	function merge(merged, source, mergeOpts) {
		if (mergeOpts.concatArrays && Array.isArray(merged) && Array.isArray(source)) {
			return concatArrays(merged, source, mergeOpts);
		}
	
		if (!isOptionObject(source) || !isOptionObject(merged)) {
			return clone(source);
		}
	
		return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), mergeOpts);
	}
	
	module.exports = function () {
		var mergeOpts = merge(clone(defaultMergeOpts), (this !== globalThis && this) || {}, defaultMergeOpts);
		var merged = {};
	
		for (var i = 0; i < arguments.length; i++) {
			var option = arguments[i];
	
			if (option === undefined) {
				continue;
			}
	
			if (!isOptionObject(option)) {
				throw new TypeError('`' + option + '` is not an Option Object');
			}
	
			merged = merge(merged, option, mergeOpts);
		}
	
		return merged;
	};


/***/ },
/* 145 */
/***/ function(module, exports) {

	'use strict';
	var toString = Object.prototype.toString;
	
	module.exports = function (x) {
		var prototype;
		return toString.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
	};


/***/ },
/* 146 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.inView = inView;
	exports.scrollIntoView = scrollIntoView;
	exports.resetScroll = resetScroll;
	function inView(element, container) {
	    if (!element) {
	        return;
	    }
	
	    container = container || element.parentElement;
	
	    var top = element.offsetTop;
	    var parentTop = container.scrollTop;
	    var bottom = top + element.offsetHeight;
	    var parentBottom = container.offsetHeight;
	
	    return top >= parentTop && bottom <= parentBottom;
	}
	
	function scrollIntoView(element, container) {
	    var marginTop = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
	
	    if (!element || inView(element, container)) {
	        return;
	    }
	
	    container = container || element.parentElement;
	
	    container.scrollTop = element.offsetTop - marginTop;
	}
	
	function resetScroll(element) {
	    if (!element) {
	        return;
	    }
	
	    element.scrollTop = 0;
	}
	
	exports.default = {
	    inView: inView,
	    scrollIntoView: scrollIntoView,
	    resetScroll: resetScroll
	};

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(148)
	__vue_script__ = __webpack_require__(149)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiSelectOption.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(150)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiSelectOption.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 148 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-select-option',
	
	    props: {
	        option: {
	            type: [String, Object],
	            required: true
	        },
	        partial: {
	            type: String,
	            default: 'ui-select-simple' },
	        showCheckbox: {
	            type: Boolean,
	            default: false
	        },
	        highlighted: {
	            type: Boolean,
	            default: false
	        },
	        selected: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    computed: {
	        icon: function icon() {
	            return this.selected ? 'check_box' : 'check_box_outline_blank';
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default
	    },
	
	    partials: {
	        'ui-select-simple': '<li class="ui-select-item-text" v-text="option.text"></li>',
	
	        'ui-select-image': '<div class="ui-select-item-image" :style="{ \'background-image\': \'url(\' + option.image + \')\' }"></div>\n            <div class="ui-select-item-text" v-text="option.text"></div>'
	    }
	};

/***/ },
/* 150 */
/***/ function(module, exports) {

	module.exports = "\n<li\n    class=\"ui-select-option\" :class=\"{ highlighted: highlighted, selected: selected }\"\n>\n    <div class=\"ui-select-option-content\" :class=\"[partial]\">\n        <partial :name=\"partial\"></partial>\n    </div>\n\n    <ui-icon\n        class=\"ui-select-option-checkbox\" :icon=\"icon\" v-if=\"showCheckbox\"\n    ></ui-icon>\n</li>\n";

/***/ },
/* 151 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-select\" :id=\"id\" :class=\"{\n        'disabled': disabled, 'invalid': !valid, 'dirty': dirty, 'active': active,\n        'has-label': !hideLabel, 'icon-right': iconRight\n    }\"\n>\n    <div class=\"ui-select-icon-wrapper\" v-if=\"showIcon\">\n        <ui-icon :icon=\"icon\" class=\"ui-select-icon\"></ui-icon>\n    </div>\n\n    <div class=\"ui-select-content\">\n        <div\n            class=\"ui-select-label\" :tabindex=\"disabled ? null : '0'\" v-el:label\n            @focus=\"focus\" @keydown.tab=\"blur\" @click=\"toggle\" @keydown.space.prevent=\"open\"\n            @keydown.enter.prevent=\"open\"\n        >\n            <div class=\"ui-select-label-text\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n            <div class=\"ui-select-display\">\n                <div\n                    class=\"ui-select-value\" :class=\"{ placeholder: !hasDisplayText }\"\n                    v-text=\"hasDisplayText ? displayText : placeholder\"\n                ></div>\n\n                <ui-icon icon=\"arrow_drop_down\" class=\"ui-select-dropdown-icon\"></ui-icon>\n            </div>\n\n            <div\n                class=\"ui-select-dropdown\" tabindex=\"-1\" v-show=\"showDropdown\" v-el:dropdown\n                @keydown.esc.prevent=\"close()\" @keydown.tab=\"close()\"\n                @keydown.up.prevent=\"highlight(highlightedIndex - 1)\"\n                @keydown.down.prevent=\"highlight(highlightedIndex + 1)\"\n                @keydown.enter.prevent.stop=\"selectHighlighted(highlightedIndex, $event)\"\n            >\n                <div class=\"ui-select-search\" v-if=\"showSearch\" @click.stop @keydown.space.stop>\n                    <input\n                        class=\"ui-select-search-input\" type=\"text\" v-el:search-input\n                        :placeholder=\"searchPlaceholder\" v-model=\"query\"\n                    >\n\n                    <ui-progress-circular\n                        class=\"ui-select-search-spinner\" :size=\"24\" :stroke=\"4\" :show=\"loading\"\n                    ></ui-progress-circular>\n                </div>\n\n                <ul class=\"ui-select-options\" v-el:options-list>\n                    <ui-select-option\n                        :option=\"option\" :partial=\"partial\" :show-checkbox=\"multiple\"\n                        @click.stop.prevent=\"select(option, index)\"\n                        @mouseover.stop=\"highlight(index, true)\"\n\n                        :highlighted=\"highlightedIndex === index\" :selected=\"isSelected(option)\"\n\n                        v-for=\"(index, option) in filteredOptions\" v-ref:options\n                        v-if=\"!noResults\"\n                    ></ui-select-option>\n\n                    <li class=\"ui-select-no-results\" v-if=\"nothingFound\">No results found</li>\n                </ul>\n            </div>\n        </div>\n\n        <div class=\"ui-select-feedback\" v-if=\"showFeedback\">\n            <div\n                class=\"ui-select-error-text\" transition=\"ui-select-feedback-toggle\"\n                v-text=\"validationError\" v-show=\"!hideValidationErrors && !valid\"\n            ></div>\n\n            <div\n                class=\"ui-select-help-text\" transition=\"ui-select-feedback-toggle\"\n                v-text=\"helpText\" v-else\n            ></div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(153)
	__vue_script__ = __webpack_require__(154)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiSlider.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(163)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiSlider.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 153 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _draggabilly = __webpack_require__(155);
	
	var _draggabilly2 = _interopRequireDefault(_draggabilly);
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _ReceivesTargetedEvent = __webpack_require__(75);
	
	var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-slider',
	
	    props: {
	        name: String,
	        value: {
	            type: Number,
	            required: true,
	            twoWay: true
	        },
	        step: {
	            type: Number,
	            default: 5
	        },
	        icon: String,
	        label: String,
	        hideLabel: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            active: false,
	            initialValue: 0,
	            dragging: false,
	            draggable: null
	        };
	    },
	
	
	    computed: {
	        showIcon: function showIcon() {
	            return Boolean(this.icon);
	        },
	        hasLabel: function hasLabel() {
	            if (this.hideLabel) {
	                return true;
	            }
	
	            return Boolean(this.label);
	        }
	    },
	
	    watch: {
	        value: function value() {
	            if (!this.dragging) {
	                this.$els.thumb.style.left = this.value + '%';
	            }
	        },
	        disabled: function disabled() {
	            if (this.disabled) {
	                this.draggable.disable();
	            } else {
	                this.draggable.enable();
	            }
	        }
	    },
	
	    events: {
	        'ui-input::reset': function uiInputReset(id) {
	            if (!this.eventTargetsComponent(id)) {
	                return;
	            }
	
	            this.value = this.initialValue;
	        }
	    },
	
	    ready: function ready() {
	        this.initialValue = this.value;
	
	        this.$els.thumb.style.left = this.value + '%';
	
	        this.draggable = new _draggabilly2.default(this.$els.thumb, {
	            containment: this.$els.containment,
	            axis: 'x'
	        });
	
	        this.draggable.on('dragStart', this.dragStart);
	        this.draggable.on('dragMove', this.dragMove);
	        this.draggable.on('dragEnd', this.dragEnd);
	
	        if (this.disabled) {
	            this.draggable.disable();
	        }
	    },
	    beforeDestroy: function beforeDestroy() {
	        if (this.draggable) {
	            this.draggable.destroy();
	        }
	    },
	
	
	    methods: {
	        focus: function focus() {
	            this.active = true;
	        },
	        blur: function blur() {
	            this.active = false;
	        },
	        sliderClick: function sliderClick(e) {
	            if (this.disabled) {
	                return;
	            }
	
	            var sliderPosition = this.$els.slider.getBoundingClientRect();
	
	            var newValue = (e.clientX - sliderPosition.left) / sliderPosition.width * 100;
	
	            this.setValue(newValue);
	
	            if (e.target !== this.$els.thumb) {
	                this.draggable._pointerDown(e, e);
	            }
	
	            this.$el.focus();
	        },
	        dragStart: function dragStart() {
	            this.dragging = true;
	            this.$el.focus();
	        },
	        dragMove: function dragMove() {
	            var x = this.draggable.position.x;
	            var newValue = x / this.$els.slider.getBoundingClientRect().width * 100;
	
	            this.setValue(newValue);
	        },
	        dragEnd: function dragEnd() {
	            this.dragging = false;
	        },
	        increment: function increment() {
	            if (this.value === 100) {
	                return;
	            }
	
	            this.setValue(this.value + this.step);
	        },
	        decrement: function decrement() {
	            if (this.value === 0) {
	                return;
	            }
	
	            this.setValue(this.value - this.step);
	        },
	        setValue: function setValue(value) {
	            if (value === this.value) {
	                return;
	            }
	
	            var moderatedValue = Math.round(value);
	
	            if (moderatedValue >= 100) {
	                moderatedValue = 100;
	            }
	
	            if (moderatedValue <= 0) {
	                moderatedValue = 0;
	            }
	
	            this.value = moderatedValue;
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default
	    },
	
	    mixins: [_ReceivesTargetedEvent2.default]
	};

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	(function() {
	
	/*!
	 * Draggabilly v1.2.4
	 * Make that shiz draggable
	 * http://draggabilly.desandro.com
	 * MIT license
	 */
	
	( function( window, factory ) {
	  'use strict';
	
	  if ( typeof define == 'function' && define.amd ) {
	    // AMD
	    define( [
	        'classie/classie',
	        'get-style-property/get-style-property',
	        'get-size/get-size',
	        'unidragger/unidragger'
	      ],
	      function( classie, getStyleProperty, getSize, Unidragger ) {
	        return factory( window, classie, getStyleProperty, getSize, Unidragger );
	      });
	  } else if ( true ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      __webpack_require__(156),
	      __webpack_require__(157),
	      __webpack_require__(158),
	      __webpack_require__(159)
	    );
	  } else {
	    // browser global
	    window.Draggabilly = factory(
	      window,
	      window.classie,
	      window.getStyleProperty,
	      window.getSize,
	      window.Unidragger
	    );
	  }
	
	}( window, function factory( window, classie, getStyleProperty, getSize, Unidragger ) {
	
	'use strict';
	
	// vars
	var document = window.document;
	
	function noop() {}
	
	// -------------------------- helpers -------------------------- //
	
	// extend objects
	function extend( a, b ) {
	  for ( var prop in b ) {
	    a[ prop ] = b[ prop ];
	  }
	  return a;
	}
	
	// ----- get style ----- //
	
	var defView = document.defaultView;
	
	var getStyle = defView && defView.getComputedStyle ?
	  function( elem ) {
	    return defView.getComputedStyle( elem, null );
	  } :
	  function( elem ) {
	    return elem.currentStyle;
	  };
	
	
	// http://stackoverflow.com/a/384380/182183
	var isElement = ( typeof HTMLElement == 'object' ) ?
	  function isElementDOM2( obj ) {
	    return obj instanceof HTMLElement;
	  } :
	  function isElementQuirky( obj ) {
	    return obj && typeof obj == 'object' &&
	      obj.nodeType == 1 && typeof obj.nodeName == 'string';
	  };
	
	// -------------------------- requestAnimationFrame -------------------------- //
	
	// https://gist.github.com/1866474
	
	var lastTime = 0;
	var prefixes = 'webkit moz ms o'.split(' ');
	// get unprefixed rAF and cAF, if present
	var requestAnimationFrame = window.requestAnimationFrame;
	var cancelAnimationFrame = window.cancelAnimationFrame;
	// loop through vendor prefixes and get prefixed rAF and cAF
	var prefix;
	for( var i = 0; i < prefixes.length; i++ ) {
	  if ( requestAnimationFrame && cancelAnimationFrame ) {
	    break;
	  }
	  prefix = prefixes[i];
	  requestAnimationFrame = requestAnimationFrame || window[ prefix + 'RequestAnimationFrame' ];
	  cancelAnimationFrame  = cancelAnimationFrame  || window[ prefix + 'CancelAnimationFrame' ] ||
	                            window[ prefix + 'CancelRequestAnimationFrame' ];
	}
	
	// fallback to setTimeout and clearTimeout if either request/cancel is not supported
	if ( !requestAnimationFrame || !cancelAnimationFrame )  {
	  requestAnimationFrame = function( callback ) {
	    var currTime = new Date().getTime();
	    var timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );
	    var id = window.setTimeout( function() {
	      callback( currTime + timeToCall );
	    }, timeToCall );
	    lastTime = currTime + timeToCall;
	    return id;
	  };
	
	  cancelAnimationFrame = function( id ) {
	    window.clearTimeout( id );
	  };
	}
	
	// -------------------------- support -------------------------- //
	
	var transformProperty = getStyleProperty('transform');
	// TODO fix quick & dirty check for 3D support
	var is3d = !!getStyleProperty('perspective');
	
	var jQuery = window.jQuery;
	
	// --------------------------  -------------------------- //
	
	function Draggabilly( element, options ) {
	  // querySelector if string
	  this.element = typeof element == 'string' ?
	    document.querySelector( element ) : element;
	
	  if ( jQuery ) {
	    this.$element = jQuery( this.element );
	  }
	
	  // options
	  this.options = extend( {}, this.constructor.defaults );
	  this.option( options );
	
	  this._create();
	}
	
	// inherit Unidragger methods
	extend( Draggabilly.prototype, Unidragger.prototype );
	
	Draggabilly.defaults = {
	};
	
	/**
	 * set options
	 * @param {Object} opts
	 */
	Draggabilly.prototype.option = function( opts ) {
	  extend( this.options, opts );
	};
	
	Draggabilly.prototype._create = function() {
	
	  // properties
	  this.position = {};
	  this._getPosition();
	
	  this.startPoint = { x: 0, y: 0 };
	  this.dragPoint = { x: 0, y: 0 };
	
	  this.startPosition = extend( {}, this.position );
	
	  // set relative positioning
	  var style = getStyle( this.element );
	  if ( style.position != 'relative' && style.position != 'absolute' ) {
	    this.element.style.position = 'relative';
	  }
	
	  this.enable();
	  this.setHandles();
	
	};
	
	/**
	 * set this.handles and bind start events to 'em
	 */
	Draggabilly.prototype.setHandles = function() {
	  this.handles = this.options.handle ?
	    this.element.querySelectorAll( this.options.handle ) : [ this.element ];
	
	  this.bindHandles();
	};
	
	/**
	 * emits events via eventEmitter and jQuery events
	 * @param {String} type - name of event
	 * @param {Event} event - original event
	 * @param {Array} args - extra arguments
	 */
	Draggabilly.prototype.dispatchEvent = function( type, event, args ) {
	  var emitArgs = [ event ].concat( args );
	  this.emitEvent( type, emitArgs );
	  var jQuery = window.jQuery;
	  // trigger jQuery event
	  if ( jQuery && this.$element ) {
	    if ( event ) {
	      // create jQuery event
	      var $event = jQuery.Event( event );
	      $event.type = type;
	      this.$element.trigger( $event, args );
	    } else {
	      // just trigger with type if no event available
	      this.$element.trigger( type, args );
	    }
	  }
	};
	
	// -------------------------- position -------------------------- //
	
	// get left/top position from style
	Draggabilly.prototype._getPosition = function() {
	  // properties
	  var style = getStyle( this.element );
	
	  var x = parseInt( style.left, 10 );
	  var y = parseInt( style.top, 10 );
	
	  // clean up 'auto' or other non-integer values
	  this.position.x = isNaN( x ) ? 0 : x;
	  this.position.y = isNaN( y ) ? 0 : y;
	
	  this._addTransformPosition( style );
	};
	
	// add transform: translate( x, y ) to position
	Draggabilly.prototype._addTransformPosition = function( style ) {
	  if ( !transformProperty ) {
	    return;
	  }
	  var transform = style[ transformProperty ];
	  // bail out if value is 'none'
	  if ( transform.indexOf('matrix') !== 0 ) {
	    return;
	  }
	  // split matrix(1, 0, 0, 1, x, y)
	  var matrixValues = transform.split(',');
	  // translate X value is in 12th or 4th position
	  var xIndex = transform.indexOf('matrix3d') === 0 ? 12 : 4;
	  var translateX = parseInt( matrixValues[ xIndex ], 10 );
	  // translate Y value is in 13th or 5th position
	  var translateY = parseInt( matrixValues[ xIndex + 1 ], 10 );
	  this.position.x += translateX;
	  this.position.y += translateY;
	};
	
	// -------------------------- events -------------------------- //
	
	/**
	 * pointer start
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.pointerDown = function( event, pointer ) {
	  this._dragPointerDown( event, pointer );
	  // kludge to blur focused inputs in dragger
	  var focused = document.activeElement;
	  if ( focused && focused.blur ) {
	    focused.blur();
	  }
	  // bind move and end events
	  this._bindPostStartEvents( event );
	  classie.add( this.element, 'is-pointer-down' );
	  this.dispatchEvent( 'pointerDown', event, [ pointer ] );
	};
	
	/**
	 * drag move
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.pointerMove = function( event, pointer ) {
	  var moveVector = this._dragPointerMove( event, pointer );
	  this.dispatchEvent( 'pointerMove', event, [ pointer, moveVector ] );
	  this._dragMove( event, pointer, moveVector );
	};
	
	/**
	 * drag start
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.dragStart = function( event, pointer ) {
	  if ( !this.isEnabled ) {
	    return;
	  }
	  this._getPosition();
	  this.measureContainment();
	  // position _when_ drag began
	  this.startPosition.x = this.position.x;
	  this.startPosition.y = this.position.y;
	  // reset left/top style
	  this.setLeftTop();
	
	  this.dragPoint.x = 0;
	  this.dragPoint.y = 0;
	
	  // reset isDragging flag
	  this.isDragging = true;
	  classie.add( this.element, 'is-dragging' );
	  this.dispatchEvent( 'dragStart', event, [ pointer ] );
	  // start animation
	  this.animate();
	};
	
	Draggabilly.prototype.measureContainment = function() {
	  var containment = this.options.containment;
	  if ( !containment ) {
	    return;
	  }
	
	  this.size = getSize( this.element );
	  var elemRect = this.element.getBoundingClientRect();
	
	  // use element if element
	  var container = isElement( containment ) ? containment :
	    // fallback to querySelector if string
	    typeof containment == 'string' ? document.querySelector( containment ) :
	    // otherwise just `true`, use the parent
	    this.element.parentNode;
	
	  this.containerSize = getSize( container );
	  var containerRect = container.getBoundingClientRect();
	
	  this.relativeStartPosition = {
	    x: elemRect.left - containerRect.left,
	    y: elemRect.top  - containerRect.top
	  };
	};
	
	// ----- move event ----- //
	
	/**
	 * drag move
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.dragMove = function( event, pointer, moveVector ) {
	  if ( !this.isEnabled ) {
	    return;
	  }
	  var dragX = moveVector.x;
	  var dragY = moveVector.y;
	
	  var grid = this.options.grid;
	  var gridX = grid && grid[0];
	  var gridY = grid && grid[1];
	
	  dragX = applyGrid( dragX, gridX );
	  dragY = applyGrid( dragY, gridY );
	
	  dragX = this.containDrag( 'x', dragX, gridX );
	  dragY = this.containDrag( 'y', dragY, gridY );
	
	  // constrain to axis
	  dragX = this.options.axis == 'y' ? 0 : dragX;
	  dragY = this.options.axis == 'x' ? 0 : dragY;
	
	  this.position.x = this.startPosition.x + dragX;
	  this.position.y = this.startPosition.y + dragY;
	  // set dragPoint properties
	  this.dragPoint.x = dragX;
	  this.dragPoint.y = dragY;
	
	  this.dispatchEvent( 'dragMove', event, [ pointer, moveVector ] );
	};
	
	function applyGrid( value, grid, method ) {
	  method = method || 'round';
	  return grid ? Math[ method ]( value / grid ) * grid : value;
	}
	
	Draggabilly.prototype.containDrag = function( axis, drag, grid ) {
	  if ( !this.options.containment ) {
	    return drag;
	  }
	  var measure = axis == 'x' ? 'width' : 'height';
	
	  var rel = this.relativeStartPosition[ axis ];
	  var min = applyGrid( -rel, grid, 'ceil' );
	  var max = this.containerSize[ measure ] - rel - this.size[ measure ];
	  max = applyGrid( max, grid, 'floor' );
	  return  Math.min( max, Math.max( min, drag ) );
	};
	
	// ----- end event ----- //
	
	/**
	 * pointer up
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.pointerUp = function( event, pointer ) {
	  classie.remove( this.element, 'is-pointer-down' );
	  this.dispatchEvent( 'pointerUp', event, [ pointer ] );
	  this._dragPointerUp( event, pointer );
	};
	
	/**
	 * drag end
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.dragEnd = function( event, pointer ) {
	  if ( !this.isEnabled ) {
	    return;
	  }
	  this.isDragging = false;
	  // use top left position when complete
	  if ( transformProperty ) {
	    this.element.style[ transformProperty ] = '';
	    this.setLeftTop();
	  }
	  classie.remove( this.element, 'is-dragging' );
	  this.dispatchEvent( 'dragEnd', event, [ pointer ] );
	};
	
	// -------------------------- animation -------------------------- //
	
	Draggabilly.prototype.animate = function() {
	  // only render and animate if dragging
	  if ( !this.isDragging ) {
	    return;
	  }
	
	  this.positionDrag();
	
	  var _this = this;
	  requestAnimationFrame( function animateFrame() {
	    _this.animate();
	  });
	
	};
	
	// transform translate function
	var translate = is3d ?
	  function( x, y ) {
	    return 'translate3d( ' + x + 'px, ' + y + 'px, 0)';
	  } :
	  function( x, y ) {
	    return 'translate( ' + x + 'px, ' + y + 'px)';
	  };
	
	// left/top positioning
	Draggabilly.prototype.setLeftTop = function() {
	  this.element.style.left = this.position.x + 'px';
	  this.element.style.top  = this.position.y + 'px';
	};
	
	Draggabilly.prototype.positionDrag = transformProperty ?
	  function() {
	    // position with transform
	    this.element.style[ transformProperty ] = translate( this.dragPoint.x, this.dragPoint.y );
	  } : Draggabilly.prototype.setLeftTop;
	
	// ----- staticClick ----- //
	
	Draggabilly.prototype.staticClick = function( event, pointer ) {
	  this.dispatchEvent( 'staticClick', event, [ pointer ] );
	};
	
	// ----- methods ----- //
	
	Draggabilly.prototype.enable = function() {
	  this.isEnabled = true;
	};
	
	Draggabilly.prototype.disable = function() {
	  this.isEnabled = false;
	  if ( this.isDragging ) {
	    this.dragEnd();
	  }
	};
	
	Draggabilly.prototype.destroy = function() {
	  this.disable();
	  // reset styles
	  if ( transformProperty ) {
	    this.element.style[ transformProperty ] = '';
	  }
	  this.element.style.left = '';
	  this.element.style.top = '';
	  this.element.style.position = '';
	  // unbind handles
	  this.unbindHandles();
	  // remove jQuery data
	  if ( this.$element ) {
	    this.$element.removeData('draggabilly');
	  }
	};
	
	// ----- jQuery bridget ----- //
	
	// required for jQuery bridget
	Draggabilly.prototype._init = noop;
	
	if ( jQuery && jQuery.bridget ) {
	  jQuery.bridget( 'draggabilly', Draggabilly );
	}
	
	// -----  ----- //
	
	return Draggabilly;
	
	}));
	
	}.call(window));

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	(function() {
	
	/*!
	 * classie v1.0.1
	 * class helper functions
	 * from bonzo https://github.com/ded/bonzo
	 * MIT license
	 * 
	 * classie.has( elem, 'my-class' ) -> true/false
	 * classie.add( elem, 'my-new-class' )
	 * classie.remove( elem, 'my-unwanted-class' )
	 * classie.toggle( elem, 'my-class' )
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, module: false */
	
	( function( window ) {
	
	'use strict';
	
	// class helper functions from bonzo https://github.com/ded/bonzo
	
	function classReg( className ) {
	  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
	}
	
	// classList support for class management
	// altho to be fair, the api sucks because it won't accept multiple classes at once
	var hasClass, addClass, removeClass;
	
	if ( 'classList' in document.documentElement ) {
	  hasClass = function( elem, c ) {
	    return elem.classList.contains( c );
	  };
	  addClass = function( elem, c ) {
	    elem.classList.add( c );
	  };
	  removeClass = function( elem, c ) {
	    elem.classList.remove( c );
	  };
	}
	else {
	  hasClass = function( elem, c ) {
	    return classReg( c ).test( elem.className );
	  };
	  addClass = function( elem, c ) {
	    if ( !hasClass( elem, c ) ) {
	      elem.className = elem.className + ' ' + c;
	    }
	  };
	  removeClass = function( elem, c ) {
	    elem.className = elem.className.replace( classReg( c ), ' ' );
	  };
	}
	
	function toggleClass( elem, c ) {
	  var fn = hasClass( elem, c ) ? removeClass : addClass;
	  fn( elem, c );
	}
	
	var classie = {
	  // full names
	  hasClass: hasClass,
	  addClass: addClass,
	  removeClass: removeClass,
	  toggleClass: toggleClass,
	  // short names
	  has: hasClass,
	  add: addClass,
	  remove: removeClass,
	  toggle: toggleClass
	};
	
	// transport
	if ( typeof define === 'function' && define.amd ) {
	  // AMD
	  define( classie );
	} else if ( true ) {
	  // CommonJS
	  module.exports = classie;
	} else {
	  // browser global
	  window.classie = classie;
	}
	
	})( window );
	
	}.call(window));

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	(function() {
	
	/*!
	 * getStyleProperty v1.0.4
	 * original by kangax
	 * http://perfectionkills.com/feature-testing-css-properties/
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true */
	/*global define: false, exports: false, module: false */
	
	( function( window ) {
	
	'use strict';
	
	var prefixes = 'Webkit Moz ms Ms O'.split(' ');
	var docElemStyle = document.documentElement.style;
	
	function getStyleProperty( propName ) {
	  if ( !propName ) {
	    return;
	  }
	
	  // test standard property first
	  if ( typeof docElemStyle[ propName ] === 'string' ) {
	    return propName;
	  }
	
	  // capitalize
	  propName = propName.charAt(0).toUpperCase() + propName.slice(1);
	
	  // test vendor specific properties
	  var prefixed;
	  for ( var i=0, len = prefixes.length; i < len; i++ ) {
	    prefixed = prefixes[i] + propName;
	    if ( typeof docElemStyle[ prefixed ] === 'string' ) {
	      return prefixed;
	    }
	  }
	}
	
	// transport
	if ( typeof define === 'function' && define.amd ) {
	  // AMD
	  define( function() {
	    return getStyleProperty;
	  });
	} else if ( true ) {
	  // CommonJS for Component
	  module.exports = getStyleProperty;
	} else {
	  // browser global
	  window.getStyleProperty = getStyleProperty;
	}
	
	})( window );
	
	}.call(window));

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	(function() {
	
	/*!
	 * getSize v1.2.2
	 * measure size of elements
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, exports: false, require: false, module: false, console: false */
	
	( function( window, undefined ) {
	
	'use strict';
	
	// -------------------------- helpers -------------------------- //
	
	// get a number from a string, not a percentage
	function getStyleSize( value ) {
	  var num = parseFloat( value );
	  // not a percent like '100%', and a number
	  var isValid = value.indexOf('%') === -1 && !isNaN( num );
	  return isValid && num;
	}
	
	function noop() {}
	
	var logError = typeof console === 'undefined' ? noop :
	  function( message ) {
	    console.error( message );
	  };
	
	// -------------------------- measurements -------------------------- //
	
	var measurements = [
	  'paddingLeft',
	  'paddingRight',
	  'paddingTop',
	  'paddingBottom',
	  'marginLeft',
	  'marginRight',
	  'marginTop',
	  'marginBottom',
	  'borderLeftWidth',
	  'borderRightWidth',
	  'borderTopWidth',
	  'borderBottomWidth'
	];
	
	function getZeroSize() {
	  var size = {
	    width: 0,
	    height: 0,
	    innerWidth: 0,
	    innerHeight: 0,
	    outerWidth: 0,
	    outerHeight: 0
	  };
	  for ( var i=0, len = measurements.length; i < len; i++ ) {
	    var measurement = measurements[i];
	    size[ measurement ] = 0;
	  }
	  return size;
	}
	
	
	
	function defineGetSize( getStyleProperty ) {
	
	// -------------------------- setup -------------------------- //
	
	var isSetup = false;
	
	var getStyle, boxSizingProp, isBoxSizeOuter;
	
	/**
	 * setup vars and functions
	 * do it on initial getSize(), rather than on script load
	 * For Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	 */
	function setup() {
	  // setup once
	  if ( isSetup ) {
	    return;
	  }
	  isSetup = true;
	
	  var getComputedStyle = window.getComputedStyle;
	  getStyle = ( function() {
	    var getStyleFn = getComputedStyle ?
	      function( elem ) {
	        return getComputedStyle( elem, null );
	      } :
	      function( elem ) {
	        return elem.currentStyle;
	      };
	
	      return function getStyle( elem ) {
	        var style = getStyleFn( elem );
	        if ( !style ) {
	          logError( 'Style returned ' + style +
	            '. Are you running this code in a hidden iframe on Firefox? ' +
	            'See http://bit.ly/getsizebug1' );
	        }
	        return style;
	      };
	  })();
	
	  // -------------------------- box sizing -------------------------- //
	
	  boxSizingProp = getStyleProperty('boxSizing');
	
	  /**
	   * WebKit measures the outer-width on style.width on border-box elems
	   * IE & Firefox measures the inner-width
	   */
	  if ( boxSizingProp ) {
	    var div = document.createElement('div');
	    div.style.width = '200px';
	    div.style.padding = '1px 2px 3px 4px';
	    div.style.borderStyle = 'solid';
	    div.style.borderWidth = '1px 2px 3px 4px';
	    div.style[ boxSizingProp ] = 'border-box';
	
	    var body = document.body || document.documentElement;
	    body.appendChild( div );
	    var style = getStyle( div );
	
	    isBoxSizeOuter = getStyleSize( style.width ) === 200;
	    body.removeChild( div );
	  }
	
	}
	
	// -------------------------- getSize -------------------------- //
	
	function getSize( elem ) {
	  setup();
	
	  // use querySeletor if elem is string
	  if ( typeof elem === 'string' ) {
	    elem = document.querySelector( elem );
	  }
	
	  // do not proceed on non-objects
	  if ( !elem || typeof elem !== 'object' || !elem.nodeType ) {
	    return;
	  }
	
	  var style = getStyle( elem );
	
	  // if hidden, everything is 0
	  if ( style.display === 'none' ) {
	    return getZeroSize();
	  }
	
	  var size = {};
	  size.width = elem.offsetWidth;
	  size.height = elem.offsetHeight;
	
	  var isBorderBox = size.isBorderBox = !!( boxSizingProp &&
	    style[ boxSizingProp ] && style[ boxSizingProp ] === 'border-box' );
	
	  // get all measurements
	  for ( var i=0, len = measurements.length; i < len; i++ ) {
	    var measurement = measurements[i];
	    var value = style[ measurement ];
	    value = mungeNonPixel( elem, value );
	    var num = parseFloat( value );
	    // any 'auto', 'medium' value will be 0
	    size[ measurement ] = !isNaN( num ) ? num : 0;
	  }
	
	  var paddingWidth = size.paddingLeft + size.paddingRight;
	  var paddingHeight = size.paddingTop + size.paddingBottom;
	  var marginWidth = size.marginLeft + size.marginRight;
	  var marginHeight = size.marginTop + size.marginBottom;
	  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
	  var borderHeight = size.borderTopWidth + size.borderBottomWidth;
	
	  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;
	
	  // overwrite width and height if we can get it from style
	  var styleWidth = getStyleSize( style.width );
	  if ( styleWidth !== false ) {
	    size.width = styleWidth +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
	  }
	
	  var styleHeight = getStyleSize( style.height );
	  if ( styleHeight !== false ) {
	    size.height = styleHeight +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
	  }
	
	  size.innerWidth = size.width - ( paddingWidth + borderWidth );
	  size.innerHeight = size.height - ( paddingHeight + borderHeight );
	
	  size.outerWidth = size.width + marginWidth;
	  size.outerHeight = size.height + marginHeight;
	
	  return size;
	}
	
	// IE8 returns percent values, not pixels
	// taken from jQuery's curCSS
	function mungeNonPixel( elem, value ) {
	  // IE8 and has percent value
	  if ( window.getComputedStyle || value.indexOf('%') === -1 ) {
	    return value;
	  }
	  var style = elem.style;
	  // Remember the original values
	  var left = style.left;
	  var rs = elem.runtimeStyle;
	  var rsLeft = rs && rs.left;
	
	  // Put in the new values to get a computed value out
	  if ( rsLeft ) {
	    rs.left = elem.currentStyle.left;
	  }
	  style.left = value;
	  value = style.pixelLeft;
	
	  // Revert the changed values
	  style.left = left;
	  if ( rsLeft ) {
	    rs.left = rsLeft;
	  }
	
	  return value;
	}
	
	return getSize;
	
	}
	
	// transport
	if ( typeof define === 'function' && define.amd ) {
	  // AMD for RequireJS
	  define( [ 'get-style-property/get-style-property' ], defineGetSize );
	} else if ( true ) {
	  // CommonJS for Component
	  module.exports = defineGetSize( __webpack_require__(157) );
	} else {
	  // browser global
	  window.getSize = defineGetSize( window.getStyleProperty );
	}
	
	})( window );
	
	}.call(window));

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	(function() {
	
	/*!
	 * Unidragger v1.1.5
	 * Draggable base class
	 * MIT license
	 */
	
	/*jshint browser: true, unused: true, undef: true, strict: true */
	
	( function( window, factory ) {
	  /*global define: false, module: false, require: false */
	  'use strict';
	  // universal module definition
	
	  if ( typeof define == 'function' && define.amd ) {
	    // AMD
	    define( [
	      'eventie/eventie',
	      'unipointer/unipointer'
	    ], function( eventie, Unipointer ) {
	      return factory( window, eventie, Unipointer );
	    });
	  } else if ( true ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      __webpack_require__(160),
	      __webpack_require__(161)
	    );
	  } else {
	    // browser global
	    window.Unidragger = factory(
	      window,
	      window.eventie,
	      window.Unipointer
	    );
	  }
	
	}( window, function factory( window, eventie, Unipointer ) {
	
	'use strict';
	
	// -----  ----- //
	
	function noop() {}
	
	// handle IE8 prevent default
	function preventDefaultEvent( event ) {
	  if ( event.preventDefault ) {
	    event.preventDefault();
	  } else {
	    event.returnValue = false;
	  }
	}
	
	// -------------------------- Unidragger -------------------------- //
	
	function Unidragger() {}
	
	// inherit Unipointer & EventEmitter
	Unidragger.prototype = new Unipointer();
	
	// ----- bind start ----- //
	
	Unidragger.prototype.bindHandles = function() {
	  this._bindHandles( true );
	};
	
	Unidragger.prototype.unbindHandles = function() {
	  this._bindHandles( false );
	};
	
	var navigator = window.navigator;
	/**
	 * works as unbinder, as you can .bindHandles( false ) to unbind
	 * @param {Boolean} isBind - will unbind if falsey
	 */
	Unidragger.prototype._bindHandles = function( isBind ) {
	  // munge isBind, default to true
	  isBind = isBind === undefined ? true : !!isBind;
	  // extra bind logic
	  var binderExtra;
	  if ( navigator.pointerEnabled ) {
	    binderExtra = function( handle ) {
	      // disable scrolling on the element
	      handle.style.touchAction = isBind ? 'none' : '';
	    };
	  } else if ( navigator.msPointerEnabled ) {
	    binderExtra = function( handle ) {
	      // disable scrolling on the element
	      handle.style.msTouchAction = isBind ? 'none' : '';
	    };
	  } else {
	    binderExtra = function() {
	      // TODO re-enable img.ondragstart when unbinding
	      if ( isBind ) {
	        disableImgOndragstart( handle );
	      }
	    };
	  }
	  // bind each handle
	  var bindMethod = isBind ? 'bind' : 'unbind';
	  for ( var i=0, len = this.handles.length; i < len; i++ ) {
	    var handle = this.handles[i];
	    this._bindStartEvent( handle, isBind );
	    binderExtra( handle );
	    eventie[ bindMethod ]( handle, 'click', this );
	  }
	};
	
	// remove default dragging interaction on all images in IE8
	// IE8 does its own drag thing on images, which messes stuff up
	
	function noDragStart() {
	  return false;
	}
	
	// TODO replace this with a IE8 test
	var isIE8 = 'attachEvent' in document.documentElement;
	
	// IE8 only
	var disableImgOndragstart = !isIE8 ? noop : function( handle ) {
	
	  if ( handle.nodeName == 'IMG' ) {
	    handle.ondragstart = noDragStart;
	  }
	
	  var images = handle.querySelectorAll('img');
	  for ( var i=0, len = images.length; i < len; i++ ) {
	    var img = images[i];
	    img.ondragstart = noDragStart;
	  }
	};
	
	// ----- start event ----- //
	
	/**
	 * pointer start
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Unidragger.prototype.pointerDown = function( event, pointer ) {
	  // dismiss range sliders
	  if ( event.target.nodeName == 'INPUT' && event.target.type == 'range' ) {
	    // reset pointerDown logic
	    this.isPointerDown = false;
	    delete this.pointerIdentifier;
	    return;
	  }
	
	  this._dragPointerDown( event, pointer );
	  // kludge to blur focused inputs in dragger
	  var focused = document.activeElement;
	  if ( focused && focused.blur ) {
	    focused.blur();
	  }
	  // bind move and end events
	  this._bindPostStartEvents( event );
	  // track scrolling
	  this.pointerDownScroll = Unidragger.getScrollPosition();
	  eventie.bind( window, 'scroll', this );
	
	  this.emitEvent( 'pointerDown', [ event, pointer ] );
	};
	
	// base pointer down logic
	Unidragger.prototype._dragPointerDown = function( event, pointer ) {
	  // track to see when dragging starts
	  this.pointerDownPoint = Unipointer.getPointerPoint( pointer );
	
	  // prevent default, unless touchstart or <select>
	  var isTouchstart = event.type == 'touchstart';
	  var targetNodeName = event.target.nodeName;
	  if ( !isTouchstart && targetNodeName != 'SELECT' ) {
	    preventDefaultEvent( event );
	  }
	};
	
	// ----- move event ----- //
	
	/**
	 * drag move
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Unidragger.prototype.pointerMove = function( event, pointer ) {
	  var moveVector = this._dragPointerMove( event, pointer );
	  this.emitEvent( 'pointerMove', [ event, pointer, moveVector ] );
	  this._dragMove( event, pointer, moveVector );
	};
	
	// base pointer move logic
	Unidragger.prototype._dragPointerMove = function( event, pointer ) {
	  var movePoint = Unipointer.getPointerPoint( pointer );
	  var moveVector = {
	    x: movePoint.x - this.pointerDownPoint.x,
	    y: movePoint.y - this.pointerDownPoint.y
	  };
	  // start drag if pointer has moved far enough to start drag
	  if ( !this.isDragging && this.hasDragStarted( moveVector ) ) {
	    this._dragStart( event, pointer );
	  }
	  return moveVector;
	};
	
	// condition if pointer has moved far enough to start drag
	Unidragger.prototype.hasDragStarted = function( moveVector ) {
	  return Math.abs( moveVector.x ) > 3 || Math.abs( moveVector.y ) > 3;
	};
	
	
	// ----- end event ----- //
	
	/**
	 * pointer up
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Unidragger.prototype.pointerUp = function( event, pointer ) {
	  this.emitEvent( 'pointerUp', [ event, pointer ] );
	  this._dragPointerUp( event, pointer );
	};
	
	Unidragger.prototype._dragPointerUp = function( event, pointer ) {
	  if ( this.isDragging ) {
	    this._dragEnd( event, pointer );
	  } else {
	    // pointer didn't move enough for drag to start
	    this._staticClick( event, pointer );
	  }
	};
	
	Unipointer.prototype.pointerDone = function() {
	  eventie.unbind( window, 'scroll', this );
	};
	
	// -------------------------- drag -------------------------- //
	
	// dragStart
	Unidragger.prototype._dragStart = function( event, pointer ) {
	  this.isDragging = true;
	  this.dragStartPoint = Unidragger.getPointerPoint( pointer );
	  // prevent clicks
	  this.isPreventingClicks = true;
	
	  this.dragStart( event, pointer );
	};
	
	Unidragger.prototype.dragStart = function( event, pointer ) {
	  this.emitEvent( 'dragStart', [ event, pointer ] );
	};
	
	// dragMove
	Unidragger.prototype._dragMove = function( event, pointer, moveVector ) {
	  // do not drag if not dragging yet
	  if ( !this.isDragging ) {
	    return;
	  }
	
	  this.dragMove( event, pointer, moveVector );
	};
	
	Unidragger.prototype.dragMove = function( event, pointer, moveVector ) {
	  preventDefaultEvent( event );
	  this.emitEvent( 'dragMove', [ event, pointer, moveVector ] );
	};
	
	// dragEnd
	Unidragger.prototype._dragEnd = function( event, pointer ) {
	  // set flags
	  this.isDragging = false;
	  // re-enable clicking async
	  var _this = this;
	  setTimeout( function() {
	    delete _this.isPreventingClicks;
	  });
	
	  this.dragEnd( event, pointer );
	};
	
	Unidragger.prototype.dragEnd = function( event, pointer ) {
	  this.emitEvent( 'dragEnd', [ event, pointer ] );
	};
	
	Unidragger.prototype.pointerDone = function() {
	  eventie.unbind( window, 'scroll', this );
	  delete this.pointerDownScroll;
	};
	
	// ----- onclick ----- //
	
	// handle all clicks and prevent clicks when dragging
	Unidragger.prototype.onclick = function( event ) {
	  if ( this.isPreventingClicks ) {
	    preventDefaultEvent( event );
	  }
	};
	
	// ----- staticClick ----- //
	
	// triggered after pointer down & up with no/tiny movement
	Unidragger.prototype._staticClick = function( event, pointer ) {
	  // ignore emulated mouse up clicks
	  if ( this.isIgnoringMouseUp && event.type == 'mouseup' ) {
	    return;
	  }
	
	  // allow click in <input>s and <textarea>s
	  var nodeName = event.target.nodeName;
	  if ( nodeName == 'INPUT' || nodeName == 'TEXTAREA' ) {
	    event.target.focus();
	  }
	  this.staticClick( event, pointer );
	
	  // set flag for emulated clicks 300ms after touchend
	  if ( event.type != 'mouseup' ) {
	    this.isIgnoringMouseUp = true;
	    var _this = this;
	    // reset flag after 300ms
	    setTimeout( function() {
	      delete _this.isIgnoringMouseUp;
	    }, 400 );
	  }
	};
	
	Unidragger.prototype.staticClick = function( event, pointer ) {
	  this.emitEvent( 'staticClick', [ event, pointer ] );
	};
	
	// ----- scroll ----- //
	
	Unidragger.prototype.onscroll = function() {
	  var scroll = Unidragger.getScrollPosition();
	  var scrollMoveX = this.pointerDownScroll.x - scroll.x;
	  var scrollMoveY = this.pointerDownScroll.y - scroll.y;
	  // cancel click/tap if scroll is too much
	  if ( Math.abs( scrollMoveX ) > 3 || Math.abs( scrollMoveY ) > 3 ) {
	    this._pointerDone();
	  }
	};
	
	// ----- utils ----- //
	
	Unidragger.getPointerPoint = function( pointer ) {
	  return {
	    x: pointer.pageX !== undefined ? pointer.pageX : pointer.clientX,
	    y: pointer.pageY !== undefined ? pointer.pageY : pointer.clientY
	  };
	};
	
	var isPageOffset = window.pageYOffset !== undefined;
	
	// get scroll in { x, y }
	Unidragger.getScrollPosition = function() {
	  return {
	    x: isPageOffset ? window.pageXOffset : document.body.scrollLeft,
	    y: isPageOffset ? window.pageYOffset : document.body.scrollTop
	  };
	};
	
	// -----  ----- //
	
	Unidragger.getPointerPoint = Unipointer.getPointerPoint;
	
	return Unidragger;
	
	}));
	
	}.call(window));

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * eventie v1.0.6
	 * event binding helper
	 *   eventie.bind( elem, 'click', myFn )
	 *   eventie.unbind( elem, 'click', myFn )
	 * MIT license
	 */
	
	/*jshint browser: true, undef: true, unused: true */
	/*global define: false, module: false */
	
	( function( window ) {
	
	'use strict';
	
	var docElem = document.documentElement;
	
	var bind = function() {};
	
	function getIEEvent( obj ) {
	  var event = window.event;
	  // add event.target
	  event.target = event.target || event.srcElement || obj;
	  return event;
	}
	
	if ( docElem.addEventListener ) {
	  bind = function( obj, type, fn ) {
	    obj.addEventListener( type, fn, false );
	  };
	} else if ( docElem.attachEvent ) {
	  bind = function( obj, type, fn ) {
	    obj[ type + fn ] = fn.handleEvent ?
	      function() {
	        var event = getIEEvent( obj );
	        fn.handleEvent.call( fn, event );
	      } :
	      function() {
	        var event = getIEEvent( obj );
	        fn.call( obj, event );
	      };
	    obj.attachEvent( "on" + type, obj[ type + fn ] );
	  };
	}
	
	var unbind = function() {};
	
	if ( docElem.removeEventListener ) {
	  unbind = function( obj, type, fn ) {
	    obj.removeEventListener( type, fn, false );
	  };
	} else if ( docElem.detachEvent ) {
	  unbind = function( obj, type, fn ) {
	    obj.detachEvent( "on" + type, obj[ type + fn ] );
	    try {
	      delete obj[ type + fn ];
	    } catch ( err ) {
	      // can't delete window object properties
	      obj[ type + fn ] = undefined;
	    }
	  };
	}
	
	var eventie = {
	  bind: bind,
	  unbind: unbind
	};
	
	// ----- module definition ----- //
	
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (eventie), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS
	  module.exports = eventie;
	} else {
	  // browser global
	  window.eventie = eventie;
	}
	
	})( window );


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	(function() {
	
	/*!
	 * Unipointer v1.1.0
	 * base class for doing one thing with pointer event
	 * MIT license
	 */
	
	/*jshint browser: true, undef: true, unused: true, strict: true */
	/*global define: false, module: false, require: false */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	
	  if ( typeof define == 'function' && define.amd ) {
	    // AMD
	    define( [
	      'eventEmitter/EventEmitter',
	      'eventie/eventie'
	    ], function( EventEmitter, eventie ) {
	      return factory( window, EventEmitter, eventie );
	    });
	  } else if ( true ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      __webpack_require__(162),
	      __webpack_require__(160)
	    );
	  } else {
	    // browser global
	    window.Unipointer = factory(
	      window,
	      window.EventEmitter,
	      window.eventie
	    );
	  }
	
	}( window, function factory( window, EventEmitter, eventie ) {
	
	'use strict';
	
	function noop() {}
	
	function Unipointer() {}
	
	// inherit EventEmitter
	Unipointer.prototype = new EventEmitter();
	
	Unipointer.prototype.bindStartEvent = function( elem ) {
	  this._bindStartEvent( elem, true );
	};
	
	Unipointer.prototype.unbindStartEvent = function( elem ) {
	  this._bindStartEvent( elem, false );
	};
	
	/**
	 * works as unbinder, as you can ._bindStart( false ) to unbind
	 * @param {Boolean} isBind - will unbind if falsey
	 */
	Unipointer.prototype._bindStartEvent = function( elem, isBind ) {
	  // munge isBind, default to true
	  isBind = isBind === undefined ? true : !!isBind;
	  var bindMethod = isBind ? 'bind' : 'unbind';
	
	  if ( window.navigator.pointerEnabled ) {
	    // W3C Pointer Events, IE11. See https://coderwall.com/p/mfreca
	    eventie[ bindMethod ]( elem, 'pointerdown', this );
	  } else if ( window.navigator.msPointerEnabled ) {
	    // IE10 Pointer Events
	    eventie[ bindMethod ]( elem, 'MSPointerDown', this );
	  } else {
	    // listen for both, for devices like Chrome Pixel
	    eventie[ bindMethod ]( elem, 'mousedown', this );
	    eventie[ bindMethod ]( elem, 'touchstart', this );
	  }
	};
	
	// trigger handler methods for events
	Unipointer.prototype.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	// returns the touch that we're keeping track of
	Unipointer.prototype.getTouch = function( touches ) {
	  for ( var i=0, len = touches.length; i < len; i++ ) {
	    var touch = touches[i];
	    if ( touch.identifier == this.pointerIdentifier ) {
	      return touch;
	    }
	  }
	};
	
	// ----- start event ----- //
	
	Unipointer.prototype.onmousedown = function( event ) {
	  // dismiss clicks from right or middle buttons
	  var button = event.button;
	  if ( button && ( button !== 0 && button !== 1 ) ) {
	    return;
	  }
	  this._pointerDown( event, event );
	};
	
	Unipointer.prototype.ontouchstart = function( event ) {
	  this._pointerDown( event, event.changedTouches[0] );
	};
	
	Unipointer.prototype.onMSPointerDown =
	Unipointer.prototype.onpointerdown = function( event ) {
	  this._pointerDown( event, event );
	};
	
	/**
	 * pointer start
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Unipointer.prototype._pointerDown = function( event, pointer ) {
	  // dismiss other pointers
	  if ( this.isPointerDown ) {
	    return;
	  }
	
	  this.isPointerDown = true;
	  // save pointer identifier to match up touch events
	  this.pointerIdentifier = pointer.pointerId !== undefined ?
	    // pointerId for pointer events, touch.indentifier for touch events
	    pointer.pointerId : pointer.identifier;
	
	  this.pointerDown( event, pointer );
	};
	
	Unipointer.prototype.pointerDown = function( event, pointer ) {
	  this._bindPostStartEvents( event );
	  this.emitEvent( 'pointerDown', [ event, pointer ] );
	};
	
	// hash of events to be bound after start event
	var postStartEvents = {
	  mousedown: [ 'mousemove', 'mouseup' ],
	  touchstart: [ 'touchmove', 'touchend', 'touchcancel' ],
	  pointerdown: [ 'pointermove', 'pointerup', 'pointercancel' ],
	  MSPointerDown: [ 'MSPointerMove', 'MSPointerUp', 'MSPointerCancel' ]
	};
	
	Unipointer.prototype._bindPostStartEvents = function( event ) {
	  if ( !event ) {
	    return;
	  }
	  // get proper events to match start event
	  var events = postStartEvents[ event.type ];
	  // IE8 needs to be bound to document
	  var node = event.preventDefault ? window : document;
	  // bind events to node
	  for ( var i=0, len = events.length; i < len; i++ ) {
	    var evnt = events[i];
	    eventie.bind( node, evnt, this );
	  }
	  // save these arguments
	  this._boundPointerEvents = {
	    events: events,
	    node: node
	  };
	};
	
	Unipointer.prototype._unbindPostStartEvents = function() {
	  var args = this._boundPointerEvents;
	  // IE8 can trigger dragEnd twice, check for _boundEvents
	  if ( !args || !args.events ) {
	    return;
	  }
	
	  for ( var i=0, len = args.events.length; i < len; i++ ) {
	    var event = args.events[i];
	    eventie.unbind( args.node, event, this );
	  }
	  delete this._boundPointerEvents;
	};
	
	// ----- move event ----- //
	
	Unipointer.prototype.onmousemove = function( event ) {
	  this._pointerMove( event, event );
	};
	
	Unipointer.prototype.onMSPointerMove =
	Unipointer.prototype.onpointermove = function( event ) {
	  if ( event.pointerId == this.pointerIdentifier ) {
	    this._pointerMove( event, event );
	  }
	};
	
	Unipointer.prototype.ontouchmove = function( event ) {
	  var touch = this.getTouch( event.changedTouches );
	  if ( touch ) {
	    this._pointerMove( event, touch );
	  }
	};
	
	/**
	 * pointer move
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 * @private
	 */
	Unipointer.prototype._pointerMove = function( event, pointer ) {
	  this.pointerMove( event, pointer );
	};
	
	// public
	Unipointer.prototype.pointerMove = function( event, pointer ) {
	  this.emitEvent( 'pointerMove', [ event, pointer ] );
	};
	
	// ----- end event ----- //
	
	
	Unipointer.prototype.onmouseup = function( event ) {
	  this._pointerUp( event, event );
	};
	
	Unipointer.prototype.onMSPointerUp =
	Unipointer.prototype.onpointerup = function( event ) {
	  if ( event.pointerId == this.pointerIdentifier ) {
	    this._pointerUp( event, event );
	  }
	};
	
	Unipointer.prototype.ontouchend = function( event ) {
	  var touch = this.getTouch( event.changedTouches );
	  if ( touch ) {
	    this._pointerUp( event, touch );
	  }
	};
	
	/**
	 * pointer up
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 * @private
	 */
	Unipointer.prototype._pointerUp = function( event, pointer ) {
	  this._pointerDone();
	  this.pointerUp( event, pointer );
	};
	
	// public
	Unipointer.prototype.pointerUp = function( event, pointer ) {
	  this.emitEvent( 'pointerUp', [ event, pointer ] );
	};
	
	// ----- pointer done ----- //
	
	// triggered on pointer up & pointer cancel
	Unipointer.prototype._pointerDone = function() {
	  // reset properties
	  this.isPointerDown = false;
	  delete this.pointerIdentifier;
	  // remove events
	  this._unbindPostStartEvents();
	  this.pointerDone();
	};
	
	Unipointer.prototype.pointerDone = noop;
	
	// ----- pointer cancel ----- //
	
	Unipointer.prototype.onMSPointerCancel =
	Unipointer.prototype.onpointercancel = function( event ) {
	  if ( event.pointerId == this.pointerIdentifier ) {
	    this._pointerCancel( event, event );
	  }
	};
	
	Unipointer.prototype.ontouchcancel = function( event ) {
	  var touch = this.getTouch( event.changedTouches );
	  if ( touch ) {
	    this._pointerCancel( event, touch );
	  }
	};
	
	/**
	 * pointer cancel
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 * @private
	 */
	Unipointer.prototype._pointerCancel = function( event, pointer ) {
	  this._pointerDone();
	  this.pointerCancel( event, pointer );
	};
	
	// public
	Unipointer.prototype.pointerCancel = function( event, pointer ) {
	  this.emitEvent( 'pointerCancel', [ event, pointer ] );
	};
	
	// -----  ----- //
	
	// utility function for getting x/y cooridinates from event, because IE8
	Unipointer.getPointerPoint = function( pointer ) {
	  return {
	    x: pointer.pageX !== undefined ? pointer.pageX : pointer.clientX,
	    y: pointer.pageY !== undefined ? pointer.pageY : pointer.clientY
	  };
	};
	
	// -----  ----- //
	
	return Unipointer;
	
	}));
	
	}.call(window));

/***/ },
/* 162 */
/***/ function(module, exports) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	(function() {
	
	/*!
	 * EventEmitter v4.2.11 - git.io/ee
	 * Unlicense - http://unlicense.org/
	 * Oliver Caldwell - http://oli.me.uk/
	 * @preserve
	 */
	
	;(function () {
	    'use strict';
	
	    /**
	     * Class for managing events.
	     * Can be extended to provide event functionality in other classes.
	     *
	     * @class EventEmitter Manages event registering and emitting.
	     */
	    function EventEmitter() {}
	
	    // Shortcuts to improve speed and size
	    var proto = EventEmitter.prototype;
	    var exports = this;
	    var originalGlobalValue = exports.EventEmitter;
	
	    /**
	     * Finds the index of the listener for the event in its storage array.
	     *
	     * @param {Function[]} listeners Array of listeners to search through.
	     * @param {Function} listener Method to look for.
	     * @return {Number} Index of the specified listener, -1 if not found
	     * @api private
	     */
	    function indexOfListener(listeners, listener) {
	        var i = listeners.length;
	        while (i--) {
	            if (listeners[i].listener === listener) {
	                return i;
	            }
	        }
	
	        return -1;
	    }
	
	    /**
	     * Alias a method while keeping the context correct, to allow for overwriting of target method.
	     *
	     * @param {String} name The name of the target method.
	     * @return {Function} The aliased method
	     * @api private
	     */
	    function alias(name) {
	        return function aliasClosure() {
	            return this[name].apply(this, arguments);
	        };
	    }
	
	    /**
	     * Returns the listener array for the specified event.
	     * Will initialise the event object and listener arrays if required.
	     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	     * Each property in the object response is an array of listener functions.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Function[]|Object} All listener functions for the event.
	     */
	    proto.getListeners = function getListeners(evt) {
	        var events = this._getEvents();
	        var response;
	        var key;
	
	        // Return a concatenated array of all matching events if
	        // the selector is a regular expression.
	        if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    response[key] = events[key];
	                }
	            }
	        }
	        else {
	            response = events[evt] || (events[evt] = []);
	        }
	
	        return response;
	    };
	
	    /**
	     * Takes a list of listener objects and flattens it into a list of listener functions.
	     *
	     * @param {Object[]} listeners Raw listener objects.
	     * @return {Function[]} Just the listener functions.
	     */
	    proto.flattenListeners = function flattenListeners(listeners) {
	        var flatListeners = [];
	        var i;
	
	        for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	        }
	
	        return flatListeners;
	    };
	
	    /**
	     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Object} All listener functions for an event in an object.
	     */
	    proto.getListenersAsObject = function getListenersAsObject(evt) {
	        var listeners = this.getListeners(evt);
	        var response;
	
	        if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	        }
	
	        return response || listeners;
	    };
	
	    /**
	     * Adds a listener function to the specified event.
	     * The listener will not be added if it is a duplicate.
	     * If the listener returns true then it will be removed after it is called.
	     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListener = function addListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var listenerIsWrapped = typeof listener === 'object';
	        var key;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	                listeners[key].push(listenerIsWrapped ? listener : {
	                    listener: listener,
	                    once: false
	                });
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of addListener
	     */
	    proto.on = alias('addListener');
	
	    /**
	     * Semi-alias of addListener. It will add a listener that will be
	     * automatically removed after its first execution.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addOnceListener = function addOnceListener(evt, listener) {
	        return this.addListener(evt, {
	            listener: listener,
	            once: true
	        });
	    };
	
	    /**
	     * Alias of addOnceListener.
	     */
	    proto.once = alias('addOnceListener');
	
	    /**
	     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	     * You need to tell it what event names should be matched by a regex.
	     *
	     * @param {String} evt Name of the event to create.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvent = function defineEvent(evt) {
	        this.getListeners(evt);
	        return this;
	    };
	
	    /**
	     * Uses defineEvent to define multiple events.
	     *
	     * @param {String[]} evts An array of event names to define.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvents = function defineEvents(evts) {
	        for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	        }
	        return this;
	    };
	
	    /**
	     * Removes a listener function from the specified event.
	     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to remove the listener from.
	     * @param {Function} listener Method to remove from the event.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListener = function removeListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var index;
	        var key;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                index = indexOfListener(listeners[key], listener);
	
	                if (index !== -1) {
	                    listeners[key].splice(index, 1);
	                }
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of removeListener
	     */
	    proto.off = alias('removeListener');
	
	    /**
	     * Adds listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	     * You can also pass it a regular expression to add the array of listeners to all events that match it.
	     * Yeah, this function does quite a bit. That's probably a bad thing.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListeners = function addListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(false, evt, listeners);
	    };
	
	    /**
	     * Removes listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be removed.
	     * You can also pass it a regular expression to remove the listeners from all events that match it.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListeners = function removeListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(true, evt, listeners);
	    };
	
	    /**
	     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	     * The first argument will determine if the listeners are removed (true) or added (false).
	     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be added/removed.
	     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	     *
	     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	        var i;
	        var value;
	        var single = remove ? this.removeListener : this.addListener;
	        var multiple = remove ? this.removeListeners : this.addListeners;
	
	        // If evt is an object then pass each of its properties to this method
	        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	                if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                    // Pass the single listener straight through to the singular method
	                    if (typeof value === 'function') {
	                        single.call(this, i, value);
	                    }
	                    else {
	                        // Otherwise pass back to the multiple function
	                        multiple.call(this, i, value);
	                    }
	                }
	            }
	        }
	        else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	                single.call(this, evt, listeners[i]);
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Removes all listeners from a specified event.
	     * If you do not specify an event then all listeners will be removed.
	     * That means every event will be emptied.
	     * You can also pass a regex to remove all events that match it.
	     *
	     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeEvent = function removeEvent(evt) {
	        var type = typeof evt;
	        var events = this._getEvents();
	        var key;
	
	        // Remove different things depending on the state of evt
	        if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	        }
	        else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    delete events[key];
	                }
	            }
	        }
	        else {
	            // Remove all listeners in all events
	            delete this._events;
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of removeEvent.
	     *
	     * Added to mirror the node API.
	     */
	    proto.removeAllListeners = alias('removeEvent');
	
	    /**
	     * Emits an event of your choice.
	     * When emitted, every listener attached to that event will be executed.
	     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	     * So they will not arrive within the array on the other side, they will be separate.
	     * You can also pass a regular expression to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {Array} [args] Optional array of arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emitEvent = function emitEvent(evt, args) {
	        var listeners = this.getListenersAsObject(evt);
	        var listener;
	        var i;
	        var key;
	        var response;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                i = listeners[key].length;
	
	                while (i--) {
	                    // If the listener returns true then it shall be removed from the event
	                    // The function is executed either with a basic call or an apply if there is an args array
	                    listener = listeners[key][i];
	
	                    if (listener.once === true) {
	                        this.removeListener(evt, listener.listener);
	                    }
	
	                    response = listener.listener.apply(this, args || []);
	
	                    if (response === this._getOnceReturnValue()) {
	                        this.removeListener(evt, listener.listener);
	                    }
	                }
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of emitEvent
	     */
	    proto.trigger = alias('emitEvent');
	
	    /**
	     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {...*} Optional additional arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emit = function emit(evt) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return this.emitEvent(evt, args);
	    };
	
	    /**
	     * Sets the current value to check against when executing listeners. If a
	     * listeners return value matches the one set here then it will be removed
	     * after execution. This value defaults to true.
	     *
	     * @param {*} value The new value to check for when executing listeners.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.setOnceReturnValue = function setOnceReturnValue(value) {
	        this._onceReturnValue = value;
	        return this;
	    };
	
	    /**
	     * Fetches the current value to check against when executing listeners. If
	     * the listeners return value matches this one then it should be removed
	     * automatically. It will return true by default.
	     *
	     * @return {*|Boolean} The current value to check for or the default, true.
	     * @api private
	     */
	    proto._getOnceReturnValue = function _getOnceReturnValue() {
	        if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	        }
	        else {
	            return true;
	        }
	    };
	
	    /**
	     * Fetches the events object and creates one if required.
	     *
	     * @return {Object} The events storage object.
	     * @api private
	     */
	    proto._getEvents = function _getEvents() {
	        return this._events || (this._events = {});
	    };
	
	    /**
	     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	     *
	     * @return {Function} Non conflicting EventEmitter class.
	     */
	    EventEmitter.noConflict = function noConflict() {
	        exports.EventEmitter = originalGlobalValue;
	        return EventEmitter;
	    };
	
	    // Expose the class either via AMD, CommonJS or the global object
	    if (typeof define === 'function' && define.amd) {
	        define(function () {
	            return EventEmitter;
	        });
	    }
	    else if (typeof module === 'object' && module.exports){
	        module.exports = EventEmitter;
	    }
	    else {
	        exports.EventEmitter = EventEmitter;
	    }
	}.call(this));
	
	}.call(window));

/***/ },
/* 163 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-slider\" :id=\"id\"\n    :class=\"{\n        min: value === 0, max: value === 100, dragging: dragging, disabled: disabled,\n        active: active, 'has-label': hasLabel\n    }\"\n\n    :tabindex=\"disabled ? null : 0\" role=\"slider\" :aria-valuemin=\"0\" :aria-valuemax=\"100\"\n    :aria-valuenow=\"value\"\n\n    @keydown.left.prevent=\"decrement\" @keydown.right.prevent=\"increment\"\n    @keydown.down.prevent=\"decrement\" @keydown.up.prevent=\"increment\"\n    @focus=\"focus\" @blur=\"blur\"\n>\n    <input type=\"hidden\" :value=\"value\" :name=\"name\">\n\n    <div class=\"ui-slider-icon-wrapper\" v-if=\"showIcon\">\n        <ui-icon :icon=\"icon\" class=\"ui-slider-icon\"></ui-icon>\n    </div>\n\n    <div class=\"ui-slider-content\">\n        <div class=\"ui-slider-label\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n        <div class=\"ui-slider-wrapper\" v-el:slider @mousedown=\"sliderClick\">\n            <div class=\"ui-slider-containment\" v-el:containment></div>\n\n            <div class=\"ui-slider-track\">\n                <div class=\"ui-slider-track-fill\" :style=\"{ width: value + '%'}\"></div>\n            </div>\n\n            <div class=\"ui-slider-thumb-container\" v-el:thumb>\n                <div class=\"ui-slider-focus-ring\"></div>\n                <div class=\"ui-slider-thumb\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(165)
	__vue_script__ = __webpack_require__(166)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiSnackbar.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(167)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiSnackbar.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 165 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiButton = __webpack_require__(89);
	
	var _UiButton2 = _interopRequireDefault(_UiButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-snackbar',
	
	    props: {
	        id: String,
	        show: {
	            type: Boolean,
	            default: false,
	            twoWay: true
	        },
	        message: String,
	        action: String,
	        actionColor: {
	            type: String,
	            default: 'accent' },
	        persistent: {
	            type: Boolean,
	            default: false
	        },
	        duration: {
	            type: Number,
	            default: 5000
	        },
	        autoHide: {
	            type: Boolean,
	            default: true
	        }
	    },
	
	    data: function data() {
	        return {
	            height: 0,
	            timeout: null
	        };
	    },
	    beforeDestroy: function beforeDestroy() {
	        if (this.timeout) {
	            clearTimeout(this.timeout);
	        }
	    },
	
	
	    methods: {
	        click: function click() {
	            this.$dispatch('clicked');
	            this.hide();
	        },
	        actionClick: function actionClick() {
	            this.$dispatch('action-clicked');
	            this.hide();
	        },
	        hide: function hide() {
	            if (!this.persistent) {
	                this.show = false;
	            }
	        }
	    },
	
	    components: {
	        UiButton: _UiButton2.default
	    },
	
	    transitions: {
	        'ui-snackbar-toggle': {
	            afterEnter: function afterEnter() {
	                this.$dispatch('shown');
	
	                if (this.autoHide) {
	                    this.timeout = setTimeout(this.hide, this.duration);
	                }
	            },
	            afterLeave: function afterLeave() {
	                this.$dispatch('hidden');
	
	                if (this.timeout) {
	                    clearTimeout(this.timeout);
	                    this.timeout = null;
	                }
	            }
	        }
	    }
	};

/***/ },
/* 167 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-snackbar\" :id=\"id\" transition=\"ui-snackbar-toggle\" @click=\"click\" v-show=\"show\"\n>\n    <div class=\"ui-snackbar-text\">\n        <slot>\n            <span v-text=\"message\"></span>\n        </slot>\n    </div>\n\n    <div class=\"ui-snackbar-action\">\n        <ui-button\n            class=\"ui-snackbar-action-button\" type=\"flat\" :color=\"actionColor\"\n            :text=\"action\" @click.stop=\"actionClick\" v-if=\"action\"\n        ></ui-button>\n    </div>\n</div>\n";

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(169)
	__vue_script__ = __webpack_require__(170)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiSnackbarContainer.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(171)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiSnackbarContainer.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 169 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _uuid = __webpack_require__(72);
	
	var _uuid2 = _interopRequireDefault(_uuid);
	
	var _UiSnackbar = __webpack_require__(164);
	
	var _UiSnackbar2 = _interopRequireDefault(_UiSnackbar);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-snackbar-container',
	
	    props: {
	        queueSnackbars: {
	            type: Boolean,
	            default: false
	        },
	        defaultDuration: {
	            type: Number,
	            default: 5000
	        },
	        position: {
	            type: String,
	            default: 'left', coerce: function coerce(position) {
	                return 'position-' + position;
	            }
	        }
	    },
	
	    events: {
	        'ui-snackbar::create': function uiSnackbarCreate(snackbar) {
	            snackbar.show = false;
	            snackbar.id = snackbar.id || _uuid2.default.short('ui-snackbar-');
	            snackbar.duration = snackbar.duration || this.defaultDuration;
	
	            this.queue.push(snackbar);
	
	            if (this.queue.length === 1) {
	                this.showNext();
	            } else {
	                if (!this.queueSnackbars) {
	                    this.queue[0].show = false;
	                }
	            }
	        }
	    },
	
	    data: function data() {
	        return {
	            queue: [] };
	    },
	
	
	    methods: {
	        showNext: function showNext() {
	            if (!this.queue.length) {
	                return;
	            }
	
	            this.queue[0].show = true;
	        },
	        shown: function shown(snackbar) {
	            this.$dispatch('snackbar-shown', snackbar);
	            this.callHook('onShow', snackbar);
	        },
	        hidden: function hidden(snackbar) {
	            this.$dispatch('snackbar-hidden', snackbar);
	            this.callHook('onHide', snackbar);
	
	            this.queue.$remove(snackbar);
	            this.showNext();
	        },
	        clicked: function clicked(snackbar) {
	            this.callHook('onClick', snackbar);
	        },
	        actionClicked: function actionClicked(snackbar) {
	            this.callHook('onActionClick', snackbar);
	        },
	        callHook: function callHook(hook, snackbar) {
	            if (typeof snackbar[hook] === 'function') {
	                snackbar[hook].call(undefined, snackbar);
	            }
	        }
	    },
	
	    components: {
	        UiSnackbar: _UiSnackbar2.default
	    }
	};

/***/ },
/* 171 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-snackbar-container\" :class=\"[position]\">\n    <ui-snackbar\n        :message=\"s.message\" :duration=\"s.duration\" :show.sync=\"s.show\" :action=\"s.action\"\n        :action-color=\"s.actionColor\" :persistent=\"s.persistent\" :id=\"s.id\" auto-hide\n\n        @shown=\"shown(s)\" @hidden=\"hidden(s)\" @clicked=\"clicked(s)\"\n        @action-clicked=\"actionClicked(s)\"\n\n        v-for=\"s in queue\"\n    ></ui-snackbar>\n</div>\n";

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(173)
	__vue_script__ = __webpack_require__(174)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiSwitch.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(175)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiSwitch.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 173 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	var _ReceivesTargetedEvent = __webpack_require__(75);
	
	var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-switch',
	
	    props: {
	        name: String,
	        value: {
	            type: Boolean,
	            required: true,
	            twoWay: true
	        },
	        label: String,
	        hideLabel: {
	            type: Boolean,
	            default: false
	        },
	        labelLeft: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            initialValue: false
	        };
	    },
	    created: function created() {
	        this.initialValue = this.value;
	    },
	
	
	    events: {
	        'ui-input::reset': function uiInputReset(id) {
	            if (!this.eventTargetsComponent(id)) {
	                return;
	            }
	
	            this.value = this.initialValue;
	        }
	    },
	
	    directives: {
	        disabled: _disabled2.default
	    },
	
	    mixins: [_ReceivesTargetedEvent2.default]
	};

/***/ },
/* 175 */
/***/ function(module, exports) {

	module.exports = "\n<label\n    class=\"ui-switch\"\n    :class=\"{ 'checked': value, 'disabled': disabled, 'label-left': labelLeft }\"\n>\n    <div class=\"ui-switch-container\">\n        <input\n            class=\"ui-switch-input\" type=\"checkbox\" :name=\"name\" :id=\"id\" v-model=\"value\"\n            v-disabled=\"disabled\"\n        >\n\n        <div class=\"ui-switch-track\"></div>\n        <div class=\"ui-switch-thumb\"></div>\n\n        <div class=\"ui-switch-focus-ring\"></div>\n    </div>\n\n    <div class=\"ui-switch-label-text\" v-if=\"!hideLabel\">\n        <slot>\n            <span v-text=\"label\"></span>\n        </slot>\n    </div>\n</label>\n";

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(177)
	__vue_script__ = __webpack_require__(178)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiTab.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(179)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiTab.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 177 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 178 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    name: 'ui-tab',
	
	    props: {
	        id: String,
	        header: String,
	        icon: String,
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    computed: {
	        active: function active() {
	            return this.$parent.activeTab === this.id;
	        }
	    },
	
	    watch: {
	        active: function active() {
	            if (this.active) {
	                this.$dispatch('selected', this.id);
	            } else {
	                this.$dispatch('deselected', this.id);
	            }
	        }
	    }
	};

/***/ },
/* 179 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-tab\" :id=\"id\" role=\"tabpanel\" :tabindex=\"active ? '0' : null\"\n    :aria-hidden=\"!active ? 'true' : null\" v-show=\"active\"\n>\n    <slot></slot>\n</div>\n";

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(181)
	__vue_script__ = __webpack_require__(182)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiTabs.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(187)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiTabs.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 181 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _uuid = __webpack_require__(72);
	
	var _uuid2 = _interopRequireDefault(_uuid);
	
	var _UiTabHeaderItem = __webpack_require__(183);
	
	var _UiTabHeaderItem2 = _interopRequireDefault(_UiTabHeaderItem);
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-tabs',
	
	    props: {
	        type: {
	            type: String,
	            default: 'text' },
	        activeTab: String,
	        backgroundColor: {
	            type: String,
	            default: 'default', coerce: function coerce(color) {
	                return 'background-color-' + color;
	            }
	        },
	        textColor: {
	            type: String,
	            default: 'black', coerce: function coerce(color) {
	                return 'text-color-' + color;
	            }
	        },
	        textColorActive: {
	            type: String,
	            default: 'primary', coerce: function coerce(color) {
	                return 'text-color-active-' + color;
	            }
	        },
	        indicatorColor: {
	            type: String,
	            default: 'primary', coerce: function coerce(color) {
	                return 'color-' + color;
	            }
	        },
	        fullwidth: {
	            type: Boolean,
	            default: false
	        },
	        raised: {
	            type: Boolean,
	            default: false
	        },
	        hideRippleInk: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            activeTabElement: null
	        };
	    },
	
	
	    computed: {
	        styleClasses: function styleClasses() {
	            var classes = ['ui-tabs-type-' + this.type];
	
	            if (this.raised) {
	                classes.push('raised');
	            }
	
	            if (this.fullwidth) {
	                classes.push('fullwidth');
	            }
	
	            return classes;
	        },
	        indicatorLeft: function indicatorLeft() {
	            if (this.activeTabElement) {
	                return this.activeTabElement.offsetLeft + 'px';
	            }
	
	            return 0;
	        },
	        indicatorRight: function indicatorRight() {
	            if (this.activeTabElement) {
	                var left = this.activeTabElement.offsetLeft;
	                var width = this.activeTabElement.offsetWidth;
	                var tabContainerWidth = this.$els.tabsContainer.offsetWidth;
	
	                return tabContainerWidth - (left + width) + 'px';
	            }
	        }
	    },
	
	    ready: function ready() {
	        var _this = this;
	
	        for (var i = 0; i < this.$children.length; i++) {
	            this.$children[i].id = this.$children[i].id || _uuid2.default.short('ui-tab-');
	        }
	
	        this.activeTab = this.activeTab || this.$children[0].id;
	
	        this.$nextTick(function () {
	            if (_this.$els.tabsContainer) {
	                _this.activeTabElement = _this.$els.tabsContainer.querySelector('.active');
	            }
	        });
	    },
	
	
	    methods: {
	        select: function select(e, tab) {
	            var newTabElement = e.currentTarget ? e.currentTarget : e;
	
	            if (tab.disabled || this.activeTabElement === newTabElement) {
	                return;
	            }
	
	            this.activeTabElement = newTabElement;
	            this.activeTab = tab.id;
	
	            this.$dispatch('active-tab-changed', tab.id);
	        },
	        selectPrev: function selectPrev(currentTabIndex) {
	            if (currentTabIndex === 0) {
	                return;
	            }
	
	            var prevTab = this.findTab(currentTabIndex);
	            this.select(prevTab.$el, prevTab);
	
	            this.activeTabElement.focus();
	        },
	        selectNext: function selectNext(currentTabIndex) {
	            if (currentTabIndex === this.$refs.tabElements.length - 1) {
	                return;
	            }
	
	            var nextTab = this.findTab(currentTabIndex, true);
	            this.select(nextTab.$el, nextTab);
	
	            this.activeTabElement.focus();
	        },
	        findTab: function findTab(currentTabIndex, next) {
	            var tab = void 0;
	
	            if (next) {
	                for (var i = currentTabIndex + 1; i < this.$refs.tabElements.length; i++) {
	                    if (!this.$refs.tabElements[i].disabled) {
	                        tab = this.$refs.tabElements[i];
	                        break;
	                    }
	                }
	            } else {
	                for (var _i = currentTabIndex - 1; _i >= 0; _i--) {
	                    if (!this.$refs.tabElements[_i].disabled) {
	                        tab = this.$refs.tabElements[_i];
	                        break;
	                    }
	                }
	            }
	
	            tab = tab || this.$refs.tabElements[currentTabIndex];
	
	            return tab;
	        }
	    },
	
	    components: {
	        UiTabHeaderItem: _UiTabHeaderItem2.default
	    },
	
	    directives: {
	        disabled: _disabled2.default
	    }
	};

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(184)
	__vue_script__ = __webpack_require__(185)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiTabHeaderItem.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(186)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiTabHeaderItem.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 184 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _disabled = __webpack_require__(55);
	
	var _disabled2 = _interopRequireDefault(_disabled);
	
	var _ShowsRippleInk = __webpack_require__(19);
	
	var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-tab-header-item',
	
	    props: {
	        id: String,
	        type: {
	            type: String,
	            default: 'text' },
	        text: String,
	        icon: String,
	        active: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default
	    },
	
	    mixins: [_ShowsRippleInk2.default],
	
	    directives: {
	        disabled: _disabled2.default
	    }
	};

/***/ },
/* 186 */
/***/ function(module, exports) {

	module.exports = "\n<li\n    class=\"ui-tab-header-item\" role=\"tab\"\n    :class=\"['type-' + type, { 'active': active, 'disabled': disabled }]\"\n\n    :tabindex=\"active ? 0 : -1\" :aria-controls=\"id\" :aria-selected=\"active ? 'true' : null\"\n    v-disabled=\"disabled\" v-el:item\n>\n    <div\n        class=\"ui-tab-header-item-icon\" v-if=\"type === 'icon' || type === 'icon-and-text'\"\n    >\n        <ui-icon :icon=\"icon\"></ui-icon>\n    </div>\n\n    <div\n        class=\"ui-tab-header-item-text\" v-text=\"text\"\n        v-if=\"type === 'text' || type === 'icon-and-text'\"\n    ></div>\n\n    <ui-ripple-ink :trigger=\"$els.item\" v-if=\"!hideRippleInk && !disabled\"></ui-ripple-ink>\n</li>\n";

/***/ },
/* 187 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-tabs\" :class=\"styleClasses\">\n    <div class=\"ui-tabs-header\" :class=\"[backgroundColor]\">\n        <ul\n            class=\"ui-tabs-header-items\" :class=\"[textColor, textColorActive]\" role=\"tablist\"\n            v-el:tabs-container\n        >\n            <ui-tab-header-item\n                :type=\"type\" :id=\"tab.id\" :icon=\"tab.icon\" :text=\"tab.header\"\n                :active=\"activeTab === tab.id\" :disabled=\"tab.disabled\"\n                :hide-ripple-ink=\"hideRippleInk\"\n\n                @click=\"select($event, tab)\" @keydown.left=\"selectPrev(index)\"\n                @keydown.right=\"selectNext($index)\"\n\n                v-for=\"(index, tab) in $children\" v-ref:tab-elements\n            ></ui-tab-header-item>\n        </ul>\n\n        <div\n            class=\"ui-tabs-active-tab-indicator\" :class=\"[indicatorColor]\"\n            :style=\"{ 'left': indicatorLeft, 'right': indicatorRight }\"\n        ></div>\n    </div>\n\n    <div class=\"ui-tabs-body\">\n        <slot></slot>\n    </div>\n</div>\n";

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(189)
	__vue_script__ = __webpack_require__(190)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiTextbox.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(191)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiTextbox.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 189 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiIcon = __webpack_require__(6);
	
	var _UiIcon2 = _interopRequireDefault(_UiIcon);
	
	var _HasTextInput = __webpack_require__(74);
	
	var _HasTextInput2 = _interopRequireDefault(_HasTextInput);
	
	var _ValidatesInput = __webpack_require__(76);
	
	var _ValidatesInput2 = _interopRequireDefault(_ValidatesInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-textbox',
	
	    props: {
	        type: {
	            type: String,
	            default: 'text'
	        },
	        multiLine: {
	            type: Boolean,
	            default: false
	        },
	        rows: {
	            type: Number,
	            default: 2
	        },
	        maxLength: Number,
	        trimValue: {
	            type: Boolean,
	            default: true
	        },
	        validateOnBlur: {
	            type: Boolean,
	            default: false
	        },
	        autocomplete: {
	            type: Boolean,
	            default: true
	        },
	        min: Number,
	        max: Number,
	        step: {
	            type: String,
	            default: 'any',
	            coerce: String
	        }
	    },
	
	    watch: {
	        value: function value() {
	            if (this.ignoreValueChange) {
	                return;
	            }
	
	            if (!this.dirty) {
	                this.dirty = true;
	            }
	
	            if (!this.validateOnBlur) {
	                this.validate();
	            }
	        }
	    },
	
	    data: function data() {
	        return {
	            ignoreValueChange: false
	        };
	    },
	
	
	    computed: {
	        showIcon: function showIcon() {
	            return Boolean(this.icon);
	        },
	        minValue: function minValue() {
	            if (this.type !== 'number') {
	                return null;
	            }
	
	            if (this.min || this.min === 0) {
	                return this.min;
	            }
	
	            return null;
	        },
	        maxValue: function maxValue() {
	            if (this.type !== 'number') {
	                return null;
	            }
	
	            if (this.max || this.max === 0) {
	                return this.max;
	            }
	
	            return null;
	        },
	        stepValue: function stepValue() {
	            if (this.type === 'number') {
	                return this.step;
	            }
	
	            return null;
	        }
	    },
	
	    events: {
	        'ui-input::reset': function uiInputReset(id) {
	            var _this = this;
	
	            if (!this.eventTargetsComponent(id)) {
	                return;
	            }
	
	            this.ignoreValueChange = true;
	
	            if (document.activeElement === this.$el.querySelector('input') || document.activeElement === this.$el.querySelector('textarea')) {
	                document.activeElement.blur();
	            }
	
	            this.validationError = '';
	            this.value = this.initialValue;
	            this.valid = true;
	            this.dirty = false;
	
	            this.$nextTick(function () {
	                _this.ignoreValueChange = false;
	            });
	        }
	    },
	
	    methods: {
	        focussed: function focussed() {
	            this.active = true;
	            this.$dispatch('focussed');
	        },
	        blurred: function blurred() {
	            this.active = false;
	
	            if (!this.dirty) {
	                this.dirty = true;
	            }
	
	            this.$dispatch('blurred');
	            this.validate();
	        },
	        changed: function changed() {
	            this.$dispatch('changed');
	        },
	        keydown: function keydown(e) {
	            this.$dispatch('keydown', e);
	        },
	        keydownEnter: function keydownEnter(e) {
	            this.$dispatch('keydown-enter', e);
	        }
	    },
	
	    filters: {
	        trim: {
	            write: function write(value) {
	                if (this.type !== 'number' && this.trimValue) {
	                    return value.trim();
	                }
	
	                return value;
	            }
	        }
	    },
	
	    components: {
	        UiIcon: _UiIcon2.default
	    },
	
	    mixins: [_HasTextInput2.default, _ValidatesInput2.default]
	};

/***/ },
/* 191 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"ui-textbox\"\n    :class=\"{\n        'disabled': disabled, 'invalid': !valid, 'dirty': dirty, 'active': active,\n        'has-label': !hideLabel, 'is-multi-line': multiLine, 'icon-right': iconRight,\n        'has-counter': maxLength\n    }\"\n>\n    <div class=\"ui-textbox-icon-wrapper\" v-if=\"showIcon\">\n        <ui-icon :icon=\"icon\" class=\"ui-textbox-icon\"></ui-icon>\n    </div>\n\n    <div class=\"ui-textbox-content\">\n        <label class=\"ui-textbox-label\">\n            <div class=\"ui-textbox-label-text\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n            <input\n                class=\"ui-textbox-input\" :type=\"type\" :placeholder=\"placeholder\" :name=\"name\"\n                :id=\"id\" :number=\"type === 'number' ? true : null\" :min=\"minValue\"\n                :max=\"maxValue\" :step=\"stepValue\" :autocomplete=\"autocomplete ? null : 'off'\"\n\n                @focus=\"focussed\" @blur=\"blurred\" @change=\"changed\" @keydown=\"keydown\"\n                @keydown.enter=\"keydownEnter\" debounce=\"debounce\"\n\n                v-model=\"value | trim\" v-disabled=\"disabled\" v-if=\"!multiLine\"\n            >\n\n            <textarea\n                class=\"ui-textbox-textarea\" :placeholder=\"placeholder\" :name=\"name\" :id=\"id\"\n                :rows=\"rows\"\n\n                @focus=\"focussed\" @blur=\"blurred\" @change=\"changed\" @keydown=\"keydown\"\n                @keydown.enter=\"keydownEnter\" debounce=\"debounce\"\n\n                v-model=\"value | trim\" v-disabled=\"disabled\" v-else\n            ></textarea>\n        </label>\n\n        <div class=\"ui-textbox-feedback\" v-if=\"showFeedback || maxLength\">\n            <div\n                class=\"ui-textbox-error-text\" transition=\"ui-textbox-feedback-toggle\"\n                v-text=\"validationError\" v-show=\"!hideValidationErrors && !valid\"\n            ></div>\n\n            <div\n                class=\"ui-textbox-help-text\" transition=\"ui-textbox-feedback-toggle\"\n                v-text=\"helpText\" v-else\n            ></div>\n\n            <div\n                class=\"ui-textbox-counter\" v-text=\"value.length + '/' + maxLength\"\n                v-if=\"maxLength\"\n            ></div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(193)
	__vue_script__ = __webpack_require__(194)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\UiToolbar.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(195)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), true)
	  if (!hotAPI.compatible) return
	  var id = "C:\\code\\packages\\keen-ui\\src\\UiToolbar.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 193 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _UiProgressLinear = __webpack_require__(117);
	
	var _UiProgressLinear2 = _interopRequireDefault(_UiProgressLinear);
	
	var _UiIconButton = __webpack_require__(10);
	
	var _UiIconButton2 = _interopRequireDefault(_UiIconButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'ui-toolbar',
	
	    props: {
	        type: {
	            type: String,
	            default: 'default', coerce: function coerce(type) {
	                return 'ui-toolbar-' + type;
	            }
	        },
	        textColor: {
	            type: String,
	            default: 'black', coerce: function coerce(color) {
	                return 'text-color-' + color;
	            }
	        },
	        title: String,
	        brand: String,
	        showBrand: {
	            type: Boolean,
	            default: false
	        },
	        showBrandDivider: {
	            type: Boolean,
	            default: null
	        },
	        navIcon: {
	            type: String,
	            default: 'menu'
	        },
	        hideNavIcon: {
	            type: Boolean,
	            default: false
	        },
	        flat: {
	            type: Boolean,
	            default: false
	        },
	        preloaderTop: {
	            type: Boolean,
	            default: false
	        },
	        loading: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    computed: {
	        styleClasses: function styleClasses() {
	            var classes = [this.type, this.textColor];
	
	            if (!this.flat) {
	                classes.push('ui-toolbar-raised');
	            }
	
	            return classes;
	        },
	        iconColor: function iconColor() {
	            if (this.textColor === 'text-color-black') {
	                return 'black';
	            }
	
	            return 'white';
	        },
	        preloaderColor: function preloaderColor() {
	            if (this.textColor === 'text-color-black') {
	                return 'primary';
	            }
	
	            return 'white';
	        },
	        brandDividerVisible: function brandDividerVisible() {
	            if (this.showBrandDivider !== null) {
	                return this.showBrandDivider;
	            }
	
	            if (!this.showBrand) {
	                return false;
	            }
	
	            return true;
	        }
	    },
	
	    methods: {
	        navIconClick: function navIconClick() {
	            this.$dispatch('nav-icon-clicked');
	        }
	    },
	
	    components: {
	        UiProgressLinear: _UiProgressLinear2.default,
	        UiIconButton: _UiIconButton2.default
	    }
	};

/***/ },
/* 195 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"ui-toolbar\" :class=\"styleClasses\">\n    <div class=\"ui-toolbar-left\">\n        <ui-icon-button\n            class=\"ui-toolbar-nav-icon\" type=\"clear\" :color=\"iconColor\" :icon=\"navIcon\"\n            @click=\"navIconClick\" v-if=\"!hideNavIcon\"\n        ></ui-icon-button>\n\n        <div class=\"ui-toolbar-brand\" v-if=\"showBrand\">\n            <slot name=\"brand\">\n                <div class=\"ui-toolbar-brand-text\" v-text=\"brand\"></div>\n            </slot>\n        </div>\n    </div>\n\n    <div class=\"ui-toolbar-center\">\n        <div class=\"ui-toolbar-divider\" v-if=\"brandDividerVisible\"></div>\n\n        <slot>\n            <div class=\"ui-toolbar-title\" v-text=\"title\"></div>\n        </slot>\n    </div>\n\n    <div class=\"ui-toolbar-right\">\n        <slot name=\"actions\"></slot>\n    </div>\n\n    <ui-progress-linear\n        :show=\"loading\" class=\"ui-toolbar-preloader\" :class=\"{ 'position-top' : preloaderTop }\"\n        :color=\"preloaderColor\"\n    ></ui-progress-linear>\n</div>\n";

/***/ }
/******/ ])
});
;

},{"tether":24,"tether-drop":23,"vue":30,"vue-hot-reload-api":25}],21:[function(require,module,exports){
//! moment.js
//! version : 2.14.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        return Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        var k;
        for (k in obj) {
            // even if its not own property I'd still call it non-empty
            return false;
        }
        return true;
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    function isUndefined(input) {
        return input === void 0;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (utils_hooks__hooks.deprecationHandler != null) {
                utils_hooks__hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (utils_hooks__hooks.deprecationHandler != null) {
            utils_hooks__hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;
    utils_hooks__hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function get_set__set (mom, unit, value) {
        if (mom.isValid()) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function units_month__handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = create_utc__createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return units_month__handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (typeof value !== 'number') {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        //the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        return isArray(this._weekdays) ? this._weekdays[m.day()] :
            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function day_of_week__handleStrictParse(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = create_utc__createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = create_utc__createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        ordinalParse: defaultOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    // treat as if there is no base config
                    deprecateSimple('parentLocaleUndefined',
                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, parentConfig = baseConfig;
            // MERGE
            if (locales[name] != null) {
                parentConfig = locales[name]._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function locale_locales__listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(utils_hooks__hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (isDate(input)) {
            config._d = input;
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!valid__isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date(utils_hooks__hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = local__createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return valid__createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = local__createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return valid__createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = ((string || '').match(matcher) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
            } else if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(matchOffset, this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input,units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input,units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            delta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 local__createLocal(time).isValid())) {
            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 local__createLocal(time).isValid())) {
            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
            case 'date':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }

        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
            units = 'day';
        }

        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIOROITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add               = add_subtract__add;
    momentPrototype__proto.calendar          = moment_calendar__calendar;
    momentPrototype__proto.clone             = clone;
    momentPrototype__proto.diff              = diff;
    momentPrototype__proto.endOf             = endOf;
    momentPrototype__proto.format            = format;
    momentPrototype__proto.from              = from;
    momentPrototype__proto.fromNow           = fromNow;
    momentPrototype__proto.to                = to;
    momentPrototype__proto.toNow             = toNow;
    momentPrototype__proto.get               = stringGet;
    momentPrototype__proto.invalidAt         = invalidAt;
    momentPrototype__proto.isAfter           = isAfter;
    momentPrototype__proto.isBefore          = isBefore;
    momentPrototype__proto.isBetween         = isBetween;
    momentPrototype__proto.isSame            = isSame;
    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
    momentPrototype__proto.isValid           = moment_valid__isValid;
    momentPrototype__proto.lang              = lang;
    momentPrototype__proto.locale            = locale;
    momentPrototype__proto.localeData        = localeData;
    momentPrototype__proto.max               = prototypeMax;
    momentPrototype__proto.min               = prototypeMin;
    momentPrototype__proto.parsingFlags      = parsingFlags;
    momentPrototype__proto.set               = stringSet;
    momentPrototype__proto.startOf           = startOf;
    momentPrototype__proto.subtract          = add_subtract__subtract;
    momentPrototype__proto.toArray           = toArray;
    momentPrototype__proto.toObject          = toObject;
    momentPrototype__proto.toDate            = toDate;
    momentPrototype__proto.toISOString       = moment_format__toISOString;
    momentPrototype__proto.toJSON            = toJSON;
    momentPrototype__proto.toString          = toString;
    momentPrototype__proto.unix              = unix;
    momentPrototype__proto.valueOf           = to_type__valueOf;
    momentPrototype__proto.creationData      = creationData;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var prototype__proto = Locale.prototype;

    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto.ordinal         = ordinal;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months            =        localeMonths;
    prototype__proto.monthsShort       =        localeMonthsShort;
    prototype__proto.monthsParse       =        localeMonthsParse;
    prototype__proto.monthsRegex       = monthsRegex;
    prototype__proto.monthsShortRegex  = monthsShortRegex;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    prototype__proto.weekdaysRegex       =        weekdaysRegex;
    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;
    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = lists__get(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = locale_locales__getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return lists__get(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = lists__get(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function lists__listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function lists__listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function lists__listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function lists__listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes <= 1           && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   <= 1           && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    <= 1           && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  <= 1           && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   <= 1           && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.14.1';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.now                   = now;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.updateLocale          = updateLocale;
    utils_hooks__hooks.locales               = locale_locales__listLocales;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    utils_hooks__hooks.calendarFormat        = getCalendarFormat;
    utils_hooks__hooks.prototype             = momentPrototype;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
},{}],22:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

(function () {
    try {
        cachedSetTimeout = setTimeout;
    } catch (e) {
        cachedSetTimeout = function () {
            throw new Error('setTimeout is not defined');
        }
    }
    try {
        cachedClearTimeout = clearTimeout;
    } catch (e) {
        cachedClearTimeout = function () {
            throw new Error('clearTimeout is not defined');
        }
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0);
    } else {
        return cachedSetTimeout.call(null, fun, 0);
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        clearTimeout(marker);
    } else {
        cachedClearTimeout.call(null, marker);
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],23:[function(require,module,exports){
/*! tether-drop 1.4.1 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(["tether"], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('tether'));
  } else {
    root.Drop = factory(root.Tether);
  }
}(this, function(Tether) {

/* global Tether */
'use strict';

var _bind = Function.prototype.bind;

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Tether$Utils = Tether.Utils;
var extend = _Tether$Utils.extend;
var addClass = _Tether$Utils.addClass;
var removeClass = _Tether$Utils.removeClass;
var hasClass = _Tether$Utils.hasClass;
var Evented = _Tether$Utils.Evented;

function sortAttach(str) {
  var _str$split = str.split(' ');

  var _str$split2 = _slicedToArray(_str$split, 2);

  var first = _str$split2[0];
  var second = _str$split2[1];

  if (['left', 'right'].indexOf(first) >= 0) {
    var _ref = [second, first];
    first = _ref[0];
    second = _ref[1];
  }
  return [first, second].join(' ');
}

function removeFromArray(arr, item) {
  var index = undefined;
  var results = [];
  while ((index = arr.indexOf(item)) !== -1) {
    results.push(arr.splice(index, 1));
  }
  return results;
}

var clickEvents = ['click'];
if ('ontouchstart' in document.documentElement) {
  clickEvents.push('touchstart');
}

var transitionEndEvents = {
  'WebkitTransition': 'webkitTransitionEnd',
  'MozTransition': 'transitionend',
  'OTransition': 'otransitionend',
  'transition': 'transitionend'
};

var transitionEndEvent = '';
for (var _name in transitionEndEvents) {
  if (({}).hasOwnProperty.call(transitionEndEvents, _name)) {
    var tempEl = document.createElement('p');
    if (typeof tempEl.style[_name] !== 'undefined') {
      transitionEndEvent = transitionEndEvents[_name];
    }
  }
}

var MIRROR_ATTACH = {
  left: 'right',
  right: 'left',
  top: 'bottom',
  bottom: 'top',
  middle: 'middle',
  center: 'center'
};

var allDrops = {};

// Drop can be included in external libraries.  Calling createContext gives you a fresh
// copy of drop which won't interact with other copies on the page (beyond calling the document events).

function createContext() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var drop = function drop() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new (_bind.apply(DropInstance, [null].concat(args)))();
  };

  extend(drop, {
    createContext: createContext,
    drops: [],
    defaults: {}
  });

  var defaultOptions = {
    classPrefix: 'drop',
    defaults: {
      position: 'bottom left',
      openOn: 'click',
      beforeClose: null,
      constrainToScrollParent: true,
      constrainToWindow: true,
      classes: '',
      remove: false,
      openDelay: 0,
      closeDelay: 50,
      // inherited from openDelay and closeDelay if not explicitly defined
      focusDelay: null,
      blurDelay: null,
      hoverOpenDelay: null,
      hoverCloseDelay: null,
      tetherOptions: {}
    }
  };

  extend(drop, defaultOptions, options);
  extend(drop.defaults, defaultOptions.defaults, options.defaults);

  if (typeof allDrops[drop.classPrefix] === 'undefined') {
    allDrops[drop.classPrefix] = [];
  }

  drop.updateBodyClasses = function () {
    // There is only one body, so despite the context concept, we still iterate through all
    // drops which share our classPrefix.

    var anyOpen = false;
    var drops = allDrops[drop.classPrefix];
    var len = drops.length;
    for (var i = 0; i < len; ++i) {
      if (drops[i].isOpened()) {
        anyOpen = true;
        break;
      }
    }

    if (anyOpen) {
      addClass(document.body, drop.classPrefix + '-open');
    } else {
      removeClass(document.body, drop.classPrefix + '-open');
    }
  };

  var DropInstance = (function (_Evented) {
    _inherits(DropInstance, _Evented);

    function DropInstance(opts) {
      _classCallCheck(this, DropInstance);

      _get(Object.getPrototypeOf(DropInstance.prototype), 'constructor', this).call(this);
      this.options = extend({}, drop.defaults, opts);
      this.target = this.options.target;

      if (typeof this.target === 'undefined') {
        throw new Error('Drop Error: You must provide a target.');
      }

      var dataPrefix = 'data-' + drop.classPrefix;

      var contentAttr = this.target.getAttribute(dataPrefix);
      if (contentAttr && this.options.content == null) {
        this.options.content = contentAttr;
      }

      var attrsOverride = ['position', 'openOn'];
      for (var i = 0; i < attrsOverride.length; ++i) {

        var override = this.target.getAttribute(dataPrefix + '-' + attrsOverride[i]);
        if (override && this.options[attrsOverride[i]] == null) {
          this.options[attrsOverride[i]] = override;
        }
      }

      if (this.options.classes && this.options.addTargetClasses !== false) {
        addClass(this.target, this.options.classes);
      }

      drop.drops.push(this);
      allDrops[drop.classPrefix].push(this);

      this._boundEvents = [];
      this.bindMethods();
      this.setupElements();
      this.setupEvents();
      this.setupTether();
    }

    _createClass(DropInstance, [{
      key: '_on',
      value: function _on(element, event, handler) {
        this._boundEvents.push({ element: element, event: event, handler: handler });
        element.addEventListener(event, handler);
      }
    }, {
      key: 'bindMethods',
      value: function bindMethods() {
        this.transitionEndHandler = this._transitionEndHandler.bind(this);
      }
    }, {
      key: 'setupElements',
      value: function setupElements() {
        var _this = this;

        this.drop = document.createElement('div');
        addClass(this.drop, drop.classPrefix);

        if (this.options.classes) {
          addClass(this.drop, this.options.classes);
        }

        this.content = document.createElement('div');
        addClass(this.content, drop.classPrefix + '-content');

        if (typeof this.options.content === 'function') {
          var generateAndSetContent = function generateAndSetContent() {
            // content function might return a string or an element
            var contentElementOrHTML = _this.options.content.call(_this, _this);

            if (typeof contentElementOrHTML === 'string') {
              _this.content.innerHTML = contentElementOrHTML;
            } else if (typeof contentElementOrHTML === 'object') {
              _this.content.innerHTML = '';
              _this.content.appendChild(contentElementOrHTML);
            } else {
              throw new Error('Drop Error: Content function should return a string or HTMLElement.');
            }
          };

          generateAndSetContent();
          this.on('open', generateAndSetContent.bind(this));
        } else if (typeof this.options.content === 'object') {
          this.content.appendChild(this.options.content);
        } else {
          this.content.innerHTML = this.options.content;
        }

        this.drop.appendChild(this.content);
      }
    }, {
      key: 'setupTether',
      value: function setupTether() {
        // Tether expects two attachment points, one in the target element, one in the
        // drop.  We use a single one, and use the order as well, to allow us to put
        // the drop on either side of any of the four corners.  This magic converts between
        // the two:
        var dropAttach = this.options.position.split(' ');
        dropAttach[0] = MIRROR_ATTACH[dropAttach[0]];
        dropAttach = dropAttach.join(' ');

        var constraints = [];
        if (this.options.constrainToScrollParent) {
          constraints.push({
            to: 'scrollParent',
            pin: 'top, bottom',
            attachment: 'together none'
          });
        } else {
          // To get 'out of bounds' classes
          constraints.push({
            to: 'scrollParent'
          });
        }

        if (this.options.constrainToWindow !== false) {
          constraints.push({
            to: 'window',
            attachment: 'together'
          });
        } else {
          // To get 'out of bounds' classes
          constraints.push({
            to: 'window'
          });
        }

        var opts = {
          element: this.drop,
          target: this.target,
          attachment: sortAttach(dropAttach),
          targetAttachment: sortAttach(this.options.position),
          classPrefix: drop.classPrefix,
          offset: '0 0',
          targetOffset: '0 0',
          enabled: false,
          constraints: constraints,
          addTargetClasses: this.options.addTargetClasses
        };

        if (this.options.tetherOptions !== false) {
          this.tether = new Tether(extend({}, opts, this.options.tetherOptions));
        }
      }
    }, {
      key: 'setupEvents',
      value: function setupEvents() {
        var _this2 = this;

        if (!this.options.openOn) {
          return;
        }

        if (this.options.openOn === 'always') {
          setTimeout(this.open.bind(this));
          return;
        }

        var events = this.options.openOn.split(' ');

        if (events.indexOf('click') >= 0) {
          var openHandler = function openHandler(event) {
            _this2.toggle(event);
            event.preventDefault();
          };

          var closeHandler = function closeHandler(event) {
            if (!_this2.isOpened()) {
              return;
            }

            // Clicking inside dropdown
            if (event.target === _this2.drop || _this2.drop.contains(event.target)) {
              return;
            }

            // Clicking target
            if (event.target === _this2.target || _this2.target.contains(event.target)) {
              return;
            }

            _this2.close(event);
          };

          for (var i = 0; i < clickEvents.length; ++i) {
            var clickEvent = clickEvents[i];
            this._on(this.target, clickEvent, openHandler);
            this._on(document, clickEvent, closeHandler);
          }
        }

        var inTimeout = null;
        var outTimeout = null;

        var inHandler = function inHandler(event) {
          if (outTimeout !== null) {
            clearTimeout(outTimeout);
          } else {
            inTimeout = setTimeout(function () {
              _this2.open(event);
              inTimeout = null;
            }, (event.type === 'focus' ? _this2.options.focusDelay : _this2.options.hoverOpenDelay) || _this2.options.openDelay);
          }
        };

        var outHandler = function outHandler(event) {
          if (inTimeout !== null) {
            clearTimeout(inTimeout);
          } else {
            outTimeout = setTimeout(function () {
              _this2.close(event);
              outTimeout = null;
            }, (event.type === 'blur' ? _this2.options.blurDelay : _this2.options.hoverCloseDelay) || _this2.options.closeDelay);
          }
        };

        if (events.indexOf('hover') >= 0) {
          this._on(this.target, 'mouseover', inHandler);
          this._on(this.drop, 'mouseover', inHandler);
          this._on(this.target, 'mouseout', outHandler);
          this._on(this.drop, 'mouseout', outHandler);
        }

        if (events.indexOf('focus') >= 0) {
          this._on(this.target, 'focus', inHandler);
          this._on(this.drop, 'focus', inHandler);
          this._on(this.target, 'blur', outHandler);
          this._on(this.drop, 'blur', outHandler);
        }
      }
    }, {
      key: 'isOpened',
      value: function isOpened() {
        if (this.drop) {
          return hasClass(this.drop, drop.classPrefix + '-open');
        }
      }
    }, {
      key: 'toggle',
      value: function toggle(event) {
        if (this.isOpened()) {
          this.close(event);
        } else {
          this.open(event);
        }
      }
    }, {
      key: 'open',
      value: function open(event) {
        var _this3 = this;

        /* eslint no-unused-vars: 0 */
        if (this.isOpened()) {
          return;
        }

        if (!this.drop.parentNode) {
          document.body.appendChild(this.drop);
        }

        if (typeof this.tether !== 'undefined') {
          this.tether.enable();
        }

        addClass(this.drop, drop.classPrefix + '-open');
        addClass(this.drop, drop.classPrefix + '-open-transitionend');

        setTimeout(function () {
          if (_this3.drop) {
            addClass(_this3.drop, drop.classPrefix + '-after-open');
          }
        });

        if (typeof this.tether !== 'undefined') {
          this.tether.position();
        }

        this.trigger('open');

        drop.updateBodyClasses();
      }
    }, {
      key: '_transitionEndHandler',
      value: function _transitionEndHandler(e) {
        if (e.target !== e.currentTarget) {
          return;
        }

        if (!hasClass(this.drop, drop.classPrefix + '-open')) {
          removeClass(this.drop, drop.classPrefix + '-open-transitionend');
        }
        this.drop.removeEventListener(transitionEndEvent, this.transitionEndHandler);
      }
    }, {
      key: 'beforeCloseHandler',
      value: function beforeCloseHandler(event) {
        var shouldClose = true;

        if (!this.isClosing && typeof this.options.beforeClose === 'function') {
          this.isClosing = true;
          shouldClose = this.options.beforeClose(event, this) !== false;
        }

        this.isClosing = false;

        return shouldClose;
      }
    }, {
      key: 'close',
      value: function close(event) {
        if (!this.isOpened()) {
          return;
        }

        if (!this.beforeCloseHandler(event)) {
          return;
        }

        removeClass(this.drop, drop.classPrefix + '-open');
        removeClass(this.drop, drop.classPrefix + '-after-open');

        this.drop.addEventListener(transitionEndEvent, this.transitionEndHandler);

        this.trigger('close');

        if (typeof this.tether !== 'undefined') {
          this.tether.disable();
        }

        drop.updateBodyClasses();

        if (this.options.remove) {
          this.remove(event);
        }
      }
    }, {
      key: 'remove',
      value: function remove(event) {
        this.close(event);
        if (this.drop.parentNode) {
          this.drop.parentNode.removeChild(this.drop);
        }
      }
    }, {
      key: 'position',
      value: function position() {
        if (this.isOpened() && typeof this.tether !== 'undefined') {
          this.tether.position();
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this.remove();

        if (typeof this.tether !== 'undefined') {
          this.tether.destroy();
        }

        for (var i = 0; i < this._boundEvents.length; ++i) {
          var _boundEvents$i = this._boundEvents[i];
          var element = _boundEvents$i.element;
          var _event = _boundEvents$i.event;
          var handler = _boundEvents$i.handler;

          element.removeEventListener(_event, handler);
        }

        this._boundEvents = [];

        this.tether = null;
        this.drop = null;
        this.content = null;
        this.target = null;

        removeFromArray(allDrops[drop.classPrefix], this);
        removeFromArray(drop.drops, this);
      }
    }]);

    return DropInstance;
  })(Evented);

  return drop;
}

var Drop = createContext();

document.addEventListener('DOMContentLoaded', function () {
  Drop.updateBodyClasses();
});
return Drop;

}));

},{"tether":24}],24:[function(require,module,exports){
/*! tether 1.3.4 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require, exports, module);
  } else {
    root.Tether = factory();
  }
}(this, function(require, exports, module) {

'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var TetherBase = undefined;
if (typeof TetherBase === 'undefined') {
  TetherBase = { modules: [] };
}

var zeroElement = null;

// Same as native getBoundingClientRect, except it takes into account parent <frame> offsets
// if the element lies within a nested document (<frame> or <iframe>-like).
function getActualBoundingClientRect(node) {
  var boundingRect = node.getBoundingClientRect();

  // The original object returned by getBoundingClientRect is immutable, so we clone it
  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
  var rect = {};
  for (var k in boundingRect) {
    rect[k] = boundingRect[k];
  }

  if (node.ownerDocument !== document) {
    var _frameElement = node.ownerDocument.defaultView.frameElement;
    if (_frameElement) {
      var frameRect = getActualBoundingClientRect(_frameElement);
      rect.top += frameRect.top;
      rect.bottom += frameRect.top;
      rect.left += frameRect.left;
      rect.right += frameRect.left;
    }
  }

  return rect;
}

function getScrollParents(el) {
  // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;
  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
  var computedStyle = getComputedStyle(el) || {};
  var position = computedStyle.position;
  var parents = [];

  if (position === 'fixed') {
    return [el];
  }

  var parent = el;
  while ((parent = parent.parentNode) && parent && parent.nodeType === 1) {
    var style = undefined;
    try {
      style = getComputedStyle(parent);
    } catch (err) {}

    if (typeof style === 'undefined' || style === null) {
      parents.push(parent);
      return parents;
    }

    var _style = style;
    var overflow = _style.overflow;
    var overflowX = _style.overflowX;
    var overflowY = _style.overflowY;

    if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
        parents.push(parent);
      }
    }
  }

  parents.push(el.ownerDocument.body);

  // If the node is within a frame, account for the parent window scroll
  if (el.ownerDocument !== document) {
    parents.push(el.ownerDocument.defaultView);
  }

  return parents;
}

var uniqueId = (function () {
  var id = 0;
  return function () {
    return ++id;
  };
})();

var zeroPosCache = {};
var getOrigin = function getOrigin() {
  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
  // jitter as the user scrolls that messes with our ability to detect if two positions
  // are equivilant or not.  We place an element at the top left of the page that will
  // get the same jitter, so we can cancel the two out.
  var node = zeroElement;
  if (!node) {
    node = document.createElement('div');
    node.setAttribute('data-tether-id', uniqueId());
    extend(node.style, {
      top: 0,
      left: 0,
      position: 'absolute'
    });

    document.body.appendChild(node);

    zeroElement = node;
  }

  var id = node.getAttribute('data-tether-id');
  if (typeof zeroPosCache[id] === 'undefined') {
    zeroPosCache[id] = getActualBoundingClientRect(node);

    // Clear the cache when this position call is done
    defer(function () {
      delete zeroPosCache[id];
    });
  }

  return zeroPosCache[id];
};

function removeUtilElements() {
  if (zeroElement) {
    document.body.removeChild(zeroElement);
  }
  zeroElement = null;
};

function getBounds(el) {
  var doc = undefined;
  if (el === document) {
    doc = document;
    el = document.documentElement;
  } else {
    doc = el.ownerDocument;
  }

  var docEl = doc.documentElement;

  var box = getActualBoundingClientRect(el);

  var origin = getOrigin();

  box.top -= origin.top;
  box.left -= origin.left;

  if (typeof box.width === 'undefined') {
    box.width = document.body.scrollWidth - box.left - box.right;
  }
  if (typeof box.height === 'undefined') {
    box.height = document.body.scrollHeight - box.top - box.bottom;
  }

  box.top = box.top - docEl.clientTop;
  box.left = box.left - docEl.clientLeft;
  box.right = doc.body.clientWidth - box.width - box.left;
  box.bottom = doc.body.clientHeight - box.height - box.top;

  return box;
}

function getOffsetParent(el) {
  return el.offsetParent || document.documentElement;
}

function getScrollBarSize() {
  var inner = document.createElement('div');
  inner.style.width = '100%';
  inner.style.height = '200px';

  var outer = document.createElement('div');
  extend(outer.style, {
    position: 'absolute',
    top: 0,
    left: 0,
    pointerEvents: 'none',
    visibility: 'hidden',
    width: '200px',
    height: '150px',
    overflow: 'hidden'
  });

  outer.appendChild(inner);

  document.body.appendChild(outer);

  var widthContained = inner.offsetWidth;
  outer.style.overflow = 'scroll';
  var widthScroll = inner.offsetWidth;

  if (widthContained === widthScroll) {
    widthScroll = outer.clientWidth;
  }

  document.body.removeChild(outer);

  var width = widthContained - widthScroll;

  return { width: width, height: width };
}

function extend() {
  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var args = [];

  Array.prototype.push.apply(args, arguments);

  args.slice(1).forEach(function (obj) {
    if (obj) {
      for (var key in obj) {
        if (({}).hasOwnProperty.call(obj, key)) {
          out[key] = obj[key];
        }
      }
    }
  });

  return out;
}

function removeClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.remove(cls);
      }
    });
  } else {
    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');
    var className = getClassName(el).replace(regex, ' ');
    setClassName(el, className);
  }
}

function addClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.add(cls);
      }
    });
  } else {
    removeClass(el, name);
    var cls = getClassName(el) + (' ' + name);
    setClassName(el, cls);
  }
}

function hasClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    return el.classList.contains(name);
  }
  var className = getClassName(el);
  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);
}

function getClassName(el) {
  // Can't use just SVGAnimatedString here since nodes within a Frame in IE have
  // completely separately SVGAnimatedString base classes
  if (el.className instanceof el.ownerDocument.defaultView.SVGAnimatedString) {
    return el.className.baseVal;
  }
  return el.className;
}

function setClassName(el, className) {
  el.setAttribute('class', className);
}

function updateClasses(el, add, all) {
  // Of the set of 'all' classes, we need the 'add' classes, and only the
  // 'add' classes to be set.
  all.forEach(function (cls) {
    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
      removeClass(el, cls);
    }
  });

  add.forEach(function (cls) {
    if (!hasClass(el, cls)) {
      addClass(el, cls);
    }
  });
}

var deferred = [];

var defer = function defer(fn) {
  deferred.push(fn);
};

var flush = function flush() {
  var fn = undefined;
  while (fn = deferred.pop()) {
    fn();
  }
};

var Evented = (function () {
  function Evented() {
    _classCallCheck(this, Evented);
  }

  _createClass(Evented, [{
    key: 'on',
    value: function on(event, handler, ctx) {
      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

      if (typeof this.bindings === 'undefined') {
        this.bindings = {};
      }
      if (typeof this.bindings[event] === 'undefined') {
        this.bindings[event] = [];
      }
      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
    }
  }, {
    key: 'once',
    value: function once(event, handler, ctx) {
      this.on(event, handler, ctx, true);
    }
  }, {
    key: 'off',
    value: function off(event, handler) {
      if (typeof this.bindings === 'undefined' || typeof this.bindings[event] === 'undefined') {
        return;
      }

      if (typeof handler === 'undefined') {
        delete this.bindings[event];
      } else {
        var i = 0;
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }, {
    key: 'trigger',
    value: function trigger(event) {
      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
        var i = 0;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        while (i < this.bindings[event].length) {
          var _bindings$event$i = this.bindings[event][i];
          var handler = _bindings$event$i.handler;
          var ctx = _bindings$event$i.ctx;
          var once = _bindings$event$i.once;

          var context = ctx;
          if (typeof context === 'undefined') {
            context = this;
          }

          handler.apply(context, args);

          if (once) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }]);

  return Evented;
})();

TetherBase.Utils = {
  getActualBoundingClientRect: getActualBoundingClientRect,
  getScrollParents: getScrollParents,
  getBounds: getBounds,
  getOffsetParent: getOffsetParent,
  extend: extend,
  addClass: addClass,
  removeClass: removeClass,
  hasClass: hasClass,
  updateClasses: updateClasses,
  defer: defer,
  flush: flush,
  uniqueId: uniqueId,
  Evented: Evented,
  getScrollBarSize: getScrollBarSize,
  removeUtilElements: removeUtilElements
};
/* globals TetherBase, performance */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (typeof TetherBase === 'undefined') {
  throw new Error('You must include the utils.js file before tether.js');
}

var _TetherBase$Utils = TetherBase.Utils;
var getScrollParents = _TetherBase$Utils.getScrollParents;
var getBounds = _TetherBase$Utils.getBounds;
var getOffsetParent = _TetherBase$Utils.getOffsetParent;
var extend = _TetherBase$Utils.extend;
var addClass = _TetherBase$Utils.addClass;
var removeClass = _TetherBase$Utils.removeClass;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;
var flush = _TetherBase$Utils.flush;
var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;
var removeUtilElements = _TetherBase$Utils.removeUtilElements;

function within(a, b) {
  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

  return a + diff >= b && b >= a - diff;
}

var transformKey = (function () {
  if (typeof document === 'undefined') {
    return '';
  }
  var el = document.createElement('div');

  var transforms = ['transform', 'WebkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
  for (var i = 0; i < transforms.length; ++i) {
    var key = transforms[i];
    if (el.style[key] !== undefined) {
      return key;
    }
  }
})();

var tethers = [];

var position = function position() {
  tethers.forEach(function (tether) {
    tether.position(false);
  });
  flush();
};

function now() {
  if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {
    return performance.now();
  }
  return +new Date();
}

(function () {
  var lastCall = null;
  var lastDuration = null;
  var pendingTimeout = null;

  var tick = function tick() {
    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
      // We voluntarily throttle ourselves if we can't manage 60fps
      lastDuration = Math.min(lastDuration - 16, 250);

      // Just in case this is the last event, remember to position just once more
      pendingTimeout = setTimeout(tick, 250);
      return;
    }

    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {
      // Some browsers call events a little too frequently, refuse to run more than is reasonable
      return;
    }

    if (pendingTimeout != null) {
      clearTimeout(pendingTimeout);
      pendingTimeout = null;
    }

    lastCall = now();
    position();
    lastDuration = now() - lastCall;
  };

  if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {
    ['resize', 'scroll', 'touchmove'].forEach(function (event) {
      window.addEventListener(event, tick);
    });
  }
})();

var MIRROR_LR = {
  center: 'center',
  left: 'right',
  right: 'left'
};

var MIRROR_TB = {
  middle: 'middle',
  top: 'bottom',
  bottom: 'top'
};

var OFFSET_MAP = {
  top: 0,
  left: 0,
  middle: '50%',
  center: '50%',
  bottom: '100%',
  right: '100%'
};

var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (left === 'auto') {
    left = MIRROR_LR[relativeToAttachment.left];
  }

  if (top === 'auto') {
    top = MIRROR_TB[relativeToAttachment.top];
  }

  return { left: left, top: top };
};

var attachmentToOffset = function attachmentToOffset(attachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
    left = OFFSET_MAP[attachment.left];
  }

  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
    top = OFFSET_MAP[attachment.top];
  }

  return { left: left, top: top };
};

function addOffset() {
  var out = { top: 0, left: 0 };

  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {
    offsets[_key] = arguments[_key];
  }

  offsets.forEach(function (_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (typeof top === 'string') {
      top = parseFloat(top, 10);
    }
    if (typeof left === 'string') {
      left = parseFloat(left, 10);
    }

    out.top += top;
    out.left += left;
  });

  return out;
}

function offsetToPx(offset, size) {
  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
    offset.left = parseFloat(offset.left, 10) / 100 * size.width;
  }
  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
    offset.top = parseFloat(offset.top, 10) / 100 * size.height;
  }

  return offset;
}

var parseOffset = function parseOffset(value) {
  var _value$split = value.split(' ');

  var _value$split2 = _slicedToArray(_value$split, 2);

  var top = _value$split2[0];
  var left = _value$split2[1];

  return { top: top, left: left };
};
var parseAttachment = parseOffset;

var TetherClass = (function (_Evented) {
  _inherits(TetherClass, _Evented);

  function TetherClass(options) {
    var _this = this;

    _classCallCheck(this, TetherClass);

    _get(Object.getPrototypeOf(TetherClass.prototype), 'constructor', this).call(this);
    this.position = this.position.bind(this);

    tethers.push(this);

    this.history = [];

    this.setOptions(options, false);

    TetherBase.modules.forEach(function (module) {
      if (typeof module.initialize !== 'undefined') {
        module.initialize.call(_this);
      }
    });

    this.position();
  }

  _createClass(TetherClass, [{
    key: 'getClass',
    value: function getClass() {
      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
      var classes = this.options.classes;

      if (typeof classes !== 'undefined' && classes[key]) {
        return this.options.classes[key];
      } else if (this.options.classPrefix) {
        return this.options.classPrefix + '-' + key;
      } else {
        return key;
      }
    }
  }, {
    key: 'setOptions',
    value: function setOptions(options) {
      var _this2 = this;

      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var defaults = {
        offset: '0 0',
        targetOffset: '0 0',
        targetAttachment: 'auto auto',
        classPrefix: 'tether'
      };

      this.options = extend(defaults, options);

      var _options = this.options;
      var element = _options.element;
      var target = _options.target;
      var targetModifier = _options.targetModifier;

      this.element = element;
      this.target = target;
      this.targetModifier = targetModifier;

      if (this.target === 'viewport') {
        this.target = document.body;
        this.targetModifier = 'visible';
      } else if (this.target === 'scroll-handle') {
        this.target = document.body;
        this.targetModifier = 'scroll-handle';
      }

      ['element', 'target'].forEach(function (key) {
        if (typeof _this2[key] === 'undefined') {
          throw new Error('Tether Error: Both element and target must be defined');
        }

        if (typeof _this2[key].jquery !== 'undefined') {
          _this2[key] = _this2[key][0];
        } else if (typeof _this2[key] === 'string') {
          _this2[key] = document.querySelector(_this2[key]);
        }
      });

      addClass(this.element, this.getClass('element'));
      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('target'));
      }

      if (!this.options.attachment) {
        throw new Error('Tether Error: You must provide an attachment');
      }

      this.targetAttachment = parseAttachment(this.options.targetAttachment);
      this.attachment = parseAttachment(this.options.attachment);
      this.offset = parseOffset(this.options.offset);
      this.targetOffset = parseOffset(this.options.targetOffset);

      if (typeof this.scrollParents !== 'undefined') {
        this.disable();
      }

      if (this.targetModifier === 'scroll-handle') {
        this.scrollParents = [this.target];
      } else {
        this.scrollParents = getScrollParents(this.target);
      }

      if (!(this.options.enabled === false)) {
        this.enable(pos);
      }
    }
  }, {
    key: 'getTargetBounds',
    value: function getTargetBounds() {
      if (typeof this.targetModifier !== 'undefined') {
        if (this.targetModifier === 'visible') {
          if (this.target === document.body) {
            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };
          } else {
            var bounds = getBounds(this.target);

            var out = {
              height: bounds.height,
              width: bounds.width,
              top: bounds.top,
              left: bounds.left
            };

            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));
            out.height = Math.min(innerHeight, out.height);
            out.height -= 2;

            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));
            out.width = Math.min(innerWidth, out.width);
            out.width -= 2;

            if (out.top < pageYOffset) {
              out.top = pageYOffset;
            }
            if (out.left < pageXOffset) {
              out.left = pageXOffset;
            }

            return out;
          }
        } else if (this.targetModifier === 'scroll-handle') {
          var bounds = undefined;
          var target = this.target;
          if (target === document.body) {
            target = document.documentElement;

            bounds = {
              left: pageXOffset,
              top: pageYOffset,
              height: innerHeight,
              width: innerWidth
            };
          } else {
            bounds = getBounds(target);
          }

          var style = getComputedStyle(target);

          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;

          var scrollBottom = 0;
          if (hasBottomScroll) {
            scrollBottom = 15;
          }

          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;

          var out = {
            width: 15,
            height: height * 0.975 * (height / target.scrollHeight),
            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
          };

          var fitAdj = 0;
          if (height < 408 && this.target === document.body) {
            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
          }

          if (this.target !== document.body) {
            out.height = Math.max(out.height, 24);
          }

          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);

          if (this.target === document.body) {
            out.height = Math.max(out.height, 24);
          }

          return out;
        }
      } else {
        return getBounds(this.target);
      }
    }
  }, {
    key: 'clearCache',
    value: function clearCache() {
      this._cache = {};
    }
  }, {
    key: 'cache',
    value: function cache(k, getter) {
      // More than one module will often need the same DOM info, so
      // we keep a cache which is cleared on each position call
      if (typeof this._cache === 'undefined') {
        this._cache = {};
      }

      if (typeof this._cache[k] === 'undefined') {
        this._cache[k] = getter.call(this);
      }

      return this._cache[k];
    }
  }, {
    key: 'enable',
    value: function enable() {
      var _this3 = this;

      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('enabled'));
      }
      addClass(this.element, this.getClass('enabled'));
      this.enabled = true;

      this.scrollParents.forEach(function (parent) {
        if (parent !== _this3.target.ownerDocument) {
          parent.addEventListener('scroll', _this3.position);
        }
      });

      if (pos) {
        this.position();
      }
    }
  }, {
    key: 'disable',
    value: function disable() {
      var _this4 = this;

      removeClass(this.target, this.getClass('enabled'));
      removeClass(this.element, this.getClass('enabled'));
      this.enabled = false;

      if (typeof this.scrollParents !== 'undefined') {
        this.scrollParents.forEach(function (parent) {
          parent.removeEventListener('scroll', _this4.position);
        });
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      var _this5 = this;

      this.disable();

      tethers.forEach(function (tether, i) {
        if (tether === _this5) {
          tethers.splice(i, 1);
        }
      });

      // Remove any elements we were using for convenience from the DOM
      if (tethers.length === 0) {
        removeUtilElements();
      }
    }
  }, {
    key: 'updateAttachClasses',
    value: function updateAttachClasses(elementAttach, targetAttach) {
      var _this6 = this;

      elementAttach = elementAttach || this.attachment;
      targetAttach = targetAttach || this.targetAttachment;
      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];

      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
        // updateAttachClasses can be called more than once in a position call, so
        // we need to clean up after ourselves such that when the last defer gets
        // ran it doesn't add any extra classes from previous calls.
        this._addAttachClasses.splice(0, this._addAttachClasses.length);
      }

      if (typeof this._addAttachClasses === 'undefined') {
        this._addAttachClasses = [];
      }
      var add = this._addAttachClasses;

      if (elementAttach.top) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.top);
      }
      if (elementAttach.left) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.left);
      }
      if (targetAttach.top) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.top);
      }
      if (targetAttach.left) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.left);
      }

      var all = [];
      sides.forEach(function (side) {
        all.push(_this6.getClass('element-attached') + '-' + side);
        all.push(_this6.getClass('target-attached') + '-' + side);
      });

      defer(function () {
        if (!(typeof _this6._addAttachClasses !== 'undefined')) {
          return;
        }

        updateClasses(_this6.element, _this6._addAttachClasses, all);
        if (!(_this6.options.addTargetClasses === false)) {
          updateClasses(_this6.target, _this6._addAttachClasses, all);
        }

        delete _this6._addAttachClasses;
      });
    }
  }, {
    key: 'position',
    value: function position() {
      var _this7 = this;

      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      // flushChanges commits the changes immediately, leave true unless you are positioning multiple
      // tethers (in which case call Tether.Utils.flush yourself when you're done)

      if (!this.enabled) {
        return;
      }

      this.clearCache();

      // Turn 'auto' attachments into the appropriate corner or edge
      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);

      this.updateAttachClasses(this.attachment, targetAttachment);

      var elementPos = this.cache('element-bounds', function () {
        return getBounds(_this7.element);
      });

      var width = elementPos.width;
      var height = elementPos.height;

      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
        var _lastSize = this.lastSize;

        // We cache the height and width to make it possible to position elements that are
        // getting hidden.
        width = _lastSize.width;
        height = _lastSize.height;
      } else {
        this.lastSize = { width: width, height: height };
      }

      var targetPos = this.cache('target-bounds', function () {
        return _this7.getTargetBounds();
      });
      var targetSize = targetPos;

      // Get an actual px offset from the attachment
      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });
      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);

      var manualOffset = offsetToPx(this.offset, { width: width, height: height });
      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);

      // Add the manually provided offset
      offset = addOffset(offset, manualOffset);
      targetOffset = addOffset(targetOffset, manualTargetOffset);

      // It's now our goal to make (element position + offset) == (target position + target offset)
      var left = targetPos.left + targetOffset.left - offset.left;
      var top = targetPos.top + targetOffset.top - offset.top;

      for (var i = 0; i < TetherBase.modules.length; ++i) {
        var _module2 = TetherBase.modules[i];
        var ret = _module2.position.call(this, {
          left: left,
          top: top,
          targetAttachment: targetAttachment,
          targetPos: targetPos,
          elementPos: elementPos,
          offset: offset,
          targetOffset: targetOffset,
          manualOffset: manualOffset,
          manualTargetOffset: manualTargetOffset,
          scrollbarSize: scrollbarSize,
          attachment: this.attachment
        });

        if (ret === false) {
          return false;
        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {
          continue;
        } else {
          top = ret.top;
          left = ret.left;
        }
      }

      // We describe the position three different ways to give the optimizer
      // a chance to decide the best possible way to position the element
      // with the fewest repaints.
      var next = {
        // It's position relative to the page (absolute positioning when
        // the element is a child of the body)
        page: {
          top: top,
          left: left
        },

        // It's position relative to the viewport (fixed positioning)
        viewport: {
          top: top - pageYOffset,
          bottom: pageYOffset - top - height + innerHeight,
          left: left - pageXOffset,
          right: pageXOffset - left - width + innerWidth
        }
      };

      var doc = this.target.ownerDocument;
      var win = doc.defaultView;

      var scrollbarSize = undefined;
      if (doc.body.scrollWidth > win.innerWidth) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.bottom -= scrollbarSize.height;
      }

      if (doc.body.scrollHeight > win.innerHeight) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.right -= scrollbarSize.width;
      }

      if (['', 'static'].indexOf(doc.body.style.position) === -1 || ['', 'static'].indexOf(doc.body.parentElement.style.position) === -1) {
        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
        next.page.bottom = doc.body.scrollHeight - top - height;
        next.page.right = doc.body.scrollWidth - left - width;
      }

      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {
        (function () {
          var offsetParent = _this7.cache('target-offsetparent', function () {
            return getOffsetParent(_this7.target);
          });
          var offsetPosition = _this7.cache('target-offsetparent-bounds', function () {
            return getBounds(offsetParent);
          });
          var offsetParentStyle = getComputedStyle(offsetParent);
          var offsetParentSize = offsetPosition;

          var offsetBorder = {};
          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);
          });

          offsetPosition.right = doc.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
          offsetPosition.bottom = doc.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;

          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {
            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {
              // We're within the visible part of the target's scroll parent
              var scrollTop = offsetParent.scrollTop;
              var scrollLeft = offsetParent.scrollLeft;

              // It's position relative to the target's offset parent (absolute positioning when
              // the element is moved to be a child of the target's offset parent).
              next.offset = {
                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
              };
            }
          }
        })();
      }

      // We could also travel up the DOM and try each containing context, rather than only
      // looking at the body, but we're gonna get diminishing returns.

      this.move(next);

      this.history.unshift(next);

      if (this.history.length > 3) {
        this.history.pop();
      }

      if (flushChanges) {
        flush();
      }

      return true;
    }

    // THE ISSUE
  }, {
    key: 'move',
    value: function move(pos) {
      var _this8 = this;

      if (!(typeof this.element.parentNode !== 'undefined')) {
        return;
      }

      var same = {};

      for (var type in pos) {
        same[type] = {};

        for (var key in pos[type]) {
          var found = false;

          for (var i = 0; i < this.history.length; ++i) {
            var point = this.history[i];
            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {
              found = true;
              break;
            }
          }

          if (!found) {
            same[type][key] = true;
          }
        }
      }

      var css = { top: '', left: '', right: '', bottom: '' };

      var transcribe = function transcribe(_same, _pos) {
        var hasOptimizations = typeof _this8.options.optimizations !== 'undefined';
        var gpu = hasOptimizations ? _this8.options.optimizations.gpu : null;
        if (gpu !== false) {
          var yPos = undefined,
              xPos = undefined;
          if (_same.top) {
            css.top = 0;
            yPos = _pos.top;
          } else {
            css.bottom = 0;
            yPos = -_pos.bottom;
          }

          if (_same.left) {
            css.left = 0;
            xPos = _pos.left;
          } else {
            css.right = 0;
            xPos = -_pos.right;
          }

          css[transformKey] = 'translateX(' + Math.round(xPos) + 'px) translateY(' + Math.round(yPos) + 'px)';

          if (transformKey !== 'msTransform') {
            // The Z transform will keep this in the GPU (faster, and prevents artifacts),
            // but IE9 doesn't support 3d transforms and will choke.
            css[transformKey] += " translateZ(0)";
          }
        } else {
          if (_same.top) {
            css.top = _pos.top + 'px';
          } else {
            css.bottom = _pos.bottom + 'px';
          }

          if (_same.left) {
            css.left = _pos.left + 'px';
          } else {
            css.right = _pos.right + 'px';
          }
        }
      };

      var moved = false;
      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
        css.position = 'absolute';
        transcribe(same.page, pos.page);
      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
        css.position = 'fixed';
        transcribe(same.viewport, pos.viewport);
      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
        (function () {
          css.position = 'absolute';
          var offsetParent = _this8.cache('target-offsetparent', function () {
            return getOffsetParent(_this8.target);
          });

          if (getOffsetParent(_this8.element) !== offsetParent) {
            defer(function () {
              _this8.element.parentNode.removeChild(_this8.element);
              offsetParent.appendChild(_this8.element);
            });
          }

          transcribe(same.offset, pos.offset);
          moved = true;
        })();
      } else {
        css.position = 'absolute';
        transcribe({ top: true, left: true }, pos.page);
      }

      if (!moved) {
        var offsetParentIsBody = true;
        var currentNode = this.element.parentNode;
        while (currentNode && currentNode.nodeType === 1 && currentNode.tagName !== 'BODY') {
          if (getComputedStyle(currentNode).position !== 'static') {
            offsetParentIsBody = false;
            break;
          }

          currentNode = currentNode.parentNode;
        }

        if (!offsetParentIsBody) {
          this.element.parentNode.removeChild(this.element);
          this.element.ownerDocument.body.appendChild(this.element);
        }
      }

      // Any css change will trigger a repaint, so let's avoid one if nothing changed
      var writeCSS = {};
      var write = false;
      for (var key in css) {
        var val = css[key];
        var elVal = this.element.style[key];

        if (elVal !== val) {
          write = true;
          writeCSS[key] = val;
        }
      }

      if (write) {
        defer(function () {
          extend(_this8.element.style, writeCSS);
          _this8.trigger('repositioned');
        });
      }
    }
  }]);

  return TetherClass;
})(Evented);

TetherClass.modules = [];

TetherBase.position = position;

var Tether = extend(TetherClass, TetherBase);
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var extend = _TetherBase$Utils.extend;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];

function getBoundingRect(tether, to) {
  if (to === 'scrollParent') {
    to = tether.scrollParents[0];
  } else if (to === 'window') {
    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
  }

  if (to === document) {
    to = to.documentElement;
  }

  if (typeof to.nodeType !== 'undefined') {
    (function () {
      var node = to;
      var size = getBounds(to);
      var pos = size;
      var style = getComputedStyle(to);

      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];

      // Account any parent Frames scroll offset
      if (node.ownerDocument !== document) {
        var win = node.ownerDocument.defaultView;
        to[0] += win.pageXOffset;
        to[1] += win.pageYOffset;
        to[2] += win.pageXOffset;
        to[3] += win.pageYOffset;
      }

      BOUNDS_FORMAT.forEach(function (side, i) {
        side = side[0].toUpperCase() + side.substr(1);
        if (side === 'Top' || side === 'Left') {
          to[i] += parseFloat(style['border' + side + 'Width']);
        } else {
          to[i] -= parseFloat(style['border' + side + 'Width']);
        }
      });
    })();
  }

  return to;
}

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;
    var targetAttachment = _ref.targetAttachment;

    if (!this.options.constraints) {
      return true;
    }

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
      var _lastSize = this.lastSize;

      // Handle the item getting hidden as a result of our positioning without glitching
      // the classes in and out
      width = _lastSize.width;
      height = _lastSize.height;
    }

    var targetSize = this.cache('target-bounds', function () {
      return _this.getTargetBounds();
    });

    var targetHeight = targetSize.height;
    var targetWidth = targetSize.width;

    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];

    this.options.constraints.forEach(function (constraint) {
      var outOfBoundsClass = constraint.outOfBoundsClass;
      var pinnedClass = constraint.pinnedClass;

      if (outOfBoundsClass) {
        allClasses.push(outOfBoundsClass);
      }
      if (pinnedClass) {
        allClasses.push(pinnedClass);
      }
    });

    allClasses.forEach(function (cls) {
      ['left', 'top', 'right', 'bottom'].forEach(function (side) {
        allClasses.push(cls + '-' + side);
      });
    });

    var addClasses = [];

    var tAttachment = extend({}, targetAttachment);
    var eAttachment = extend({}, this.attachment);

    this.options.constraints.forEach(function (constraint) {
      var to = constraint.to;
      var attachment = constraint.attachment;
      var pin = constraint.pin;

      if (typeof attachment === 'undefined') {
        attachment = '';
      }

      var changeAttachX = undefined,
          changeAttachY = undefined;
      if (attachment.indexOf(' ') >= 0) {
        var _attachment$split = attachment.split(' ');

        var _attachment$split2 = _slicedToArray(_attachment$split, 2);

        changeAttachY = _attachment$split2[0];
        changeAttachX = _attachment$split2[1];
      } else {
        changeAttachX = changeAttachY = attachment;
      }

      var bounds = getBoundingRect(_this, to);

      if (changeAttachY === 'target' || changeAttachY === 'both') {
        if (top < bounds[1] && tAttachment.top === 'top') {
          top += targetHeight;
          tAttachment.top = 'bottom';
        }

        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
          top -= targetHeight;
          tAttachment.top = 'top';
        }
      }

      if (changeAttachY === 'together') {
        if (tAttachment.top === 'top') {
          if (eAttachment.top === 'bottom' && top < bounds[1]) {
            top += targetHeight;
            tAttachment.top = 'bottom';

            top += height;
            eAttachment.top = 'top';
          } else if (eAttachment.top === 'top' && top + height > bounds[3] && top - (height - targetHeight) >= bounds[1]) {
            top -= height - targetHeight;
            tAttachment.top = 'bottom';

            eAttachment.top = 'bottom';
          }
        }

        if (tAttachment.top === 'bottom') {
          if (eAttachment.top === 'top' && top + height > bounds[3]) {
            top -= targetHeight;
            tAttachment.top = 'top';

            top -= height;
            eAttachment.top = 'bottom';
          } else if (eAttachment.top === 'bottom' && top < bounds[1] && top + (height * 2 - targetHeight) <= bounds[3]) {
            top += height - targetHeight;
            tAttachment.top = 'top';

            eAttachment.top = 'top';
          }
        }

        if (tAttachment.top === 'middle') {
          if (top + height > bounds[3] && eAttachment.top === 'top') {
            top -= height;
            eAttachment.top = 'bottom';
          } else if (top < bounds[1] && eAttachment.top === 'bottom') {
            top += height;
            eAttachment.top = 'top';
          }
        }
      }

      if (changeAttachX === 'target' || changeAttachX === 'both') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          left += targetWidth;
          tAttachment.left = 'right';
        }

        if (left + width > bounds[2] && tAttachment.left === 'right') {
          left -= targetWidth;
          tAttachment.left = 'left';
        }
      }

      if (changeAttachX === 'together') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          if (eAttachment.left === 'right') {
            left += targetWidth;
            tAttachment.left = 'right';

            left += width;
            eAttachment.left = 'left';
          } else if (eAttachment.left === 'left') {
            left += targetWidth;
            tAttachment.left = 'right';

            left -= width;
            eAttachment.left = 'right';
          }
        } else if (left + width > bounds[2] && tAttachment.left === 'right') {
          if (eAttachment.left === 'left') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left -= width;
            eAttachment.left = 'right';
          } else if (eAttachment.left === 'right') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left += width;
            eAttachment.left = 'left';
          }
        } else if (tAttachment.left === 'center') {
          if (left + width > bounds[2] && eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          } else if (left < bounds[0] && eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          }
        }
      }

      if (changeAttachY === 'element' || changeAttachY === 'both') {
        if (top < bounds[1] && eAttachment.top === 'bottom') {
          top += height;
          eAttachment.top = 'top';
        }

        if (top + height > bounds[3] && eAttachment.top === 'top') {
          top -= height;
          eAttachment.top = 'bottom';
        }
      }

      if (changeAttachX === 'element' || changeAttachX === 'both') {
        if (left < bounds[0]) {
          if (eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          } else if (eAttachment.left === 'center') {
            left += width / 2;
            eAttachment.left = 'left';
          }
        }

        if (left + width > bounds[2]) {
          if (eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          } else if (eAttachment.left === 'center') {
            left -= width / 2;
            eAttachment.left = 'right';
          }
        }
      }

      if (typeof pin === 'string') {
        pin = pin.split(',').map(function (p) {
          return p.trim();
        });
      } else if (pin === true) {
        pin = ['top', 'left', 'right', 'bottom'];
      }

      pin = pin || [];

      var pinned = [];
      var oob = [];

      if (top < bounds[1]) {
        if (pin.indexOf('top') >= 0) {
          top = bounds[1];
          pinned.push('top');
        } else {
          oob.push('top');
        }
      }

      if (top + height > bounds[3]) {
        if (pin.indexOf('bottom') >= 0) {
          top = bounds[3] - height;
          pinned.push('bottom');
        } else {
          oob.push('bottom');
        }
      }

      if (left < bounds[0]) {
        if (pin.indexOf('left') >= 0) {
          left = bounds[0];
          pinned.push('left');
        } else {
          oob.push('left');
        }
      }

      if (left + width > bounds[2]) {
        if (pin.indexOf('right') >= 0) {
          left = bounds[2] - width;
          pinned.push('right');
        } else {
          oob.push('right');
        }
      }

      if (pinned.length) {
        (function () {
          var pinnedClass = undefined;
          if (typeof _this.options.pinnedClass !== 'undefined') {
            pinnedClass = _this.options.pinnedClass;
          } else {
            pinnedClass = _this.getClass('pinned');
          }

          addClasses.push(pinnedClass);
          pinned.forEach(function (side) {
            addClasses.push(pinnedClass + '-' + side);
          });
        })();
      }

      if (oob.length) {
        (function () {
          var oobClass = undefined;
          if (typeof _this.options.outOfBoundsClass !== 'undefined') {
            oobClass = _this.options.outOfBoundsClass;
          } else {
            oobClass = _this.getClass('out-of-bounds');
          }

          addClasses.push(oobClass);
          oob.forEach(function (side) {
            addClasses.push(oobClass + '-' + side);
          });
        })();
      }

      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {
        eAttachment.left = tAttachment.left = false;
      }
      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {
        eAttachment.top = tAttachment.top = false;
      }

      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {
        _this.updateAttachClasses(eAttachment, tAttachment);
        _this.trigger('update', {
          attachment: eAttachment,
          targetAttachment: tAttachment
        });
      }
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return { top: top, left: left };
  }
});
/* globals TetherBase */

'use strict';

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    var targetPos = this.getTargetBounds();

    var bottom = top + height;
    var right = left + width;

    var abutted = [];
    if (top <= targetPos.bottom && bottom >= targetPos.top) {
      ['left', 'right'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === left || targetPosSide === right) {
          abutted.push(side);
        }
      });
    }

    if (left <= targetPos.right && right >= targetPos.left) {
      ['top', 'bottom'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === top || targetPosSide === bottom) {
          abutted.push(side);
        }
      });
    }

    var allClasses = [];
    var addClasses = [];

    var sides = ['left', 'top', 'right', 'bottom'];
    allClasses.push(this.getClass('abutted'));
    sides.forEach(function (side) {
      allClasses.push(_this.getClass('abutted') + '-' + side);
    });

    if (abutted.length) {
      addClasses.push(this.getClass('abutted'));
    }

    abutted.forEach(function (side) {
      addClasses.push(_this.getClass('abutted') + '-' + side);
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return true;
  }
});
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

TetherBase.modules.push({
  position: function position(_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (!this.options.shift) {
      return;
    }

    var shift = this.options.shift;
    if (typeof this.options.shift === 'function') {
      shift = this.options.shift.call(this, { top: top, left: left });
    }

    var shiftTop = undefined,
        shiftLeft = undefined;
    if (typeof shift === 'string') {
      shift = shift.split(' ');
      shift[1] = shift[1] || shift[0];

      var _shift = shift;

      var _shift2 = _slicedToArray(_shift, 2);

      shiftTop = _shift2[0];
      shiftLeft = _shift2[1];

      shiftTop = parseFloat(shiftTop, 10);
      shiftLeft = parseFloat(shiftLeft, 10);
    } else {
      shiftTop = shift.top;
      shiftLeft = shift.left;
    }

    top += shiftTop;
    left += shiftLeft;

    return { top: top, left: left };
  }
});
return Tether;

}));

},{}],25:[function(require,module,exports){
var Vue // late bind
var map = Object.create(null)
var shimmed = false
var isBrowserify = false

/**
 * Determine compatibility and apply patch.
 *
 * @param {Function} vue
 * @param {Boolean} browserify
 */

exports.install = function (vue, browserify) {
  if (shimmed) return
  shimmed = true

  Vue = vue
  isBrowserify = browserify

  exports.compatible = !!Vue.internalDirectives
  if (!exports.compatible) {
    console.warn(
      '[HMR] vue-loader hot reload is only compatible with ' +
      'Vue.js 1.0.0+.'
    )
    return
  }

  // patch view directive
  patchView(Vue.internalDirectives.component)
  console.log('[HMR] Vue component hot reload shim applied.')
  // shim router-view if present
  var routerView = Vue.elementDirective('router-view')
  if (routerView) {
    patchView(routerView)
    console.log('[HMR] vue-router <router-view> hot reload shim applied.')
  }
}

/**
 * Shim the view directive (component or router-view).
 *
 * @param {Object} View
 */

function patchView (View) {
  var unbuild = View.unbuild
  View.unbuild = function (defer) {
    if (!this.hotUpdating) {
      var prevComponent = this.childVM && this.childVM.constructor
      removeView(prevComponent, this)
      // defer = true means we are transitioning to a new
      // Component. Register this new component to the list.
      if (defer) {
        addView(this.Component, this)
      }
    }
    // call original
    return unbuild.call(this, defer)
  }
}

/**
 * Add a component view to a Component's hot list
 *
 * @param {Function} Component
 * @param {Directive} view - view directive instance
 */

function addView (Component, view) {
  var id = Component && Component.options.hotID
  if (id) {
    if (!map[id]) {
      map[id] = {
        Component: Component,
        views: [],
        instances: []
      }
    }
    map[id].views.push(view)
  }
}

/**
 * Remove a component view from a Component's hot list
 *
 * @param {Function} Component
 * @param {Directive} view - view directive instance
 */

function removeView (Component, view) {
  var id = Component && Component.options.hotID
  if (id) {
    map[id].views.$remove(view)
  }
}

/**
 * Create a record for a hot module, which keeps track of its construcotr,
 * instnaces and views (component directives or router-views).
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  if (typeof options === 'function') {
    options = options.options
  }
  if (typeof options.el !== 'string' && typeof options.data !== 'object') {
    makeOptionsHot(id, options)
    map[id] = {
      Component: null,
      views: [],
      instances: []
    }
  }
}

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot (id, options) {
  options.hotID = id
  injectHook(options, 'created', function () {
    var record = map[id]
    if (!record.Component) {
      record.Component = this.constructor
    }
    record.instances.push(this)
  })
  injectHook(options, 'beforeDestroy', function () {
    map[id].instances.$remove(this)
  })
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook (options, name, hook) {
  var existing = options[name]
  options[name] = existing
    ? Array.isArray(existing)
      ? existing.concat(hook)
      : [existing, hook]
    : [hook]
}

/**
 * Update a hot component.
 *
 * @param {String} id
 * @param {Object|null} newOptions
 * @param {String|null} newTemplate
 */

exports.update = function (id, newOptions, newTemplate) {
  var record = map[id]
  // force full-reload if an instance of the component is active but is not
  // managed by a view
  if (!record || (record.instances.length && !record.views.length)) {
    console.log('[HMR] Root or manually-mounted instance modified. Full reload may be required.')
    if (!isBrowserify) {
      window.location.reload()
    } else {
      // browserify-hmr somehow sends incomplete bundle if we reload here
      return
    }
  }
  if (!isBrowserify) {
    // browserify-hmr already logs this
    console.log('[HMR] Updating component: ' + format(id))
  }
  var Component = record.Component
  // update constructor
  if (newOptions) {
    // in case the user exports a constructor
    Component = record.Component = typeof newOptions === 'function'
      ? newOptions
      : Vue.extend(newOptions)
    makeOptionsHot(id, Component.options)
  }
  if (newTemplate) {
    Component.options.template = newTemplate
  }
  // handle recursive lookup
  if (Component.options.name) {
    Component.options.components[Component.options.name] = Component
  }
  // reset constructor cached linker
  Component.linker = null
  // reload all views
  record.views.forEach(function (view) {
    updateView(view, Component)
  })
  // flush devtools
  if (window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {
    window.__VUE_DEVTOOLS_GLOBAL_HOOK__.emit('flush')
  }
}

/**
 * Update a component view instance
 *
 * @param {Directive} view
 * @param {Function} Component
 */

function updateView (view, Component) {
  if (!view._bound) {
    return
  }
  view.Component = Component
  view.hotUpdating = true
  // disable transitions
  view.vm._isCompiled = false
  // save state
  var state = extractState(view.childVM)
  // remount, make sure to disable keep-alive
  var keepAlive = view.keepAlive
  view.keepAlive = false
  view.mountComponent()
  view.keepAlive = keepAlive
  // restore state
  restoreState(view.childVM, state, true)
  // re-eanble transitions
  view.vm._isCompiled = true
  view.hotUpdating = false
}

/**
 * Extract state from a Vue instance.
 *
 * @param {Vue} vm
 * @return {Object}
 */

function extractState (vm) {
  return {
    cid: vm.constructor.cid,
    data: vm.$data,
    children: vm.$children.map(extractState)
  }
}

/**
 * Restore state to a reloaded Vue instance.
 *
 * @param {Vue} vm
 * @param {Object} state
 */

function restoreState (vm, state, isRoot) {
  var oldAsyncConfig
  if (isRoot) {
    // set Vue into sync mode during state rehydration
    oldAsyncConfig = Vue.config.async
    Vue.config.async = false
  }
  // actual restore
  if (isRoot || !vm._props) {
    vm.$data = state.data
  } else {
    Object.keys(state.data).forEach(function (key) {
      if (!vm._props[key]) {
        // for non-root, only restore non-props fields
        vm.$data[key] = state.data[key]
      }
    })
  }
  // verify child consistency
  var hasSameChildren = vm.$children.every(function (c, i) {
    return state.children[i] && state.children[i].cid === c.constructor.cid
  })
  if (hasSameChildren) {
    // rehydrate children
    vm.$children.forEach(function (c, i) {
      restoreState(c, state.children[i])
    })
  }
  if (isRoot) {
    Vue.config.async = oldAsyncConfig
  }
}

function format (id) {
  var match = id.match(/[^\/]+\.vue$/)
  return match ? match[0] : id
}

},{}],26:[function(require,module,exports){
var moment = require('moment');

module.exports = {
	install: function (Vue, options) {
		Object.defineProperties(Vue.prototype, {
			$moment: {
				get: function() {
					return Vue.moment.bind(this);
				},
			},
		});

		if (options && options.moment) {
			moment = options.moment
		}

		Vue.moment = function(data) {
			return moment(data);
		}

		Vue.filter('moment', function() {
			var args = Array.prototype.slice.call(arguments),
				value = args.shift(),
				date = moment(value);

			if (!date.isValid()) return '';

			function parse() {
				var args = Array.prototype.slice.call(arguments).map(function(str) { return str.replace(/^("|')|("|')$/g, ''); }),
					method = args.shift();

				switch (method) {
					case 'add':

						// Mutates the original moment by adding time.
						// http://momentjs.com/docs/#/manipulating/add/

						var addends = args.shift()
										  .split(',')
										  .map(Function.prototype.call, String.prototype.trim);
						obj = {};
						for (var n = 0; n < addends.length; n++) {
							var addend = addends[n].split(' ');
							obj[addend[1]] = addend[0];
						}
						date = date.add(obj);
						break;

					case 'subtract':

						// Mutates the original moment by subtracting time.
						// http://momentjs.com/docs/#/manipulating/subtract/

						var subtrahends = args.shift()
										  .split(',')
										  .map(Function.prototype.call, String.prototype.trim);
						obj = {};
						for (var n = 0; n < subtrahends.length; n++) {
							var subtrahend = subtrahends[n].split(' ');
							obj[subtrahend[1]] = subtrahend[0];
						}
						date = date.subtract(obj);
						break;

					case 'from':

						// Display a moment in relative time, either from now or from a specified date.
						// http://momentjs.com/docs/#/displaying/fromnow/

						var from = 'now';
						if (args[0] == 'now') args.shift();

						if (moment(args[0]).isValid()) {
							// If valid, assume it is a date we want the output computed against.
							from = moment(args.shift());
						}

						var removeSuffix = false;
						if (args[0] == 'true') {
							args.shift();
							var removeSuffix = true;
						}

						if (from != 'now') {
							date = date.from(from, removeSuffix);
							break;
						}

						date = date.fromNow(removeSuffix);
						break;

					case 'calendar':

						// Formats a date with different strings depending on how close to a certain date (today by default) the date is.
						// http://momentjs.com/docs/#/displaying/calendar-time/

						var referenceTime = moment();

						if (moment(args[0]).isValid()) {
							// If valid, assume it is a date we want the output computed against.
							referenceTime = moment(args.shift());
						}

						date = date.calendar(referenceTime);
						break;

					default:
						// Format
						// Formats a date by taking a string of tokens and replacing them with their corresponding values.
						// http://momentjs.com/docs/#/displaying/format/

						var format = method;
						date = date.format(format);
				}

				if (args.length) parse.apply(parse, args);
			}

			parse.apply(parse, args);


			return date;
		});
	},
};

},{"moment":21}],27:[function(require,module,exports){
/*!
 * vue-resource v0.7.4
 * https://github.com/vuejs/vue-resource
 * Released under the MIT License.
 */

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
};

/**
 * Utility functions.
 */

var util = {};
var config = {};
var array = [];
var console = window.console;
function Util (Vue) {
    util = Vue.util;
    config = Vue.config;
}

var isArray = Array.isArray;

function warn(msg) {
    if (console && util.warn && (!config.silent || config.debug)) {
        console.warn('[VueResource warn]: ' + msg);
    }
}

function error(msg) {
    if (console) {
        console.error(msg);
    }
}

function nextTick(cb, ctx) {
    return util.nextTick(cb, ctx);
}

function trim(str) {
    return str.replace(/^\s*|\s*$/g, '');
}

function toLower(str) {
    return str ? str.toLowerCase() : '';
}

function isString(val) {
    return typeof val === 'string';
}

function isFunction(val) {
    return typeof val === 'function';
}

function isObject(obj) {
    return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
}

function isPlainObject(obj) {
    return isObject(obj) && Object.getPrototypeOf(obj) == Object.prototype;
}

function options(fn, obj, opts) {

    opts = opts || {};

    if (isFunction(opts)) {
        opts = opts.call(obj);
    }

    return merge(fn.bind({ $vm: obj, $options: opts }), fn, { $options: opts });
}

function each(obj, iterator) {

    var i, key;

    if (typeof obj.length == 'number') {
        for (i = 0; i < obj.length; i++) {
            iterator.call(obj[i], obj[i], i);
        }
    } else if (isObject(obj)) {
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                iterator.call(obj[key], obj[key], key);
            }
        }
    }

    return obj;
}

function extend(target) {

    var args = array.slice.call(arguments, 1);

    args.forEach(function (arg) {
        _merge(target, arg);
    });

    return target;
}

function merge(target) {

    var args = array.slice.call(arguments, 1);

    args.forEach(function (arg) {
        _merge(target, arg, true);
    });

    return target;
}

function _merge(target, source, deep) {
    for (var key in source) {
        if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
            if (isPlainObject(source[key]) && !isPlainObject(target[key])) {
                target[key] = {};
            }
            if (isArray(source[key]) && !isArray(target[key])) {
                target[key] = [];
            }
            _merge(target[key], source[key], deep);
        } else if (source[key] !== undefined) {
            target[key] = source[key];
        }
    }
}

function root (options, next) {

    var url = next(options);

    if (isString(options.root) && !url.match(/^(https?:)?\//)) {
        url = options.root + '/' + url;
    }

    return url;
}

function query (options, next) {

    var urlParams = Object.keys(Url.options.params),
        query = {},
        url = next(options);

    each(options.params, function (value, key) {
        if (urlParams.indexOf(key) === -1) {
            query[key] = value;
        }
    });

    query = Url.params(query);

    if (query) {
        url += (url.indexOf('?') == -1 ? '?' : '&') + query;
    }

    return url;
}

function legacy (options, next) {

    var variables = [],
        url = next(options);

    url = url.replace(/(\/?):([a-z]\w*)/gi, function (match, slash, name) {

        warn('The `:' + name + '` parameter syntax has been deprecated. Use the `{' + name + '}` syntax instead.');

        if (options.params[name]) {
            variables.push(name);
            return slash + encodeUriSegment(options.params[name]);
        }

        return '';
    });

    variables.forEach(function (key) {
        delete options.params[key];
    });

    return url;
}

function encodeUriSegment(value) {

    return encodeUriQuery(value, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
}

function encodeUriQuery(value, spaces) {

    return encodeURIComponent(value).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, spaces ? '%20' : '+');
}

/**
 * URL Template v2.0.6 (https://github.com/bramstein/url-template)
 */

function expand(url, params, variables) {

    var tmpl = parse(url),
        expanded = tmpl.expand(params);

    if (variables) {
        variables.push.apply(variables, tmpl.vars);
    }

    return expanded;
}

function parse(template) {

    var operators = ['+', '#', '.', '/', ';', '?', '&'],
        variables = [];

    return {
        vars: variables,
        expand: function expand(context) {
            return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
                if (expression) {

                    var operator = null,
                        values = [];

                    if (operators.indexOf(expression.charAt(0)) !== -1) {
                        operator = expression.charAt(0);
                        expression = expression.substr(1);
                    }

                    expression.split(/,/g).forEach(function (variable) {
                        var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
                        values.push.apply(values, getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
                        variables.push(tmp[1]);
                    });

                    if (operator && operator !== '+') {

                        var separator = ',';

                        if (operator === '?') {
                            separator = '&';
                        } else if (operator !== '#') {
                            separator = operator;
                        }

                        return (values.length !== 0 ? operator : '') + values.join(separator);
                    } else {
                        return values.join(',');
                    }
                } else {
                    return encodeReserved(literal);
                }
            });
        }
    };
}

function getValues(context, operator, key, modifier) {

    var value = context[key],
        result = [];

    if (isDefined(value) && value !== '') {
        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
            value = value.toString();

            if (modifier && modifier !== '*') {
                value = value.substring(0, parseInt(modifier, 10));
            }

            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));
        } else {
            if (modifier === '*') {
                if (Array.isArray(value)) {
                    value.filter(isDefined).forEach(function (value) {
                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));
                    });
                } else {
                    Object.keys(value).forEach(function (k) {
                        if (isDefined(value[k])) {
                            result.push(encodeValue(operator, value[k], k));
                        }
                    });
                }
            } else {
                var tmp = [];

                if (Array.isArray(value)) {
                    value.filter(isDefined).forEach(function (value) {
                        tmp.push(encodeValue(operator, value));
                    });
                } else {
                    Object.keys(value).forEach(function (k) {
                        if (isDefined(value[k])) {
                            tmp.push(encodeURIComponent(k));
                            tmp.push(encodeValue(operator, value[k].toString()));
                        }
                    });
                }

                if (isKeyOperator(operator)) {
                    result.push(encodeURIComponent(key) + '=' + tmp.join(','));
                } else if (tmp.length !== 0) {
                    result.push(tmp.join(','));
                }
            }
        }
    } else {
        if (operator === ';') {
            result.push(encodeURIComponent(key));
        } else if (value === '' && (operator === '&' || operator === '?')) {
            result.push(encodeURIComponent(key) + '=');
        } else if (value === '') {
            result.push('');
        }
    }

    return result;
}

function isDefined(value) {
    return value !== undefined && value !== null;
}

function isKeyOperator(operator) {
    return operator === ';' || operator === '&' || operator === '?';
}

function encodeValue(operator, value, key) {

    value = operator === '+' || operator === '#' ? encodeReserved(value) : encodeURIComponent(value);

    if (key) {
        return encodeURIComponent(key) + '=' + value;
    } else {
        return value;
    }
}

function encodeReserved(str) {
    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
            part = encodeURI(part);
        }
        return part;
    }).join('');
}

function template (options) {

    var variables = [],
        url = expand(options.url, options.params, variables);

    variables.forEach(function (key) {
        delete options.params[key];
    });

    return url;
}

/**
 * Service for URL templating.
 */

var ie = document.documentMode;
var el = document.createElement('a');

function Url(url, params) {

    var self = this || {},
        options = url,
        transform;

    if (isString(url)) {
        options = { url: url, params: params };
    }

    options = merge({}, Url.options, self.$options, options);

    Url.transforms.forEach(function (handler) {
        transform = factory(handler, transform, self.$vm);
    });

    return transform(options);
}

/**
 * Url options.
 */

Url.options = {
    url: '',
    root: null,
    params: {}
};

/**
 * Url transforms.
 */

Url.transforms = [template, legacy, query, root];

/**
 * Encodes a Url parameter string.
 *
 * @param {Object} obj
 */

Url.params = function (obj) {

    var params = [],
        escape = encodeURIComponent;

    params.add = function (key, value) {

        if (isFunction(value)) {
            value = value();
        }

        if (value === null) {
            value = '';
        }

        this.push(escape(key) + '=' + escape(value));
    };

    serialize(params, obj);

    return params.join('&').replace(/%20/g, '+');
};

/**
 * Parse a URL and return its components.
 *
 * @param {String} url
 */

Url.parse = function (url) {

    if (ie) {
        el.href = url;
        url = el.href;
    }

    el.href = url;

    return {
        href: el.href,
        protocol: el.protocol ? el.protocol.replace(/:$/, '') : '',
        port: el.port,
        host: el.host,
        hostname: el.hostname,
        pathname: el.pathname.charAt(0) === '/' ? el.pathname : '/' + el.pathname,
        search: el.search ? el.search.replace(/^\?/, '') : '',
        hash: el.hash ? el.hash.replace(/^#/, '') : ''
    };
};

function factory(handler, next, vm) {
    return function (options) {
        return handler.call(vm, options, next);
    };
}

function serialize(params, obj, scope) {

    var array = isArray(obj),
        plain = isPlainObject(obj),
        hash;

    each(obj, function (value, key) {

        hash = isObject(value) || isArray(value);

        if (scope) {
            key = scope + '[' + (plain || hash ? key : '') + ']';
        }

        if (!scope && array) {
            params.add(value.name, value.value);
        } else if (hash) {
            serialize(params, value, key);
        } else {
            params.add(key, value);
        }
    });
}

/**
 * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)
 */

var RESOLVED = 0;
var REJECTED = 1;
var PENDING = 2;

function Promise$2(executor) {

    this.state = PENDING;
    this.value = undefined;
    this.deferred = [];

    var promise = this;

    try {
        executor(function (x) {
            promise.resolve(x);
        }, function (r) {
            promise.reject(r);
        });
    } catch (e) {
        promise.reject(e);
    }
}

Promise$2.reject = function (r) {
    return new Promise$2(function (resolve, reject) {
        reject(r);
    });
};

Promise$2.resolve = function (x) {
    return new Promise$2(function (resolve, reject) {
        resolve(x);
    });
};

Promise$2.all = function all(iterable) {
    return new Promise$2(function (resolve, reject) {
        var count = 0,
            result = [];

        if (iterable.length === 0) {
            resolve(result);
        }

        function resolver(i) {
            return function (x) {
                result[i] = x;
                count += 1;

                if (count === iterable.length) {
                    resolve(result);
                }
            };
        }

        for (var i = 0; i < iterable.length; i += 1) {
            Promise$2.resolve(iterable[i]).then(resolver(i), reject);
        }
    });
};

Promise$2.race = function race(iterable) {
    return new Promise$2(function (resolve, reject) {
        for (var i = 0; i < iterable.length; i += 1) {
            Promise$2.resolve(iterable[i]).then(resolve, reject);
        }
    });
};

var p$1 = Promise$2.prototype;

p$1.resolve = function resolve(x) {
    var promise = this;

    if (promise.state === PENDING) {
        if (x === promise) {
            throw new TypeError('Promise settled with itself.');
        }

        var called = false;

        try {
            var then = x && x['then'];

            if (x !== null && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && typeof then === 'function') {
                then.call(x, function (x) {
                    if (!called) {
                        promise.resolve(x);
                    }
                    called = true;
                }, function (r) {
                    if (!called) {
                        promise.reject(r);
                    }
                    called = true;
                });
                return;
            }
        } catch (e) {
            if (!called) {
                promise.reject(e);
            }
            return;
        }

        promise.state = RESOLVED;
        promise.value = x;
        promise.notify();
    }
};

p$1.reject = function reject(reason) {
    var promise = this;

    if (promise.state === PENDING) {
        if (reason === promise) {
            throw new TypeError('Promise settled with itself.');
        }

        promise.state = REJECTED;
        promise.value = reason;
        promise.notify();
    }
};

p$1.notify = function notify() {
    var promise = this;

    nextTick(function () {
        if (promise.state !== PENDING) {
            while (promise.deferred.length) {
                var deferred = promise.deferred.shift(),
                    onResolved = deferred[0],
                    onRejected = deferred[1],
                    resolve = deferred[2],
                    reject = deferred[3];

                try {
                    if (promise.state === RESOLVED) {
                        if (typeof onResolved === 'function') {
                            resolve(onResolved.call(undefined, promise.value));
                        } else {
                            resolve(promise.value);
                        }
                    } else if (promise.state === REJECTED) {
                        if (typeof onRejected === 'function') {
                            resolve(onRejected.call(undefined, promise.value));
                        } else {
                            reject(promise.value);
                        }
                    }
                } catch (e) {
                    reject(e);
                }
            }
        }
    });
};

p$1.then = function then(onResolved, onRejected) {
    var promise = this;

    return new Promise$2(function (resolve, reject) {
        promise.deferred.push([onResolved, onRejected, resolve, reject]);
        promise.notify();
    });
};

p$1.catch = function (onRejected) {
    return this.then(undefined, onRejected);
};

var PromiseObj = window.Promise || Promise$2;

function Promise$1(executor, context) {

    if (executor instanceof PromiseObj) {
        this.promise = executor;
    } else {
        this.promise = new PromiseObj(executor.bind(context));
    }

    this.context = context;
}

Promise$1.all = function (iterable, context) {
    return new Promise$1(PromiseObj.all(iterable), context);
};

Promise$1.resolve = function (value, context) {
    return new Promise$1(PromiseObj.resolve(value), context);
};

Promise$1.reject = function (reason, context) {
    return new Promise$1(PromiseObj.reject(reason), context);
};

Promise$1.race = function (iterable, context) {
    return new Promise$1(PromiseObj.race(iterable), context);
};

var p = Promise$1.prototype;

p.bind = function (context) {
    this.context = context;
    return this;
};

p.then = function (fulfilled, rejected) {

    if (fulfilled && fulfilled.bind && this.context) {
        fulfilled = fulfilled.bind(this.context);
    }

    if (rejected && rejected.bind && this.context) {
        rejected = rejected.bind(this.context);
    }

    this.promise = this.promise.then(fulfilled, rejected);

    return this;
};

p.catch = function (rejected) {

    if (rejected && rejected.bind && this.context) {
        rejected = rejected.bind(this.context);
    }

    this.promise = this.promise.catch(rejected);

    return this;
};

p.finally = function (callback) {

    return this.then(function (value) {
        callback.call(this);
        return value;
    }, function (reason) {
        callback.call(this);
        return PromiseObj.reject(reason);
    });
};

p.success = function (callback) {

    warn('The `success` method has been deprecated. Use the `then` method instead.');

    return this.then(function (response) {
        return callback.call(this, response.data, response.status, response) || response;
    });
};

p.error = function (callback) {

    warn('The `error` method has been deprecated. Use the `catch` method instead.');

    return this.catch(function (response) {
        return callback.call(this, response.data, response.status, response) || response;
    });
};

p.always = function (callback) {

    warn('The `always` method has been deprecated. Use the `finally` method instead.');

    var cb = function cb(response) {
        return callback.call(this, response.data, response.status, response) || response;
    };

    return this.then(cb, cb);
};

function xdrClient (request) {
    return new Promise$1(function (resolve) {

        var xdr = new XDomainRequest(),
            response = { request: request },
            handler;

        request.cancel = function () {
            xdr.abort();
        };

        xdr.open(request.method, Url(request), true);

        handler = function handler(event) {

            response.data = xdr.responseText;
            response.status = xdr.status;
            response.statusText = xdr.statusText || '';

            resolve(response);
        };

        xdr.timeout = 0;
        xdr.onload = handler;
        xdr.onabort = handler;
        xdr.onerror = handler;
        xdr.ontimeout = function () {};
        xdr.onprogress = function () {};

        xdr.send(request.data);
    });
}

var originUrl = Url.parse(location.href);
var supportCors = 'withCredentials' in new XMLHttpRequest();

var exports$1 = {
    request: function request(_request) {

        if (_request.crossOrigin === null) {
            _request.crossOrigin = crossOrigin(_request);
        }

        if (_request.crossOrigin) {

            if (!supportCors) {
                _request.client = xdrClient;
            }

            _request.emulateHTTP = false;
        }

        return _request;
    }
};

function crossOrigin(request) {

    var requestUrl = Url.parse(Url(request));

    return requestUrl.protocol !== originUrl.protocol || requestUrl.host !== originUrl.host;
}

var exports$2 = {
    request: function request(_request) {

        if (_request.emulateJSON && isPlainObject(_request.data)) {
            _request.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            _request.data = Url.params(_request.data);
        }

        if (isObject(_request.data) && /FormData/i.test(_request.data.toString())) {
            delete _request.headers['Content-Type'];
        }

        if (isPlainObject(_request.data)) {
            _request.data = JSON.stringify(_request.data);
        }

        return _request;
    },
    response: function response(_response) {

        try {
            _response.data = JSON.parse(_response.data);
        } catch (e) {}

        return _response;
    }
};

function jsonpClient (request) {
    return new Promise$1(function (resolve) {

        var callback = '_jsonp' + Math.random().toString(36).substr(2),
            response = { request: request, data: null },
            handler,
            script;

        request.params[request.jsonp] = callback;
        request.cancel = function () {
            handler({ type: 'cancel' });
        };

        script = document.createElement('script');
        script.src = Url(request);
        script.type = 'text/javascript';
        script.async = true;

        window[callback] = function (data) {
            response.data = data;
        };

        handler = function handler(event) {

            if (event.type === 'load' && response.data !== null) {
                response.status = 200;
            } else if (event.type === 'error') {
                response.status = 404;
            } else {
                response.status = 0;
            }

            resolve(response);

            delete window[callback];
            document.body.removeChild(script);
        };

        script.onload = handler;
        script.onerror = handler;

        document.body.appendChild(script);
    });
}

var exports$3 = {
    request: function request(_request) {

        if (_request.method == 'JSONP') {
            _request.client = jsonpClient;
        }

        return _request;
    }
};

var exports$4 = {
    request: function request(_request) {

        if (isFunction(_request.beforeSend)) {
            _request.beforeSend.call(this, _request);
        }

        return _request;
    }
};

/**
 * HTTP method override Interceptor.
 */

var exports$5 = {
    request: function request(_request) {

        if (_request.emulateHTTP && /^(PUT|PATCH|DELETE)$/i.test(_request.method)) {
            _request.headers['X-HTTP-Method-Override'] = _request.method;
            _request.method = 'POST';
        }

        return _request;
    }
};

var exports$6 = {
    request: function request(_request) {

        _request.method = _request.method.toUpperCase();
        _request.headers = extend({}, Http.headers.common, !_request.crossOrigin ? Http.headers.custom : {}, Http.headers[_request.method.toLowerCase()], _request.headers);

        if (isPlainObject(_request.data) && /^(GET|JSONP)$/i.test(_request.method)) {
            extend(_request.params, _request.data);
            delete _request.data;
        }

        return _request;
    }
};

/**
 * Timeout Interceptor.
 */

var exports$7 = function exports() {

    var timeout;

    return {
        request: function request(_request) {

            if (_request.timeout) {
                timeout = setTimeout(function () {
                    _request.cancel();
                }, _request.timeout);
            }

            return _request;
        },
        response: function response(_response) {

            clearTimeout(timeout);

            return _response;
        }
    };
};

function interceptor (handler, vm) {

    return function (client) {

        if (isFunction(handler)) {
            handler = handler.call(vm, Promise$1);
        }

        return function (request) {

            if (isFunction(handler.request)) {
                request = handler.request.call(vm, request);
            }

            return when(request, function (request) {
                return when(client(request), function (response) {

                    if (isFunction(handler.response)) {
                        response = handler.response.call(vm, response);
                    }

                    return response;
                });
            });
        };
    };
}

function when(value, fulfilled, rejected) {

    var promise = Promise$1.resolve(value);

    if (arguments.length < 2) {
        return promise;
    }

    return promise.then(fulfilled, rejected);
}

function xhrClient (request) {
    return new Promise$1(function (resolve) {

        var xhr = new XMLHttpRequest(),
            response = { request: request },
            handler;

        request.cancel = function () {
            xhr.abort();
        };

        xhr.open(request.method, Url(request), true);

        handler = function handler(event) {

            response.data = 'response' in xhr ? xhr.response : xhr.responseText;
            response.status = xhr.status === 1223 ? 204 : xhr.status; // IE9 status bug
            response.statusText = trim(xhr.statusText || '');
            response.headers = xhr.getAllResponseHeaders();

            resolve(response);
        };

        xhr.timeout = 0;
        xhr.onload = handler;
        xhr.onabort = handler;
        xhr.onerror = handler;
        xhr.ontimeout = function () {};
        xhr.onprogress = function () {};

        if (isPlainObject(request.xhr)) {
            extend(xhr, request.xhr);
        }

        if (isPlainObject(request.upload)) {
            extend(xhr.upload, request.upload);
        }

        each(request.headers || {}, function (value, header) {
            xhr.setRequestHeader(header, value);
        });

        xhr.send(request.data);
    });
}

function Client (request) {

    var response = (request.client || xhrClient)(request);

    return Promise$1.resolve(response).then(function (response) {

        if (response.headers) {

            var headers = parseHeaders(response.headers);

            response.headers = function (name) {

                if (name) {
                    return headers[toLower(name)];
                }

                return headers;
            };
        }

        response.ok = response.status >= 200 && response.status < 300;

        return response;
    });
}

function parseHeaders(str) {

    var headers = {},
        value,
        name,
        i;

    if (isString(str)) {
        each(str.split('\n'), function (row) {

            i = row.indexOf(':');
            name = trim(toLower(row.slice(0, i)));
            value = trim(row.slice(i + 1));

            if (headers[name]) {

                if (isArray(headers[name])) {
                    headers[name].push(value);
                } else {
                    headers[name] = [headers[name], value];
                }
            } else {

                headers[name] = value;
            }
        });
    }

    return headers;
}

/**
 * Service for sending network requests.
 */

var jsonType = { 'Content-Type': 'application/json' };

function Http(url, options) {

    var self = this || {},
        client = Client,
        request,
        promise;

    Http.interceptors.forEach(function (handler) {
        client = interceptor(handler, self.$vm)(client);
    });

    options = isObject(url) ? url : extend({ url: url }, options);
    request = merge({}, Http.options, self.$options, options);
    promise = client(request).bind(self.$vm).then(function (response) {

        return response.ok ? response : Promise$1.reject(response);
    }, function (response) {

        if (response instanceof Error) {
            error(response);
        }

        return Promise$1.reject(response);
    });

    if (request.success) {
        promise.success(request.success);
    }

    if (request.error) {
        promise.error(request.error);
    }

    return promise;
}

Http.options = {
    method: 'get',
    data: '',
    params: {},
    headers: {},
    xhr: null,
    upload: null,
    jsonp: 'callback',
    beforeSend: null,
    crossOrigin: null,
    emulateHTTP: false,
    emulateJSON: false,
    timeout: 0
};

Http.headers = {
    put: jsonType,
    post: jsonType,
    patch: jsonType,
    delete: jsonType,
    common: { 'Accept': 'application/json, text/plain, */*' },
    custom: { 'X-Requested-With': 'XMLHttpRequest' }
};

Http.interceptors = [exports$4, exports$7, exports$3, exports$5, exports$2, exports$6, exports$1];

['get', 'put', 'post', 'patch', 'delete', 'jsonp'].forEach(function (method) {

    Http[method] = function (url, data, success, options) {

        if (isFunction(data)) {
            options = success;
            success = data;
            data = undefined;
        }

        if (isObject(success)) {
            options = success;
            success = undefined;
        }

        return this(url, extend({ method: method, data: data, success: success }, options));
    };
});

function Resource(url, params, actions, options) {

    var self = this || {},
        resource = {};

    actions = extend({}, Resource.actions, actions);

    each(actions, function (action, name) {

        action = merge({ url: url, params: params || {} }, options, action);

        resource[name] = function () {
            return (self.$http || Http)(opts(action, arguments));
        };
    });

    return resource;
}

function opts(action, args) {

    var options = extend({}, action),
        params = {},
        data,
        success,
        error;

    switch (args.length) {

        case 4:

            error = args[3];
            success = args[2];

        case 3:
        case 2:

            if (isFunction(args[1])) {

                if (isFunction(args[0])) {

                    success = args[0];
                    error = args[1];

                    break;
                }

                success = args[1];
                error = args[2];
            } else {

                params = args[0];
                data = args[1];
                success = args[2];

                break;
            }

        case 1:

            if (isFunction(args[0])) {
                success = args[0];
            } else if (/^(POST|PUT|PATCH)$/i.test(options.method)) {
                data = args[0];
            } else {
                params = args[0];
            }

            break;

        case 0:

            break;

        default:

            throw 'Expected up to 4 arguments [params, data, success, error], got ' + args.length + ' arguments';
    }

    options.data = data;
    options.params = extend({}, options.params, params);

    if (success) {
        options.success = success;
    }

    if (error) {
        options.error = error;
    }

    return options;
}

Resource.actions = {

    get: { method: 'GET' },
    save: { method: 'POST' },
    query: { method: 'GET' },
    update: { method: 'PUT' },
    remove: { method: 'DELETE' },
    delete: { method: 'DELETE' }

};

function plugin(Vue) {

    if (plugin.installed) {
        return;
    }

    Util(Vue);

    Vue.url = Url;
    Vue.http = Http;
    Vue.resource = Resource;
    Vue.Promise = Promise$1;

    Object.defineProperties(Vue.prototype, {

        $url: {
            get: function get() {
                return options(Vue.url, this, this.$options.url);
            }
        },

        $http: {
            get: function get() {
                return options(Vue.http, this, this.$options.http);
            }
        },

        $resource: {
            get: function get() {
                return Vue.resource.bind(this);
            }
        },

        $promise: {
            get: function get() {
                var _this = this;

                return function (executor) {
                    return new Vue.Promise(executor, _this);
                };
            }
        }

    });
}

if (typeof window !== 'undefined' && window.Vue) {
    window.Vue.use(plugin);
}

module.exports = plugin;
},{}],28:[function(require,module,exports){
/*!
 * vue-router v0.7.13
 * (c) 2016 Evan You
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  global.VueRouter = factory();
}(this, function () { 'use strict';

  var babelHelpers = {};

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  function Target(path, matcher, delegate) {
    this.path = path;
    this.matcher = matcher;
    this.delegate = delegate;
  }

  Target.prototype = {
    to: function to(target, callback) {
      var delegate = this.delegate;

      if (delegate && delegate.willAddRoute) {
        target = delegate.willAddRoute(this.matcher.target, target);
      }

      this.matcher.add(this.path, target);

      if (callback) {
        if (callback.length === 0) {
          throw new Error("You must have an argument in the function passed to `to`");
        }
        this.matcher.addChild(this.path, target, callback, this.delegate);
      }
      return this;
    }
  };

  function Matcher(target) {
    this.routes = {};
    this.children = {};
    this.target = target;
  }

  Matcher.prototype = {
    add: function add(path, handler) {
      this.routes[path] = handler;
    },

    addChild: function addChild(path, target, callback, delegate) {
      var matcher = new Matcher(target);
      this.children[path] = matcher;

      var match = generateMatch(path, matcher, delegate);

      if (delegate && delegate.contextEntered) {
        delegate.contextEntered(target, match);
      }

      callback(match);
    }
  };

  function generateMatch(startingPath, matcher, delegate) {
    return function (path, nestedCallback) {
      var fullPath = startingPath + path;

      if (nestedCallback) {
        nestedCallback(generateMatch(fullPath, matcher, delegate));
      } else {
        return new Target(startingPath + path, matcher, delegate);
      }
    };
  }

  function addRoute(routeArray, path, handler) {
    var len = 0;
    for (var i = 0, l = routeArray.length; i < l; i++) {
      len += routeArray[i].path.length;
    }

    path = path.substr(len);
    var route = { path: path, handler: handler };
    routeArray.push(route);
  }

  function eachRoute(baseRoute, matcher, callback, binding) {
    var routes = matcher.routes;

    for (var path in routes) {
      if (routes.hasOwnProperty(path)) {
        var routeArray = baseRoute.slice();
        addRoute(routeArray, path, routes[path]);

        if (matcher.children[path]) {
          eachRoute(routeArray, matcher.children[path], callback, binding);
        } else {
          callback.call(binding, routeArray);
        }
      }
    }
  }

  function map (callback, addRouteCallback) {
    var matcher = new Matcher();

    callback(generateMatch("", matcher, this.delegate));

    eachRoute([], matcher, function (route) {
      if (addRouteCallback) {
        addRouteCallback(this, route);
      } else {
        this.add(route);
      }
    }, this);
  }

  var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];

  var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');

  var noWarning = false;
  function warn(msg) {
    if (!noWarning && typeof console !== 'undefined') {
      console.error('[vue-router] ' + msg);
    }
  }

  function tryDecode(uri, asComponent) {
    try {
      return asComponent ? decodeURIComponent(uri) : decodeURI(uri);
    } catch (e) {
      warn('malformed URI' + (asComponent ? ' component: ' : ': ') + uri);
    }
  }

  function isArray(test) {
    return Object.prototype.toString.call(test) === "[object Array]";
  }

  // A Segment represents a segment in the original route description.
  // Each Segment type provides an `eachChar` and `regex` method.
  //
  // The `eachChar` method invokes the callback with one or more character
  // specifications. A character specification consumes one or more input
  // characters.
  //
  // The `regex` method returns a regex fragment for the segment. If the
  // segment is a dynamic of star segment, the regex fragment also includes
  // a capture.
  //
  // A character specification contains:
  //
  // * `validChars`: a String with a list of all valid characters, or
  // * `invalidChars`: a String with a list of all invalid characters
  // * `repeat`: true if the character specification can repeat

  function StaticSegment(string) {
    this.string = string;
  }
  StaticSegment.prototype = {
    eachChar: function eachChar(callback) {
      var string = this.string,
          ch;

      for (var i = 0, l = string.length; i < l; i++) {
        ch = string.charAt(i);
        callback({ validChars: ch });
      }
    },

    regex: function regex() {
      return this.string.replace(escapeRegex, '\\$1');
    },

    generate: function generate() {
      return this.string;
    }
  };

  function DynamicSegment(name) {
    this.name = name;
  }
  DynamicSegment.prototype = {
    eachChar: function eachChar(callback) {
      callback({ invalidChars: "/", repeat: true });
    },

    regex: function regex() {
      return "([^/]+)";
    },

    generate: function generate(params) {
      var val = params[this.name];
      return val == null ? ":" + this.name : val;
    }
  };

  function StarSegment(name) {
    this.name = name;
  }
  StarSegment.prototype = {
    eachChar: function eachChar(callback) {
      callback({ invalidChars: "", repeat: true });
    },

    regex: function regex() {
      return "(.+)";
    },

    generate: function generate(params) {
      var val = params[this.name];
      return val == null ? ":" + this.name : val;
    }
  };

  function EpsilonSegment() {}
  EpsilonSegment.prototype = {
    eachChar: function eachChar() {},
    regex: function regex() {
      return "";
    },
    generate: function generate() {
      return "";
    }
  };

  function parse(route, names, specificity) {
    // normalize route as not starting with a "/". Recognition will
    // also normalize.
    if (route.charAt(0) === "/") {
      route = route.substr(1);
    }

    var segments = route.split("/"),
        results = [];

    // A routes has specificity determined by the order that its different segments
    // appear in. This system mirrors how the magnitude of numbers written as strings
    // works.
    // Consider a number written as: "abc". An example would be "200". Any other number written
    // "xyz" will be smaller than "abc" so long as `a > z`. For instance, "199" is smaller
    // then "200", even though "y" and "z" (which are both 9) are larger than "0" (the value
    // of (`b` and `c`). This is because the leading symbol, "2", is larger than the other
    // leading symbol, "1".
    // The rule is that symbols to the left carry more weight than symbols to the right
    // when a number is written out as a string. In the above strings, the leading digit
    // represents how many 100's are in the number, and it carries more weight than the middle
    // number which represents how many 10's are in the number.
    // This system of number magnitude works well for route specificity, too. A route written as
    // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than
    // `x`, irrespective of the other parts.
    // Because of this similarity, we assign each type of segment a number value written as a
    // string. We can find the specificity of compound routes by concatenating these strings
    // together, from left to right. After we have looped through all of the segments,
    // we convert the string to a number.
    specificity.val = '';

    for (var i = 0, l = segments.length; i < l; i++) {
      var segment = segments[i],
          match;

      if (match = segment.match(/^:([^\/]+)$/)) {
        results.push(new DynamicSegment(match[1]));
        names.push(match[1]);
        specificity.val += '3';
      } else if (match = segment.match(/^\*([^\/]+)$/)) {
        results.push(new StarSegment(match[1]));
        specificity.val += '2';
        names.push(match[1]);
      } else if (segment === "") {
        results.push(new EpsilonSegment());
        specificity.val += '1';
      } else {
        results.push(new StaticSegment(segment));
        specificity.val += '4';
      }
    }

    specificity.val = +specificity.val;

    return results;
  }

  // A State has a character specification and (`charSpec`) and a list of possible
  // subsequent states (`nextStates`).
  //
  // If a State is an accepting state, it will also have several additional
  // properties:
  //
  // * `regex`: A regular expression that is used to extract parameters from paths
  //   that reached this accepting state.
  // * `handlers`: Information on how to convert the list of captures into calls
  //   to registered handlers with the specified parameters
  // * `types`: How many static, dynamic or star segments in this route. Used to
  //   decide which route to use if multiple registered routes match a path.
  //
  // Currently, State is implemented naively by looping over `nextStates` and
  // comparing a character specification against a character. A more efficient
  // implementation would use a hash of keys pointing at one or more next states.

  function State(charSpec) {
    this.charSpec = charSpec;
    this.nextStates = [];
  }

  State.prototype = {
    get: function get(charSpec) {
      var nextStates = this.nextStates;

      for (var i = 0, l = nextStates.length; i < l; i++) {
        var child = nextStates[i];

        var isEqual = child.charSpec.validChars === charSpec.validChars;
        isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;

        if (isEqual) {
          return child;
        }
      }
    },

    put: function put(charSpec) {
      var state;

      // If the character specification already exists in a child of the current
      // state, just return that state.
      if (state = this.get(charSpec)) {
        return state;
      }

      // Make a new state for the character spec
      state = new State(charSpec);

      // Insert the new state as a child of the current state
      this.nextStates.push(state);

      // If this character specification repeats, insert the new state as a child
      // of itself. Note that this will not trigger an infinite loop because each
      // transition during recognition consumes a character.
      if (charSpec.repeat) {
        state.nextStates.push(state);
      }

      // Return the new state
      return state;
    },

    // Find a list of child states matching the next character
    match: function match(ch) {
      // DEBUG "Processing `" + ch + "`:"
      var nextStates = this.nextStates,
          child,
          charSpec,
          chars;

      // DEBUG "  " + debugState(this)
      var returned = [];

      for (var i = 0, l = nextStates.length; i < l; i++) {
        child = nextStates[i];

        charSpec = child.charSpec;

        if (typeof (chars = charSpec.validChars) !== 'undefined') {
          if (chars.indexOf(ch) !== -1) {
            returned.push(child);
          }
        } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {
          if (chars.indexOf(ch) === -1) {
            returned.push(child);
          }
        }
      }

      return returned;
    }

    /** IF DEBUG
    , debug: function() {
      var charSpec = this.charSpec,
          debug = "[",
          chars = charSpec.validChars || charSpec.invalidChars;
       if (charSpec.invalidChars) { debug += "^"; }
      debug += chars;
      debug += "]";
       if (charSpec.repeat) { debug += "+"; }
       return debug;
    }
    END IF **/
  };

  /** IF DEBUG
  function debug(log) {
    console.log(log);
  }

  function debugState(state) {
    return state.nextStates.map(function(n) {
      if (n.nextStates.length === 0) { return "( " + n.debug() + " [accepting] )"; }
      return "( " + n.debug() + " <then> " + n.nextStates.map(function(s) { return s.debug() }).join(" or ") + " )";
    }).join(", ")
  }
  END IF **/

  // Sort the routes by specificity
  function sortSolutions(states) {
    return states.sort(function (a, b) {
      return b.specificity.val - a.specificity.val;
    });
  }

  function recognizeChar(states, ch) {
    var nextStates = [];

    for (var i = 0, l = states.length; i < l; i++) {
      var state = states[i];

      nextStates = nextStates.concat(state.match(ch));
    }

    return nextStates;
  }

  var oCreate = Object.create || function (proto) {
    function F() {}
    F.prototype = proto;
    return new F();
  };

  function RecognizeResults(queryParams) {
    this.queryParams = queryParams || {};
  }
  RecognizeResults.prototype = oCreate({
    splice: Array.prototype.splice,
    slice: Array.prototype.slice,
    push: Array.prototype.push,
    length: 0,
    queryParams: null
  });

  function findHandler(state, path, queryParams) {
    var handlers = state.handlers,
        regex = state.regex;
    var captures = path.match(regex),
        currentCapture = 1;
    var result = new RecognizeResults(queryParams);

    for (var i = 0, l = handlers.length; i < l; i++) {
      var handler = handlers[i],
          names = handler.names,
          params = {};

      for (var j = 0, m = names.length; j < m; j++) {
        params[names[j]] = captures[currentCapture++];
      }

      result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });
    }

    return result;
  }

  function addSegment(currentState, segment) {
    segment.eachChar(function (ch) {
      var state;

      currentState = currentState.put(ch);
    });

    return currentState;
  }

  function decodeQueryParamPart(part) {
    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
    part = part.replace(/\+/gm, '%20');
    return tryDecode(part, true);
  }

  // The main interface

  var RouteRecognizer = function RouteRecognizer() {
    this.rootState = new State();
    this.names = {};
  };

  RouteRecognizer.prototype = {
    add: function add(routes, options) {
      var currentState = this.rootState,
          regex = "^",
          specificity = {},
          handlers = [],
          allSegments = [],
          name;

      var isEmpty = true;

      for (var i = 0, l = routes.length; i < l; i++) {
        var route = routes[i],
            names = [];

        var segments = parse(route.path, names, specificity);

        allSegments = allSegments.concat(segments);

        for (var j = 0, m = segments.length; j < m; j++) {
          var segment = segments[j];

          if (segment instanceof EpsilonSegment) {
            continue;
          }

          isEmpty = false;

          // Add a "/" for the new segment
          currentState = currentState.put({ validChars: "/" });
          regex += "/";

          // Add a representation of the segment to the NFA and regex
          currentState = addSegment(currentState, segment);
          regex += segment.regex();
        }

        var handler = { handler: route.handler, names: names };
        handlers.push(handler);
      }

      if (isEmpty) {
        currentState = currentState.put({ validChars: "/" });
        regex += "/";
      }

      currentState.handlers = handlers;
      currentState.regex = new RegExp(regex + "$");
      currentState.specificity = specificity;

      if (name = options && options.as) {
        this.names[name] = {
          segments: allSegments,
          handlers: handlers
        };
      }
    },

    handlersFor: function handlersFor(name) {
      var route = this.names[name],
          result = [];
      if (!route) {
        throw new Error("There is no route named " + name);
      }

      for (var i = 0, l = route.handlers.length; i < l; i++) {
        result.push(route.handlers[i]);
      }

      return result;
    },

    hasRoute: function hasRoute(name) {
      return !!this.names[name];
    },

    generate: function generate(name, params) {
      var route = this.names[name],
          output = "";
      if (!route) {
        throw new Error("There is no route named " + name);
      }

      var segments = route.segments;

      for (var i = 0, l = segments.length; i < l; i++) {
        var segment = segments[i];

        if (segment instanceof EpsilonSegment) {
          continue;
        }

        output += "/";
        output += segment.generate(params);
      }

      if (output.charAt(0) !== '/') {
        output = '/' + output;
      }

      if (params && params.queryParams) {
        output += this.generateQueryString(params.queryParams);
      }

      return output;
    },

    generateQueryString: function generateQueryString(params) {
      var pairs = [];
      var keys = [];
      for (var key in params) {
        if (params.hasOwnProperty(key)) {
          keys.push(key);
        }
      }
      keys.sort();
      for (var i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        var value = params[key];
        if (value == null) {
          continue;
        }
        var pair = encodeURIComponent(key);
        if (isArray(value)) {
          for (var j = 0, l = value.length; j < l; j++) {
            var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);
            pairs.push(arrayPair);
          }
        } else {
          pair += "=" + encodeURIComponent(value);
          pairs.push(pair);
        }
      }

      if (pairs.length === 0) {
        return '';
      }

      return "?" + pairs.join("&");
    },

    parseQueryString: function parseQueryString(queryString) {
      var pairs = queryString.split("&"),
          queryParams = {};
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i].split('='),
            key = decodeQueryParamPart(pair[0]),
            keyLength = key.length,
            isArray = false,
            value;
        if (pair.length === 1) {
          value = 'true';
        } else {
          //Handle arrays
          if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {
            isArray = true;
            key = key.slice(0, keyLength - 2);
            if (!queryParams[key]) {
              queryParams[key] = [];
            }
          }
          value = pair[1] ? decodeQueryParamPart(pair[1]) : '';
        }
        if (isArray) {
          queryParams[key].push(value);
        } else {
          queryParams[key] = value;
        }
      }
      return queryParams;
    },

    recognize: function recognize(path, silent) {
      noWarning = silent;
      var states = [this.rootState],
          pathLen,
          i,
          l,
          queryStart,
          queryParams = {},
          isSlashDropped = false;

      queryStart = path.indexOf('?');
      if (queryStart !== -1) {
        var queryString = path.substr(queryStart + 1, path.length);
        path = path.substr(0, queryStart);
        if (queryString) {
          queryParams = this.parseQueryString(queryString);
        }
      }

      path = tryDecode(path);
      if (!path) return;

      // DEBUG GROUP path

      if (path.charAt(0) !== "/") {
        path = "/" + path;
      }

      pathLen = path.length;
      if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
        path = path.substr(0, pathLen - 1);
        isSlashDropped = true;
      }

      for (i = 0, l = path.length; i < l; i++) {
        states = recognizeChar(states, path.charAt(i));
        if (!states.length) {
          break;
        }
      }

      // END DEBUG GROUP

      var solutions = [];
      for (i = 0, l = states.length; i < l; i++) {
        if (states[i].handlers) {
          solutions.push(states[i]);
        }
      }

      states = sortSolutions(solutions);

      var state = solutions[0];

      if (state && state.handlers) {
        // if a trailing slash was dropped and a star segment is the last segment
        // specified, put the trailing slash back
        if (isSlashDropped && state.regex.source.slice(-5) === "(.+)$") {
          path = path + "/";
        }
        return findHandler(state, path, queryParams);
      }
    }
  };

  RouteRecognizer.prototype.map = map;

  var genQuery = RouteRecognizer.prototype.generateQueryString;

  // export default for holding the Vue reference
  var exports$1 = {};
  /**
   * Warn stuff.
   *
   * @param {String} msg
   */

  function warn$1(msg) {
    /* istanbul ignore next */
    if (typeof console !== 'undefined') {
      console.error('[vue-router] ' + msg);
    }
  }

  /**
   * Resolve a relative path.
   *
   * @param {String} base
   * @param {String} relative
   * @param {Boolean} append
   * @return {String}
   */

  function resolvePath(base, relative, append) {
    var query = base.match(/(\?.*)$/);
    if (query) {
      query = query[1];
      base = base.slice(0, -query.length);
    }
    // a query!
    if (relative.charAt(0) === '?') {
      return base + relative;
    }
    var stack = base.split('/');
    // remove trailing segment if:
    // - not appending
    // - appending to trailing slash (last segment is empty)
    if (!append || !stack[stack.length - 1]) {
      stack.pop();
    }
    // resolve relative path
    var segments = relative.replace(/^\//, '').split('/');
    for (var i = 0; i < segments.length; i++) {
      var segment = segments[i];
      if (segment === '.') {
        continue;
      } else if (segment === '..') {
        stack.pop();
      } else {
        stack.push(segment);
      }
    }
    // ensure leading slash
    if (stack[0] !== '') {
      stack.unshift('');
    }
    return stack.join('/');
  }

  /**
   * Forgiving check for a promise
   *
   * @param {Object} p
   * @return {Boolean}
   */

  function isPromise(p) {
    return p && typeof p.then === 'function';
  }

  /**
   * Retrive a route config field from a component instance
   * OR a component contructor.
   *
   * @param {Function|Vue} component
   * @param {String} name
   * @return {*}
   */

  function getRouteConfig(component, name) {
    var options = component && (component.$options || component.options);
    return options && options.route && options.route[name];
  }

  /**
   * Resolve an async component factory. Have to do a dirty
   * mock here because of Vue core's internal API depends on
   * an ID check.
   *
   * @param {Object} handler
   * @param {Function} cb
   */

  var resolver = undefined;

  function resolveAsyncComponent(handler, cb) {
    if (!resolver) {
      resolver = {
        resolve: exports$1.Vue.prototype._resolveComponent,
        $options: {
          components: {
            _: handler.component
          }
        }
      };
    } else {
      resolver.$options.components._ = handler.component;
    }
    resolver.resolve('_', function (Component) {
      handler.component = Component;
      cb(Component);
    });
  }

  /**
   * Map the dynamic segments in a path to params.
   *
   * @param {String} path
   * @param {Object} params
   * @param {Object} query
   */

  function mapParams(path, params, query) {
    if (params === undefined) params = {};

    path = path.replace(/:([^\/]+)/g, function (_, key) {
      var val = params[key];
      /* istanbul ignore if */
      if (!val) {
        warn$1('param "' + key + '" not found when generating ' + 'path for "' + path + '" with params ' + JSON.stringify(params));
      }
      return val || '';
    });
    if (query) {
      path += genQuery(query);
    }
    return path;
  }

  var hashRE = /#.*$/;

  var HTML5History = (function () {
    function HTML5History(_ref) {
      var root = _ref.root;
      var onChange = _ref.onChange;
      babelHelpers.classCallCheck(this, HTML5History);

      if (root && root !== '/') {
        // make sure there's the starting slash
        if (root.charAt(0) !== '/') {
          root = '/' + root;
        }
        // remove trailing slash
        this.root = root.replace(/\/$/, '');
        this.rootRE = new RegExp('^\\' + this.root);
      } else {
        this.root = null;
      }
      this.onChange = onChange;
      // check base tag
      var baseEl = document.querySelector('base');
      this.base = baseEl && baseEl.getAttribute('href');
    }

    HTML5History.prototype.start = function start() {
      var _this = this;

      this.listener = function (e) {
        var url = location.pathname + location.search;
        if (_this.root) {
          url = url.replace(_this.rootRE, '');
        }
        _this.onChange(url, e && e.state, location.hash);
      };
      window.addEventListener('popstate', this.listener);
      this.listener();
    };

    HTML5History.prototype.stop = function stop() {
      window.removeEventListener('popstate', this.listener);
    };

    HTML5History.prototype.go = function go(path, replace, append) {
      var url = this.formatPath(path, append);
      if (replace) {
        history.replaceState({}, '', url);
      } else {
        // record scroll position by replacing current state
        history.replaceState({
          pos: {
            x: window.pageXOffset,
            y: window.pageYOffset
          }
        }, '', location.href);
        // then push new state
        history.pushState({}, '', url);
      }
      var hashMatch = path.match(hashRE);
      var hash = hashMatch && hashMatch[0];
      path = url
      // strip hash so it doesn't mess up params
      .replace(hashRE, '')
      // remove root before matching
      .replace(this.rootRE, '');
      this.onChange(path, null, hash);
    };

    HTML5History.prototype.formatPath = function formatPath(path, append) {
      return path.charAt(0) === '/'
      // absolute path
      ? this.root ? this.root + '/' + path.replace(/^\//, '') : path : resolvePath(this.base || location.pathname, path, append);
    };

    return HTML5History;
  })();

  var HashHistory = (function () {
    function HashHistory(_ref) {
      var hashbang = _ref.hashbang;
      var onChange = _ref.onChange;
      babelHelpers.classCallCheck(this, HashHistory);

      this.hashbang = hashbang;
      this.onChange = onChange;
    }

    HashHistory.prototype.start = function start() {
      var self = this;
      this.listener = function () {
        var path = location.hash;
        var raw = path.replace(/^#!?/, '');
        // always
        if (raw.charAt(0) !== '/') {
          raw = '/' + raw;
        }
        var formattedPath = self.formatPath(raw);
        if (formattedPath !== path) {
          location.replace(formattedPath);
          return;
        }
        // determine query
        // note it's possible to have queries in both the actual URL
        // and the hash fragment itself.
        var query = location.search && path.indexOf('?') > -1 ? '&' + location.search.slice(1) : location.search;
        self.onChange(path.replace(/^#!?/, '') + query);
      };
      window.addEventListener('hashchange', this.listener);
      this.listener();
    };

    HashHistory.prototype.stop = function stop() {
      window.removeEventListener('hashchange', this.listener);
    };

    HashHistory.prototype.go = function go(path, replace, append) {
      path = this.formatPath(path, append);
      if (replace) {
        location.replace(path);
      } else {
        location.hash = path;
      }
    };

    HashHistory.prototype.formatPath = function formatPath(path, append) {
      var isAbsoloute = path.charAt(0) === '/';
      var prefix = '#' + (this.hashbang ? '!' : '');
      return isAbsoloute ? prefix + path : prefix + resolvePath(location.hash.replace(/^#!?/, ''), path, append);
    };

    return HashHistory;
  })();

  var AbstractHistory = (function () {
    function AbstractHistory(_ref) {
      var onChange = _ref.onChange;
      babelHelpers.classCallCheck(this, AbstractHistory);

      this.onChange = onChange;
      this.currentPath = '/';
    }

    AbstractHistory.prototype.start = function start() {
      this.onChange('/');
    };

    AbstractHistory.prototype.stop = function stop() {
      // noop
    };

    AbstractHistory.prototype.go = function go(path, replace, append) {
      path = this.currentPath = this.formatPath(path, append);
      this.onChange(path);
    };

    AbstractHistory.prototype.formatPath = function formatPath(path, append) {
      return path.charAt(0) === '/' ? path : resolvePath(this.currentPath, path, append);
    };

    return AbstractHistory;
  })();

  /**
   * Determine the reusability of an existing router view.
   *
   * @param {Directive} view
   * @param {Object} handler
   * @param {Transition} transition
   */

  function canReuse(view, handler, transition) {
    var component = view.childVM;
    if (!component || !handler) {
      return false;
    }
    // important: check view.Component here because it may
    // have been changed in activate hook
    if (view.Component !== handler.component) {
      return false;
    }
    var canReuseFn = getRouteConfig(component, 'canReuse');
    return typeof canReuseFn === 'boolean' ? canReuseFn : canReuseFn ? canReuseFn.call(component, {
      to: transition.to,
      from: transition.from
    }) : true; // defaults to true
  }

  /**
   * Check if a component can deactivate.
   *
   * @param {Directive} view
   * @param {Transition} transition
   * @param {Function} next
   */

  function canDeactivate(view, transition, next) {
    var fromComponent = view.childVM;
    var hook = getRouteConfig(fromComponent, 'canDeactivate');
    if (!hook) {
      next();
    } else {
      transition.callHook(hook, fromComponent, next, {
        expectBoolean: true
      });
    }
  }

  /**
   * Check if a component can activate.
   *
   * @param {Object} handler
   * @param {Transition} transition
   * @param {Function} next
   */

  function canActivate(handler, transition, next) {
    resolveAsyncComponent(handler, function (Component) {
      // have to check due to async-ness
      if (transition.aborted) {
        return;
      }
      // determine if this component can be activated
      var hook = getRouteConfig(Component, 'canActivate');
      if (!hook) {
        next();
      } else {
        transition.callHook(hook, null, next, {
          expectBoolean: true
        });
      }
    });
  }

  /**
   * Call deactivate hooks for existing router-views.
   *
   * @param {Directive} view
   * @param {Transition} transition
   * @param {Function} next
   */

  function deactivate(view, transition, next) {
    var component = view.childVM;
    var hook = getRouteConfig(component, 'deactivate');
    if (!hook) {
      next();
    } else {
      transition.callHooks(hook, component, next);
    }
  }

  /**
   * Activate / switch component for a router-view.
   *
   * @param {Directive} view
   * @param {Transition} transition
   * @param {Number} depth
   * @param {Function} [cb]
   */

  function activate(view, transition, depth, cb, reuse) {
    var handler = transition.activateQueue[depth];
    if (!handler) {
      saveChildView(view);
      if (view._bound) {
        view.setComponent(null);
      }
      cb && cb();
      return;
    }

    var Component = view.Component = handler.component;
    var activateHook = getRouteConfig(Component, 'activate');
    var dataHook = getRouteConfig(Component, 'data');
    var waitForData = getRouteConfig(Component, 'waitForData');

    view.depth = depth;
    view.activated = false;

    var component = undefined;
    var loading = !!(dataHook && !waitForData);

    // "reuse" is a flag passed down when the parent view is
    // either reused via keep-alive or as a child of a kept-alive view.
    // of course we can only reuse if the current kept-alive instance
    // is of the correct type.
    reuse = reuse && view.childVM && view.childVM.constructor === Component;

    if (reuse) {
      // just reuse
      component = view.childVM;
      component.$loadingRouteData = loading;
    } else {
      saveChildView(view);

      // unbuild current component. this step also destroys
      // and removes all nested child views.
      view.unbuild(true);

      // build the new component. this will also create the
      // direct child view of the current one. it will register
      // itself as view.childView.
      component = view.build({
        _meta: {
          $loadingRouteData: loading
        },
        created: function created() {
          this._routerView = view;
        }
      });

      // handle keep-alive.
      // when a kept-alive child vm is restored, we need to
      // add its cached child views into the router's view list,
      // and also properly update current view's child view.
      if (view.keepAlive) {
        component.$loadingRouteData = loading;
        var cachedChildView = component._keepAliveRouterView;
        if (cachedChildView) {
          view.childView = cachedChildView;
          component._keepAliveRouterView = null;
        }
      }
    }

    // cleanup the component in case the transition is aborted
    // before the component is ever inserted.
    var cleanup = function cleanup() {
      component.$destroy();
    };

    // actually insert the component and trigger transition
    var insert = function insert() {
      if (reuse) {
        cb && cb();
        return;
      }
      var router = transition.router;
      if (router._rendered || router._transitionOnLoad) {
        view.transition(component);
      } else {
        // no transition on first render, manual transition
        /* istanbul ignore if */
        if (view.setCurrent) {
          // 0.12 compat
          view.setCurrent(component);
        } else {
          // 1.0
          view.childVM = component;
        }
        component.$before(view.anchor, null, false);
      }
      cb && cb();
    };

    var afterData = function afterData() {
      // activate the child view
      if (view.childView) {
        activate(view.childView, transition, depth + 1, null, reuse || view.keepAlive);
      }
      insert();
    };

    // called after activation hook is resolved
    var afterActivate = function afterActivate() {
      view.activated = true;
      if (dataHook && waitForData) {
        // wait until data loaded to insert
        loadData(component, transition, dataHook, afterData, cleanup);
      } else {
        // load data and insert at the same time
        if (dataHook) {
          loadData(component, transition, dataHook);
        }
        afterData();
      }
    };

    if (activateHook) {
      transition.callHooks(activateHook, component, afterActivate, {
        cleanup: cleanup,
        postActivate: true
      });
    } else {
      afterActivate();
    }
  }

  /**
   * Reuse a view, just reload data if necessary.
   *
   * @param {Directive} view
   * @param {Transition} transition
   */

  function reuse(view, transition) {
    var component = view.childVM;
    var dataHook = getRouteConfig(component, 'data');
    if (dataHook) {
      loadData(component, transition, dataHook);
    }
  }

  /**
   * Asynchronously load and apply data to component.
   *
   * @param {Vue} component
   * @param {Transition} transition
   * @param {Function} hook
   * @param {Function} cb
   * @param {Function} cleanup
   */

  function loadData(component, transition, hook, cb, cleanup) {
    component.$loadingRouteData = true;
    transition.callHooks(hook, component, function () {
      component.$loadingRouteData = false;
      component.$emit('route-data-loaded', component);
      cb && cb();
    }, {
      cleanup: cleanup,
      postActivate: true,
      processData: function processData(data) {
        // handle promise sugar syntax
        var promises = [];
        if (isPlainObject(data)) {
          Object.keys(data).forEach(function (key) {
            var val = data[key];
            if (isPromise(val)) {
              promises.push(val.then(function (resolvedVal) {
                component.$set(key, resolvedVal);
              }));
            } else {
              component.$set(key, val);
            }
          });
        }
        if (promises.length) {
          return promises[0].constructor.all(promises);
        }
      }
    });
  }

  /**
   * Save the child view for a kept-alive view so that
   * we can restore it when it is switched back to.
   *
   * @param {Directive} view
   */

  function saveChildView(view) {
    if (view.keepAlive && view.childVM && view.childView) {
      view.childVM._keepAliveRouterView = view.childView;
    }
    view.childView = null;
  }

  /**
   * Check plain object.
   *
   * @param {*} val
   */

  function isPlainObject(val) {
    return Object.prototype.toString.call(val) === '[object Object]';
  }

  /**
   * A RouteTransition object manages the pipeline of a
   * router-view switching process. This is also the object
   * passed into user route hooks.
   *
   * @param {Router} router
   * @param {Route} to
   * @param {Route} from
   */

  var RouteTransition = (function () {
    function RouteTransition(router, to, from) {
      babelHelpers.classCallCheck(this, RouteTransition);

      this.router = router;
      this.to = to;
      this.from = from;
      this.next = null;
      this.aborted = false;
      this.done = false;
    }

    /**
     * Abort current transition and return to previous location.
     */

    RouteTransition.prototype.abort = function abort() {
      if (!this.aborted) {
        this.aborted = true;
        // if the root path throws an error during validation
        // on initial load, it gets caught in an infinite loop.
        var abortingOnLoad = !this.from.path && this.to.path === '/';
        if (!abortingOnLoad) {
          this.router.replace(this.from.path || '/');
        }
      }
    };

    /**
     * Abort current transition and redirect to a new location.
     *
     * @param {String} path
     */

    RouteTransition.prototype.redirect = function redirect(path) {
      if (!this.aborted) {
        this.aborted = true;
        if (typeof path === 'string') {
          path = mapParams(path, this.to.params, this.to.query);
        } else {
          path.params = path.params || this.to.params;
          path.query = path.query || this.to.query;
        }
        this.router.replace(path);
      }
    };

    /**
     * A router view transition's pipeline can be described as
     * follows, assuming we are transitioning from an existing
     * <router-view> chain [Component A, Component B] to a new
     * chain [Component A, Component C]:
     *
     *  A    A
     *  | => |
     *  B    C
     *
     * 1. Reusablity phase:
     *   -> canReuse(A, A)
     *   -> canReuse(B, C)
     *   -> determine new queues:
     *      - deactivation: [B]
     *      - activation: [C]
     *
     * 2. Validation phase:
     *   -> canDeactivate(B)
     *   -> canActivate(C)
     *
     * 3. Activation phase:
     *   -> deactivate(B)
     *   -> activate(C)
     *
     * Each of these steps can be asynchronous, and any
     * step can potentially abort the transition.
     *
     * @param {Function} cb
     */

    RouteTransition.prototype.start = function start(cb) {
      var transition = this;

      // determine the queue of views to deactivate
      var deactivateQueue = [];
      var view = this.router._rootView;
      while (view) {
        deactivateQueue.unshift(view);
        view = view.childView;
      }
      var reverseDeactivateQueue = deactivateQueue.slice().reverse();

      // determine the queue of route handlers to activate
      var activateQueue = this.activateQueue = toArray(this.to.matched).map(function (match) {
        return match.handler;
      });

      // 1. Reusability phase
      var i = undefined,
          reuseQueue = undefined;
      for (i = 0; i < reverseDeactivateQueue.length; i++) {
        if (!canReuse(reverseDeactivateQueue[i], activateQueue[i], transition)) {
          break;
        }
      }
      if (i > 0) {
        reuseQueue = reverseDeactivateQueue.slice(0, i);
        deactivateQueue = reverseDeactivateQueue.slice(i).reverse();
        activateQueue = activateQueue.slice(i);
      }

      // 2. Validation phase
      transition.runQueue(deactivateQueue, canDeactivate, function () {
        transition.runQueue(activateQueue, canActivate, function () {
          transition.runQueue(deactivateQueue, deactivate, function () {
            // 3. Activation phase

            // Update router current route
            transition.router._onTransitionValidated(transition);

            // trigger reuse for all reused views
            reuseQueue && reuseQueue.forEach(function (view) {
              return reuse(view, transition);
            });

            // the root of the chain that needs to be replaced
            // is the top-most non-reusable view.
            if (deactivateQueue.length) {
              var _view = deactivateQueue[deactivateQueue.length - 1];
              var depth = reuseQueue ? reuseQueue.length : 0;
              activate(_view, transition, depth, cb);
            } else {
              cb();
            }
          });
        });
      });
    };

    /**
     * Asynchronously and sequentially apply a function to a
     * queue.
     *
     * @param {Array} queue
     * @param {Function} fn
     * @param {Function} cb
     */

    RouteTransition.prototype.runQueue = function runQueue(queue, fn, cb) {
      var transition = this;
      step(0);
      function step(index) {
        if (index >= queue.length) {
          cb();
        } else {
          fn(queue[index], transition, function () {
            step(index + 1);
          });
        }
      }
    };

    /**
     * Call a user provided route transition hook and handle
     * the response (e.g. if the user returns a promise).
     *
     * If the user neither expects an argument nor returns a
     * promise, the hook is assumed to be synchronous.
     *
     * @param {Function} hook
     * @param {*} [context]
     * @param {Function} [cb]
     * @param {Object} [options]
     *                 - {Boolean} expectBoolean
     *                 - {Boolean} postActive
     *                 - {Function} processData
     *                 - {Function} cleanup
     */

    RouteTransition.prototype.callHook = function callHook(hook, context, cb) {
      var _ref = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

      var _ref$expectBoolean = _ref.expectBoolean;
      var expectBoolean = _ref$expectBoolean === undefined ? false : _ref$expectBoolean;
      var _ref$postActivate = _ref.postActivate;
      var postActivate = _ref$postActivate === undefined ? false : _ref$postActivate;
      var processData = _ref.processData;
      var cleanup = _ref.cleanup;

      var transition = this;
      var nextCalled = false;

      // abort the transition
      var abort = function abort() {
        cleanup && cleanup();
        transition.abort();
      };

      // handle errors
      var onError = function onError(err) {
        postActivate ? next() : abort();
        if (err && !transition.router._suppress) {
          warn$1('Uncaught error during transition: ');
          throw err instanceof Error ? err : new Error(err);
        }
      };

      // since promise swallows errors, we have to
      // throw it in the next tick...
      var onPromiseError = function onPromiseError(err) {
        try {
          onError(err);
        } catch (e) {
          setTimeout(function () {
            throw e;
          }, 0);
        }
      };

      // advance the transition to the next step
      var next = function next() {
        if (nextCalled) {
          warn$1('transition.next() should be called only once.');
          return;
        }
        nextCalled = true;
        if (transition.aborted) {
          cleanup && cleanup();
          return;
        }
        cb && cb();
      };

      var nextWithBoolean = function nextWithBoolean(res) {
        if (typeof res === 'boolean') {
          res ? next() : abort();
        } else if (isPromise(res)) {
          res.then(function (ok) {
            ok ? next() : abort();
          }, onPromiseError);
        } else if (!hook.length) {
          next();
        }
      };

      var nextWithData = function nextWithData(data) {
        var res = undefined;
        try {
          res = processData(data);
        } catch (err) {
          return onError(err);
        }
        if (isPromise(res)) {
          res.then(next, onPromiseError);
        } else {
          next();
        }
      };

      // expose a clone of the transition object, so that each
      // hook gets a clean copy and prevent the user from
      // messing with the internals.
      var exposed = {
        to: transition.to,
        from: transition.from,
        abort: abort,
        next: processData ? nextWithData : next,
        redirect: function redirect() {
          transition.redirect.apply(transition, arguments);
        }
      };

      // actually call the hook
      var res = undefined;
      try {
        res = hook.call(context, exposed);
      } catch (err) {
        return onError(err);
      }

      if (expectBoolean) {
        // boolean hooks
        nextWithBoolean(res);
      } else if (isPromise(res)) {
        // promise
        if (processData) {
          res.then(nextWithData, onPromiseError);
        } else {
          res.then(next, onPromiseError);
        }
      } else if (processData && isPlainOjbect(res)) {
        // data promise sugar
        nextWithData(res);
      } else if (!hook.length) {
        next();
      }
    };

    /**
     * Call a single hook or an array of async hooks in series.
     *
     * @param {Array} hooks
     * @param {*} context
     * @param {Function} cb
     * @param {Object} [options]
     */

    RouteTransition.prototype.callHooks = function callHooks(hooks, context, cb, options) {
      var _this = this;

      if (Array.isArray(hooks)) {
        this.runQueue(hooks, function (hook, _, next) {
          if (!_this.aborted) {
            _this.callHook(hook, context, next, options);
          }
        }, cb);
      } else {
        this.callHook(hooks, context, cb, options);
      }
    };

    return RouteTransition;
  })();

  function isPlainOjbect(val) {
    return Object.prototype.toString.call(val) === '[object Object]';
  }

  function toArray(val) {
    return val ? Array.prototype.slice.call(val) : [];
  }

  var internalKeysRE = /^(component|subRoutes|fullPath)$/;

  /**
   * Route Context Object
   *
   * @param {String} path
   * @param {Router} router
   */

  var Route = function Route(path, router) {
    var _this = this;

    babelHelpers.classCallCheck(this, Route);

    var matched = router._recognizer.recognize(path);
    if (matched) {
      // copy all custom fields from route configs
      [].forEach.call(matched, function (match) {
        for (var key in match.handler) {
          if (!internalKeysRE.test(key)) {
            _this[key] = match.handler[key];
          }
        }
      });
      // set query and params
      this.query = matched.queryParams;
      this.params = [].reduce.call(matched, function (prev, cur) {
        if (cur.params) {
          for (var key in cur.params) {
            prev[key] = cur.params[key];
          }
        }
        return prev;
      }, {});
    }
    // expose path and router
    this.path = path;
    // for internal use
    this.matched = matched || router._notFoundHandler;
    // internal reference to router
    Object.defineProperty(this, 'router', {
      enumerable: false,
      value: router
    });
    // Important: freeze self to prevent observation
    Object.freeze(this);
  };

  function applyOverride (Vue) {
    var _Vue$util = Vue.util;
    var extend = _Vue$util.extend;
    var isArray = _Vue$util.isArray;
    var defineReactive = _Vue$util.defineReactive;

    // override Vue's init and destroy process to keep track of router instances
    var init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      options = options || {};
      var root = options._parent || options.parent || this;
      var router = root.$router;
      var route = root.$route;
      if (router) {
        // expose router
        this.$router = router;
        router._children.push(this);
        /* istanbul ignore if */
        if (this._defineMeta) {
          // 0.12
          this._defineMeta('$route', route);
        } else {
          // 1.0
          defineReactive(this, '$route', route);
        }
      }
      init.call(this, options);
    };

    var destroy = Vue.prototype._destroy;
    Vue.prototype._destroy = function () {
      if (!this._isBeingDestroyed && this.$router) {
        this.$router._children.$remove(this);
      }
      destroy.apply(this, arguments);
    };

    // 1.0 only: enable route mixins
    var strats = Vue.config.optionMergeStrategies;
    var hooksToMergeRE = /^(data|activate|deactivate)$/;

    if (strats) {
      strats.route = function (parentVal, childVal) {
        if (!childVal) return parentVal;
        if (!parentVal) return childVal;
        var ret = {};
        extend(ret, parentVal);
        for (var key in childVal) {
          var a = ret[key];
          var b = childVal[key];
          // for data, activate and deactivate, we need to merge them into
          // arrays similar to lifecycle hooks.
          if (a && hooksToMergeRE.test(key)) {
            ret[key] = (isArray(a) ? a : [a]).concat(b);
          } else {
            ret[key] = b;
          }
        }
        return ret;
      };
    }
  }

  function View (Vue) {

    var _ = Vue.util;
    var componentDef =
    // 0.12
    Vue.directive('_component') ||
    // 1.0
    Vue.internalDirectives.component;
    // <router-view> extends the internal component directive
    var viewDef = _.extend({}, componentDef);

    // with some overrides
    _.extend(viewDef, {

      _isRouterView: true,

      bind: function bind() {
        var route = this.vm.$route;
        /* istanbul ignore if */
        if (!route) {
          warn$1('<router-view> can only be used inside a ' + 'router-enabled app.');
          return;
        }
        // force dynamic directive so v-component doesn't
        // attempt to build right now
        this._isDynamicLiteral = true;
        // finally, init by delegating to v-component
        componentDef.bind.call(this);

        // locate the parent view
        var parentView = undefined;
        var parent = this.vm;
        while (parent) {
          if (parent._routerView) {
            parentView = parent._routerView;
            break;
          }
          parent = parent.$parent;
        }
        if (parentView) {
          // register self as a child of the parent view,
          // instead of activating now. This is so that the
          // child's activate hook is called after the
          // parent's has resolved.
          this.parentView = parentView;
          parentView.childView = this;
        } else {
          // this is the root view!
          var router = route.router;
          router._rootView = this;
        }

        // handle late-rendered view
        // two possibilities:
        // 1. root view rendered after transition has been
        //    validated;
        // 2. child view rendered after parent view has been
        //    activated.
        var transition = route.router._currentTransition;
        if (!parentView && transition.done || parentView && parentView.activated) {
          var depth = parentView ? parentView.depth + 1 : 0;
          activate(this, transition, depth);
        }
      },

      unbind: function unbind() {
        if (this.parentView) {
          this.parentView.childView = null;
        }
        componentDef.unbind.call(this);
      }
    });

    Vue.elementDirective('router-view', viewDef);
  }

  var trailingSlashRE = /\/$/;
  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
  var queryStringRE = /\?.*$/;

  // install v-link, which provides navigation support for
  // HTML5 history mode
  function Link (Vue) {
    var _Vue$util = Vue.util;
    var _bind = _Vue$util.bind;
    var isObject = _Vue$util.isObject;
    var addClass = _Vue$util.addClass;
    var removeClass = _Vue$util.removeClass;

    var onPriority = Vue.directive('on').priority;
    var LINK_UPDATE = '__vue-router-link-update__';

    var activeId = 0;

    Vue.directive('link-active', {
      priority: 9999,
      bind: function bind() {
        var _this = this;

        var id = String(activeId++);
        // collect v-links contained within this element.
        // we need do this here before the parent-child relationship
        // gets messed up by terminal directives (if, for, components)
        var childLinks = this.el.querySelectorAll('[v-link]');
        for (var i = 0, l = childLinks.length; i < l; i++) {
          var link = childLinks[i];
          var existingId = link.getAttribute(LINK_UPDATE);
          var value = existingId ? existingId + ',' + id : id;
          // leave a mark on the link element which can be persisted
          // through fragment clones.
          link.setAttribute(LINK_UPDATE, value);
        }
        this.vm.$on(LINK_UPDATE, this.cb = function (link, path) {
          if (link.activeIds.indexOf(id) > -1) {
            link.updateClasses(path, _this.el);
          }
        });
      },
      unbind: function unbind() {
        this.vm.$off(LINK_UPDATE, this.cb);
      }
    });

    Vue.directive('link', {
      priority: onPriority - 2,

      bind: function bind() {
        var vm = this.vm;
        /* istanbul ignore if */
        if (!vm.$route) {
          warn$1('v-link can only be used inside a router-enabled app.');
          return;
        }
        this.router = vm.$route.router;
        // update things when the route changes
        this.unwatch = vm.$watch('$route', _bind(this.onRouteUpdate, this));
        // check v-link-active ids
        var activeIds = this.el.getAttribute(LINK_UPDATE);
        if (activeIds) {
          this.el.removeAttribute(LINK_UPDATE);
          this.activeIds = activeIds.split(',');
        }
        // no need to handle click if link expects to be opened
        // in a new window/tab.
        /* istanbul ignore if */
        if (this.el.tagName === 'A' && this.el.getAttribute('target') === '_blank') {
          return;
        }
        // handle click
        this.handler = _bind(this.onClick, this);
        this.el.addEventListener('click', this.handler);
      },

      update: function update(target) {
        this.target = target;
        if (isObject(target)) {
          this.append = target.append;
          this.exact = target.exact;
          this.prevActiveClass = this.activeClass;
          this.activeClass = target.activeClass;
        }
        this.onRouteUpdate(this.vm.$route);
      },

      onClick: function onClick(e) {
        // don't redirect with control keys
        /* istanbul ignore if */
        if (e.metaKey || e.ctrlKey || e.shiftKey) return;
        // don't redirect when preventDefault called
        /* istanbul ignore if */
        if (e.defaultPrevented) return;
        // don't redirect on right click
        /* istanbul ignore if */
        if (e.button !== 0) return;

        var target = this.target;
        if (target) {
          // v-link with expression, just go
          e.preventDefault();
          this.router.go(target);
        } else {
          // no expression, delegate for an <a> inside
          var el = e.target;
          while (el.tagName !== 'A' && el !== this.el) {
            el = el.parentNode;
          }
          if (el.tagName === 'A' && sameOrigin(el)) {
            e.preventDefault();
            var path = el.pathname;
            if (this.router.history.root) {
              path = path.replace(this.router.history.rootRE, '');
            }
            this.router.go({
              path: path,
              replace: target && target.replace,
              append: target && target.append
            });
          }
        }
      },

      onRouteUpdate: function onRouteUpdate(route) {
        // router.stringifyPath is dependent on current route
        // and needs to be called again whenver route changes.
        var newPath = this.router.stringifyPath(this.target);
        if (this.path !== newPath) {
          this.path = newPath;
          this.updateActiveMatch();
          this.updateHref();
        }
        if (this.activeIds) {
          this.vm.$emit(LINK_UPDATE, this, route.path);
        } else {
          this.updateClasses(route.path, this.el);
        }
      },

      updateActiveMatch: function updateActiveMatch() {
        this.activeRE = this.path && !this.exact ? new RegExp('^' + this.path.replace(/\/$/, '').replace(queryStringRE, '').replace(regexEscapeRE, '\\$&') + '(\\/|$)') : null;
      },

      updateHref: function updateHref() {
        if (this.el.tagName !== 'A') {
          return;
        }
        var path = this.path;
        var router = this.router;
        var isAbsolute = path.charAt(0) === '/';
        // do not format non-hash relative paths
        var href = path && (router.mode === 'hash' || isAbsolute) ? router.history.formatPath(path, this.append) : path;
        if (href) {
          this.el.href = href;
        } else {
          this.el.removeAttribute('href');
        }
      },

      updateClasses: function updateClasses(path, el) {
        var activeClass = this.activeClass || this.router._linkActiveClass;
        // clear old class
        if (this.prevActiveClass && this.prevActiveClass !== activeClass) {
          toggleClasses(el, this.prevActiveClass, removeClass);
        }
        // remove query string before matching
        var dest = this.path.replace(queryStringRE, '');
        path = path.replace(queryStringRE, '');
        // add new class
        if (this.exact) {
          if (dest === path ||
          // also allow additional trailing slash
          dest.charAt(dest.length - 1) !== '/' && dest === path.replace(trailingSlashRE, '')) {
            toggleClasses(el, activeClass, addClass);
          } else {
            toggleClasses(el, activeClass, removeClass);
          }
        } else {
          if (this.activeRE && this.activeRE.test(path)) {
            toggleClasses(el, activeClass, addClass);
          } else {
            toggleClasses(el, activeClass, removeClass);
          }
        }
      },

      unbind: function unbind() {
        this.el.removeEventListener('click', this.handler);
        this.unwatch && this.unwatch();
      }
    });

    function sameOrigin(link) {
      return link.protocol === location.protocol && link.hostname === location.hostname && link.port === location.port;
    }

    // this function is copied from v-bind:class implementation until
    // we properly expose it...
    function toggleClasses(el, key, fn) {
      key = key.trim();
      if (key.indexOf(' ') === -1) {
        fn(el, key);
        return;
      }
      var keys = key.split(/\s+/);
      for (var i = 0, l = keys.length; i < l; i++) {
        fn(el, keys[i]);
      }
    }
  }

  var historyBackends = {
    abstract: AbstractHistory,
    hash: HashHistory,
    html5: HTML5History
  };

  // late bind during install
  var Vue = undefined;

  /**
   * Router constructor
   *
   * @param {Object} [options]
   */

  var Router = (function () {
    function Router() {
      var _this = this;

      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var _ref$hashbang = _ref.hashbang;
      var hashbang = _ref$hashbang === undefined ? true : _ref$hashbang;
      var _ref$abstract = _ref.abstract;
      var abstract = _ref$abstract === undefined ? false : _ref$abstract;
      var _ref$history = _ref.history;
      var history = _ref$history === undefined ? false : _ref$history;
      var _ref$saveScrollPosition = _ref.saveScrollPosition;
      var saveScrollPosition = _ref$saveScrollPosition === undefined ? false : _ref$saveScrollPosition;
      var _ref$transitionOnLoad = _ref.transitionOnLoad;
      var transitionOnLoad = _ref$transitionOnLoad === undefined ? false : _ref$transitionOnLoad;
      var _ref$suppressTransitionError = _ref.suppressTransitionError;
      var suppressTransitionError = _ref$suppressTransitionError === undefined ? false : _ref$suppressTransitionError;
      var _ref$root = _ref.root;
      var root = _ref$root === undefined ? null : _ref$root;
      var _ref$linkActiveClass = _ref.linkActiveClass;
      var linkActiveClass = _ref$linkActiveClass === undefined ? 'v-link-active' : _ref$linkActiveClass;
      babelHelpers.classCallCheck(this, Router);

      /* istanbul ignore if */
      if (!Router.installed) {
        throw new Error('Please install the Router with Vue.use() before ' + 'creating an instance.');
      }

      // Vue instances
      this.app = null;
      this._children = [];

      // route recognizer
      this._recognizer = new RouteRecognizer();
      this._guardRecognizer = new RouteRecognizer();

      // state
      this._started = false;
      this._startCb = null;
      this._currentRoute = {};
      this._currentTransition = null;
      this._previousTransition = null;
      this._notFoundHandler = null;
      this._notFoundRedirect = null;
      this._beforeEachHooks = [];
      this._afterEachHooks = [];

      // trigger transition on initial render?
      this._rendered = false;
      this._transitionOnLoad = transitionOnLoad;

      // history mode
      this._root = root;
      this._abstract = abstract;
      this._hashbang = hashbang;

      // check if HTML5 history is available
      var hasPushState = typeof window !== 'undefined' && window.history && window.history.pushState;
      this._history = history && hasPushState;
      this._historyFallback = history && !hasPushState;

      // create history object
      var inBrowser = Vue.util.inBrowser;
      this.mode = !inBrowser || this._abstract ? 'abstract' : this._history ? 'html5' : 'hash';

      var History = historyBackends[this.mode];
      this.history = new History({
        root: root,
        hashbang: this._hashbang,
        onChange: function onChange(path, state, anchor) {
          _this._match(path, state, anchor);
        }
      });

      // other options
      this._saveScrollPosition = saveScrollPosition;
      this._linkActiveClass = linkActiveClass;
      this._suppress = suppressTransitionError;
    }

    /**
     * Allow directly passing components to a route
     * definition.
     *
     * @param {String} path
     * @param {Object} handler
     */

    // API ===================================================

    /**
    * Register a map of top-level paths.
    *
    * @param {Object} map
    */

    Router.prototype.map = function map(_map) {
      for (var route in _map) {
        this.on(route, _map[route]);
      }
      return this;
    };

    /**
     * Register a single root-level path
     *
     * @param {String} rootPath
     * @param {Object} handler
     *                 - {String} component
     *                 - {Object} [subRoutes]
     *                 - {Boolean} [forceRefresh]
     *                 - {Function} [before]
     *                 - {Function} [after]
     */

    Router.prototype.on = function on(rootPath, handler) {
      if (rootPath === '*') {
        this._notFound(handler);
      } else {
        this._addRoute(rootPath, handler, []);
      }
      return this;
    };

    /**
     * Set redirects.
     *
     * @param {Object} map
     */

    Router.prototype.redirect = function redirect(map) {
      for (var path in map) {
        this._addRedirect(path, map[path]);
      }
      return this;
    };

    /**
     * Set aliases.
     *
     * @param {Object} map
     */

    Router.prototype.alias = function alias(map) {
      for (var path in map) {
        this._addAlias(path, map[path]);
      }
      return this;
    };

    /**
     * Set global before hook.
     *
     * @param {Function} fn
     */

    Router.prototype.beforeEach = function beforeEach(fn) {
      this._beforeEachHooks.push(fn);
      return this;
    };

    /**
     * Set global after hook.
     *
     * @param {Function} fn
     */

    Router.prototype.afterEach = function afterEach(fn) {
      this._afterEachHooks.push(fn);
      return this;
    };

    /**
     * Navigate to a given path.
     * The path can be an object describing a named path in
     * the format of { name: '...', params: {}, query: {}}
     * The path is assumed to be already decoded, and will
     * be resolved against root (if provided)
     *
     * @param {String|Object} path
     * @param {Boolean} [replace]
     */

    Router.prototype.go = function go(path) {
      var replace = false;
      var append = false;
      if (Vue.util.isObject(path)) {
        replace = path.replace;
        append = path.append;
      }
      path = this.stringifyPath(path);
      if (path) {
        this.history.go(path, replace, append);
      }
    };

    /**
     * Short hand for replacing current path
     *
     * @param {String} path
     */

    Router.prototype.replace = function replace(path) {
      if (typeof path === 'string') {
        path = { path: path };
      }
      path.replace = true;
      this.go(path);
    };

    /**
     * Start the router.
     *
     * @param {VueConstructor} App
     * @param {String|Element} container
     * @param {Function} [cb]
     */

    Router.prototype.start = function start(App, container, cb) {
      /* istanbul ignore if */
      if (this._started) {
        warn$1('already started.');
        return;
      }
      this._started = true;
      this._startCb = cb;
      if (!this.app) {
        /* istanbul ignore if */
        if (!App || !container) {
          throw new Error('Must start vue-router with a component and a ' + 'root container.');
        }
        /* istanbul ignore if */
        if (App instanceof Vue) {
          throw new Error('Must start vue-router with a component, not a ' + 'Vue instance.');
        }
        this._appContainer = container;
        var Ctor = this._appConstructor = typeof App === 'function' ? App : Vue.extend(App);
        // give it a name for better debugging
        Ctor.options.name = Ctor.options.name || 'RouterApp';
      }

      // handle history fallback in browsers that do not
      // support HTML5 history API
      if (this._historyFallback) {
        var _location = window.location;
        var _history = new HTML5History({ root: this._root });
        var path = _history.root ? _location.pathname.replace(_history.rootRE, '') : _location.pathname;
        if (path && path !== '/') {
          _location.assign((_history.root || '') + '/' + this.history.formatPath(path) + _location.search);
          return;
        }
      }

      this.history.start();
    };

    /**
     * Stop listening to route changes.
     */

    Router.prototype.stop = function stop() {
      this.history.stop();
      this._started = false;
    };

    /**
     * Normalize named route object / string paths into
     * a string.
     *
     * @param {Object|String|Number} path
     * @return {String}
     */

    Router.prototype.stringifyPath = function stringifyPath(path) {
      var generatedPath = '';
      if (path && typeof path === 'object') {
        if (path.name) {
          var extend = Vue.util.extend;
          var currentParams = this._currentTransition && this._currentTransition.to.params;
          var targetParams = path.params || {};
          var params = currentParams ? extend(extend({}, currentParams), targetParams) : targetParams;
          generatedPath = encodeURI(this._recognizer.generate(path.name, params));
        } else if (path.path) {
          generatedPath = encodeURI(path.path);
        }
        if (path.query) {
          // note: the generated query string is pre-URL-encoded by the recognizer
          var query = this._recognizer.generateQueryString(path.query);
          if (generatedPath.indexOf('?') > -1) {
            generatedPath += '&' + query.slice(1);
          } else {
            generatedPath += query;
          }
        }
      } else {
        generatedPath = encodeURI(path ? path + '' : '');
      }
      return generatedPath;
    };

    // Internal methods ======================================

    /**
    * Add a route containing a list of segments to the internal
    * route recognizer. Will be called recursively to add all
    * possible sub-routes.
    *
    * @param {String} path
    * @param {Object} handler
    * @param {Array} segments
    */

    Router.prototype._addRoute = function _addRoute(path, handler, segments) {
      guardComponent(path, handler);
      handler.path = path;
      handler.fullPath = (segments.reduce(function (path, segment) {
        return path + segment.path;
      }, '') + path).replace('//', '/');
      segments.push({
        path: path,
        handler: handler
      });
      this._recognizer.add(segments, {
        as: handler.name
      });
      // add sub routes
      if (handler.subRoutes) {
        for (var subPath in handler.subRoutes) {
          // recursively walk all sub routes
          this._addRoute(subPath, handler.subRoutes[subPath],
          // pass a copy in recursion to avoid mutating
          // across branches
          segments.slice());
        }
      }
    };

    /**
     * Set the notFound route handler.
     *
     * @param {Object} handler
     */

    Router.prototype._notFound = function _notFound(handler) {
      guardComponent('*', handler);
      this._notFoundHandler = [{ handler: handler }];
    };

    /**
     * Add a redirect record.
     *
     * @param {String} path
     * @param {String} redirectPath
     */

    Router.prototype._addRedirect = function _addRedirect(path, redirectPath) {
      if (path === '*') {
        this._notFoundRedirect = redirectPath;
      } else {
        this._addGuard(path, redirectPath, this.replace);
      }
    };

    /**
     * Add an alias record.
     *
     * @param {String} path
     * @param {String} aliasPath
     */

    Router.prototype._addAlias = function _addAlias(path, aliasPath) {
      this._addGuard(path, aliasPath, this._match);
    };

    /**
     * Add a path guard.
     *
     * @param {String} path
     * @param {String} mappedPath
     * @param {Function} handler
     */

    Router.prototype._addGuard = function _addGuard(path, mappedPath, _handler) {
      var _this2 = this;

      this._guardRecognizer.add([{
        path: path,
        handler: function handler(match, query) {
          var realPath = mapParams(mappedPath, match.params, query);
          _handler.call(_this2, realPath);
        }
      }]);
    };

    /**
     * Check if a path matches any redirect records.
     *
     * @param {String} path
     * @return {Boolean} - if true, will skip normal match.
     */

    Router.prototype._checkGuard = function _checkGuard(path) {
      var matched = this._guardRecognizer.recognize(path, true);
      if (matched) {
        matched[0].handler(matched[0], matched.queryParams);
        return true;
      } else if (this._notFoundRedirect) {
        matched = this._recognizer.recognize(path);
        if (!matched) {
          this.replace(this._notFoundRedirect);
          return true;
        }
      }
    };

    /**
     * Match a URL path and set the route context on vm,
     * triggering view updates.
     *
     * @param {String} path
     * @param {Object} [state]
     * @param {String} [anchor]
     */

    Router.prototype._match = function _match(path, state, anchor) {
      var _this3 = this;

      if (this._checkGuard(path)) {
        return;
      }

      var currentRoute = this._currentRoute;
      var currentTransition = this._currentTransition;

      if (currentTransition) {
        if (currentTransition.to.path === path) {
          // do nothing if we have an active transition going to the same path
          return;
        } else if (currentRoute.path === path) {
          // We are going to the same path, but we also have an ongoing but
          // not-yet-validated transition. Abort that transition and reset to
          // prev transition.
          currentTransition.aborted = true;
          this._currentTransition = this._prevTransition;
          return;
        } else {
          // going to a totally different path. abort ongoing transition.
          currentTransition.aborted = true;
        }
      }

      // construct new route and transition context
      var route = new Route(path, this);
      var transition = new RouteTransition(this, route, currentRoute);

      // current transition is updated right now.
      // however, current route will only be updated after the transition has
      // been validated.
      this._prevTransition = currentTransition;
      this._currentTransition = transition;

      if (!this.app) {
        (function () {
          // initial render
          var router = _this3;
          _this3.app = new _this3._appConstructor({
            el: _this3._appContainer,
            created: function created() {
              this.$router = router;
            },
            _meta: {
              $route: route
            }
          });
        })();
      }

      // check global before hook
      var beforeHooks = this._beforeEachHooks;
      var startTransition = function startTransition() {
        transition.start(function () {
          _this3._postTransition(route, state, anchor);
        });
      };

      if (beforeHooks.length) {
        transition.runQueue(beforeHooks, function (hook, _, next) {
          if (transition === _this3._currentTransition) {
            transition.callHook(hook, null, next, {
              expectBoolean: true
            });
          }
        }, startTransition);
      } else {
        startTransition();
      }

      if (!this._rendered && this._startCb) {
        this._startCb.call(null);
      }

      // HACK:
      // set rendered to true after the transition start, so
      // that components that are acitvated synchronously know
      // whether it is the initial render.
      this._rendered = true;
    };

    /**
     * Set current to the new transition.
     * This is called by the transition object when the
     * validation of a route has succeeded.
     *
     * @param {Transition} transition
     */

    Router.prototype._onTransitionValidated = function _onTransitionValidated(transition) {
      // set current route
      var route = this._currentRoute = transition.to;
      // update route context for all children
      if (this.app.$route !== route) {
        this.app.$route = route;
        this._children.forEach(function (child) {
          child.$route = route;
        });
      }
      // call global after hook
      if (this._afterEachHooks.length) {
        this._afterEachHooks.forEach(function (hook) {
          return hook.call(null, {
            to: transition.to,
            from: transition.from
          });
        });
      }
      this._currentTransition.done = true;
    };

    /**
     * Handle stuff after the transition.
     *
     * @param {Route} route
     * @param {Object} [state]
     * @param {String} [anchor]
     */

    Router.prototype._postTransition = function _postTransition(route, state, anchor) {
      // handle scroll positions
      // saved scroll positions take priority
      // then we check if the path has an anchor
      var pos = state && state.pos;
      if (pos && this._saveScrollPosition) {
        Vue.nextTick(function () {
          window.scrollTo(pos.x, pos.y);
        });
      } else if (anchor) {
        Vue.nextTick(function () {
          var el = document.getElementById(anchor.slice(1));
          if (el) {
            window.scrollTo(window.scrollX, el.offsetTop);
          }
        });
      }
    };

    return Router;
  })();

  function guardComponent(path, handler) {
    var comp = handler.component;
    if (Vue.util.isPlainObject(comp)) {
      comp = handler.component = Vue.extend(comp);
    }
    /* istanbul ignore if */
    if (typeof comp !== 'function') {
      handler.component = null;
      warn$1('invalid component for route "' + path + '".');
    }
  }

  /* Installation */

  Router.installed = false;

  /**
   * Installation interface.
   * Install the necessary directives.
   */

  Router.install = function (externalVue) {
    /* istanbul ignore if */
    if (Router.installed) {
      warn$1('already installed.');
      return;
    }
    Vue = externalVue;
    applyOverride(Vue);
    View(Vue);
    Link(Vue);
    exports$1.Vue = Vue;
    Router.installed = true;
  };

  // auto install
  /* istanbul ignore if */
  if (typeof window !== 'undefined' && window.Vue) {
    window.Vue.use(Router);
  }

  return Router;

}));
},{}],29:[function(require,module,exports){
(function (process){
/*!
 * vue-validator v2.1.5
 * (c) 2016 kazuya kawaguchi
 * Released under the MIT License.
 */
'use strict';

var babelHelpers = {};
babelHelpers.typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
};

babelHelpers.classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

babelHelpers.createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

babelHelpers.inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

babelHelpers.possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

babelHelpers;
/**
 * Utilties
 */

// export default for holding the Vue reference
var exports$1 = {};
/**
 * warn
 *
 * @param {String} msg
 * @param {Error} [err]
 *
 */

function warn(msg, err) {
  if (window.console) {
    console.warn('[vue-validator] ' + msg);
    if (err) {
      console.warn(err.stack);
    }
  }
}

/**
 * empty
 *
 * @param {Array|Object} target
 * @return {Boolean}
 */

function empty(target) {
  if (target === null || target === undefined) {
    return true;
  }

  if (Array.isArray(target)) {
    if (target.length > 0) {
      return false;
    }
    if (target.length === 0) {
      return true;
    }
  } else if (exports$1.Vue.util.isPlainObject(target)) {
    for (var key in target) {
      if (exports$1.Vue.util.hasOwn(target, key)) {
        return false;
      }
    }
  }

  return true;
}

/**
 * each
 *
 * @param {Array|Object} target
 * @param {Function} iterator
 * @param {Object} [context]
 */

function each(target, iterator, context) {
  if (Array.isArray(target)) {
    for (var i = 0; i < target.length; i++) {
      iterator.call(context || target[i], target[i], i);
    }
  } else if (exports$1.Vue.util.isPlainObject(target)) {
    var hasOwn = exports$1.Vue.util.hasOwn;
    for (var key in target) {
      if (hasOwn(target, key)) {
        iterator.call(context || target[key], target[key], key);
      }
    }
  }
}

/**
 * pull
 *
 * @param {Array} arr
 * @param {Object} item
 * @return {Object|null}
 */

function pull(arr, item) {
  var index = exports$1.Vue.util.indexOf(arr, item);
  return ~index ? arr.splice(index, 1) : null;
}

/**
 * trigger
 *
 * @param {Element} el
 * @param {String} event
 * @param {Object} [args]
 */

function trigger(el, event, args) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(event, true, false);

  if (args) {
    for (var prop in args) {
      e[prop] = args[prop];
    }
  }

  // Due to Firefox bug, events fired on disabled
  // non-attached form controls can throw errors
  try {
    el.dispatchEvent(e);
  } catch (e) {}
}

/**
 * Forgiving check for a promise
 *
 * @param {Object} p
 * @return {Boolean}
 */

function isPromise(p) {
  return p && typeof p.then === 'function';
}

/**
 * Togging classes
 *
 * @param {Element} el
 * @param {String} key
 * @param {Function} fn
 */

function toggleClasses(el, key, fn) {
  key = key.trim();
  if (key.indexOf(' ') === -1) {
    fn(el, key);
    return;
  }

  var keys = key.split(/\s+/);
  for (var i = 0, l = keys.length; i < l; i++) {
    fn(el, keys[i]);
  }
}

/**
 * Fundamental validate functions
 */

/**
 * required
 *
 * This function validate whether the value has been filled out.
 *
 * @param {*} val
 * @return {Boolean}
 */

function required(val) {
  if (Array.isArray(val)) {
    if (val.length !== 0) {
      var valid = true;
      for (var i = 0, l = val.length; i < l; i++) {
        valid = required(val[i]);
        if (!valid) {
          break;
        }
      }
      return valid;
    } else {
      return false;
    }
  } else if (typeof val === 'number' || typeof val === 'function') {
    return true;
  } else if (typeof val === 'boolean') {
    return val;
  } else if (typeof val === 'string') {
    return val.length > 0;
  } else if (val !== null && (typeof val === 'undefined' ? 'undefined' : babelHelpers.typeof(val)) === 'object') {
    return Object.keys(val).length > 0;
  } else if (val === null || val === undefined) {
    return false;
  }
}

/**
 * pattern
 *
 * This function validate whether the value matches the regex pattern
 *
 * @param val
 * @param {String} pat
 * @return {Boolean}
 */

function pattern(val, pat) {
  if (typeof pat !== 'string') {
    return false;
  }

  var match = pat.match(new RegExp('^/(.*?)/([gimy]*)$'));
  if (!match) {
    return false;
  }

  return new RegExp(match[1], match[2]).test(val);
}

/**
 * minlength
 *
 * This function validate whether the minimum length.
 *
 * @param {String|Array} val
 * @param {String|Number} min
 * @return {Boolean}
 */

function minlength(val, min) {
  if (typeof val === 'string') {
    return isInteger(min, 10) && val.length >= parseInt(min, 10);
  } else if (Array.isArray(val)) {
    return val.length >= parseInt(min, 10);
  } else {
    return false;
  }
}

/**
 * maxlength
 *
 * This function validate whether the maximum length.
 *
 * @param {String|Array} val
 * @param {String|Number} max
 * @return {Boolean}
 */

function maxlength(val, max) {
  if (typeof val === 'string') {
    return isInteger(max, 10) && val.length <= parseInt(max, 10);
  } else if (Array.isArray(val)) {
    return val.length <= parseInt(max, 10);
  } else {
    return false;
  }
}

/**
 * min
 *
 * This function validate whether the minimum value of the numberable value.
 *
 * @param {*} val
 * @param {*} arg minimum
 * @return {Boolean}
 */

function min(val, arg) {
  return !isNaN(+val) && !isNaN(+arg) && +val >= +arg;
}

/**
 * max
 *
 * This function validate whether the maximum value of the numberable value.
 *
 * @param {*} val
 * @param {*} arg maximum
 * @return {Boolean}
 */

function max(val, arg) {
  return !isNaN(+val) && !isNaN(+arg) && +val <= +arg;
}

/**
 * isInteger
 *
 * This function check whether the value of the string is integer.
 *
 * @param {String} val
 * @return {Boolean}
 * @private
 */

function isInteger(val) {
  return (/^(-?[1-9]\d*|0)$/.test(val)
  );
}

var validators = Object.freeze({
  required: required,
  pattern: pattern,
  minlength: minlength,
  maxlength: maxlength,
  min: min,
  max: max
});

function Asset (Vue) {
  var extend = Vue.util.extend;

  // set global validators asset
  var assets = Object.create(null);
  extend(assets, validators);
  Vue.options.validators = assets;

  // set option merge strategy
  var strats = Vue.config.optionMergeStrategies;
  if (strats) {
    strats.validators = function (parent, child) {
      if (!child) {
        return parent;
      }
      if (!parent) {
        return child;
      }
      var ret = Object.create(null);
      extend(ret, parent);
      for (var key in child) {
        ret[key] = child[key];
      }
      return ret;
    };
  }

  /**
   * Register or retrieve a global validator definition.
   *
   * @param {String} id
   * @param {Function} definition
   */

  Vue.validator = function (id, definition) {
    if (!definition) {
      return Vue.options['validators'][id];
    } else {
      Vue.options['validators'][id] = definition;
    }
  };
}

function Override (Vue) {
  // override _init
  var init = Vue.prototype._init;
  Vue.prototype._init = function (options) {
    if (!this._validatorMaps) {
      this._validatorMaps = Object.create(null);
    }
    init.call(this, options);
  };

  // override _destroy
  var destroy = Vue.prototype._destroy;
  Vue.prototype._destroy = function () {
    destroy.apply(this, arguments);
    this._validatorMaps = null;
  };
}

var VALIDATE_UPDATE = '__vue-validator-validate-update__';
var PRIORITY_VALIDATE = 16;
var PRIORITY_VALIDATE_CLASS = 32;
var REGEX_FILTER = /[^|]\|[^|]/;
var REGEX_VALIDATE_DIRECTIVE = /^v-validate(?:$|:(.*)$)/;
var REGEX_EVENT = /^v-on:|^@/;

var classId = 0; // ID for validation class

function ValidateClass (Vue) {
  var vIf = Vue.directive('if');
  var FragmentFactory = Vue.FragmentFactory;
  var _Vue$util = Vue.util;
  var toArray = _Vue$util.toArray;
  var replace = _Vue$util.replace;
  var createAnchor = _Vue$util.createAnchor;

  /**
   * `v-validate-class` directive
   */

  Vue.directive('validate-class', {
    terminal: true,
    priority: vIf.priority + PRIORITY_VALIDATE_CLASS,

    bind: function bind() {
      var _this = this;

      var id = String(classId++);
      this.setClassIds(this.el, id);

      this.vm.$on(VALIDATE_UPDATE, this.cb = function (classIds, validation, results) {
        if (classIds.indexOf(id) > -1) {
          validation.updateClasses(results, _this.frag.node);
        }
      });

      this.setupFragment();
    },
    unbind: function unbind() {
      this.vm.$off(VALIDATE_UPDATE, this.cb);
      this.teardownFragment();
    },
    setClassIds: function setClassIds(el, id) {
      var childNodes = toArray(el.childNodes);
      for (var i = 0, l = childNodes.length; i < l; i++) {
        var element = childNodes[i];
        if (element.nodeType === 1) {
          var hasAttrs = element.hasAttributes();
          var attrs = hasAttrs && toArray(element.attributes);
          for (var k = 0, _l = attrs.length; k < _l; k++) {
            var attr = attrs[k];
            if (attr.name.match(REGEX_VALIDATE_DIRECTIVE)) {
              var existingId = element.getAttribute(VALIDATE_UPDATE);
              var value = existingId ? existingId + ',' + id : id;
              element.setAttribute(VALIDATE_UPDATE, value);
            }
          }
        }

        if (element.hasChildNodes()) {
          this.setClassIds(element, id);
        }
      }
    },
    setupFragment: function setupFragment() {
      this.anchor = createAnchor('v-validate-class');
      replace(this.el, this.anchor);

      this.factory = new FragmentFactory(this.vm, this.el);
      this.frag = this.factory.create(this._host, this._scope, this._frag);
      this.frag.before(this.anchor);
    },
    teardownFragment: function teardownFragment() {
      if (this.frag) {
        this.frag.remove();
        this.frag = null;
        this.factory = null;
      }

      replace(this.anchor, this.el);
      this.anchor = null;
    }
  });
}

function Validate (Vue) {
  var vIf = Vue.directive('if');
  var FragmentFactory = Vue.FragmentFactory;
  var parseDirective = Vue.parsers.directive.parseDirective;
  var _Vue$util = Vue.util;
  var inBrowser = _Vue$util.inBrowser;
  var bind = _Vue$util.bind;
  var on = _Vue$util.on;
  var off = _Vue$util.off;
  var createAnchor = _Vue$util.createAnchor;
  var replace = _Vue$util.replace;
  var camelize = _Vue$util.camelize;
  var isPlainObject = _Vue$util.isPlainObject;

  // Test for IE10/11 textarea placeholder clone bug

  function checkTextareaCloneBug() {
    if (inBrowser) {
      var t = document.createElement('textarea');
      t.placeholder = 't';
      return t.cloneNode(true).value === 't';
    } else {
      return false;
    }
  }
  var hasTextareaCloneBug = checkTextareaCloneBug();

  /**
   * `v-validate` directive
   */

  Vue.directive('validate', {
    deep: true,
    terminal: true,
    priority: vIf.priority + PRIORITY_VALIDATE,
    params: ['group', 'field', 'detect-blur', 'detect-change', 'initial', 'classes'],

    paramWatchers: {
      detectBlur: function detectBlur(val, old) {
        if (this._invalid) {
          return;
        }
        this.validation.detectBlur = this.isDetectBlur(val);
        this.validator.validate(this.field);
      },
      detectChange: function detectChange(val, old) {
        if (this._invalid) {
          return;
        }
        this.validation.detectChange = this.isDetectChange(val);
        this.validator.validate(this.field);
      }
    },

    bind: function bind() {
      var el = this.el;

      if (process.env.NODE_ENV !== 'production' && el.__vue__) {
        warn('v-validate="' + this.expression + '" cannot be used on an instance root element.');
        this._invalid = true;
        return;
      }

      if (process.env.NODE_ENV !== 'production' && (el.hasAttribute('v-if') || el.hasAttribute('v-for'))) {
        warn('v-validate cannot be used `v-if` or `v-for` build-in terminal directive ' + 'on an element. these is wrapped with `<template>` or other tags: ' + '(e.g. <validator name="validator">' + '<template v-if="hidden">' + '<input type="text" v-validate:field1="[\'required\']">' + '</template>' + '</validator>).');
        this._invalid = true;
        return;
      }

      if (process.env.NODE_ENV !== 'production' && !(this.arg || this.params.field)) {
        warn('you need specify field name for v-validate directive.');
        this._invalid = true;
        return;
      }

      var validatorName = this.vm.$options._validator;
      if (process.env.NODE_ENV !== 'production' && !validatorName) {
        warn('you need to wrap the elements to be validated in a <validator> element: ' + '(e.g. <validator name="validator">' + '<input type="text" v-validate:field1="[\'required\']">' + '</validator>).');
        this._invalid = true;
        return;
      }

      var raw = el.getAttribute('v-model');

      var _parseModelRaw = this.parseModelRaw(raw);

      var model = _parseModelRaw.model;
      var filters = _parseModelRaw.filters;

      this.model = model;

      this.setupFragment();
      this.setupValidate(validatorName, model, filters);
      this.listen();
    },
    update: function update(value, old) {
      if (!value || this._invalid) {
        return;
      }

      if (isPlainObject(value) || old && isPlainObject(old)) {
        this.handleObject(value, old);
      } else if (Array.isArray(value) || old && Array.isArray(old)) {
        this.handleArray(value, old);
      }

      var options = { field: this.field, noopable: this._initialNoopValidation };
      if (this.frag) {
        options.el = this.frag.node;
      }
      this.validator.validate(options);

      if (this._initialNoopValidation) {
        this._initialNoopValidation = null;
      }
    },
    unbind: function unbind() {
      if (this._invalid) {
        return;
      }

      this.unlisten();
      this.teardownValidate();
      this.teardownFragment();

      this.model = null;
    },
    parseModelRaw: function parseModelRaw(raw) {
      if (REGEX_FILTER.test(raw)) {
        var parsed = parseDirective(raw);
        return { model: parsed.expression, filters: parsed.filters };
      } else {
        return { model: raw };
      }
    },
    setupValidate: function setupValidate(name, model, filters) {
      var params = this.params;
      var validator = this.validator = this.vm._validatorMaps[name];

      this.field = camelize(this.arg ? this.arg : params.field);

      this.validation = validator.manageValidation(this.field, model, this.vm, this.getElementFrom(this.frag), this._scope, filters, params.initial, this.isDetectBlur(params.detectBlur), this.isDetectChange(params.detectChange));

      isPlainObject(params.classes) && this.validation.setValidationClasses(params.classes);

      params.group && validator.addGroupValidation(params.group, this.field);

      this._initialNoopValidation = this.isInitialNoopValidation(params.initial);
    },
    listen: function listen() {
      var model = this.model;
      var validation = this.validation;
      var el = this.getElementFrom(this.frag);

      this.onBlur = bind(validation.listener, validation);
      on(el, 'blur', this.onBlur);
      if ((el.type === 'radio' || el.tagName === 'SELECT') && !model) {
        this.onChange = bind(validation.listener, validation);
        on(el, 'change', this.onChange);
      } else if (el.type === 'checkbox') {
        if (!model) {
          this.onChange = bind(validation.listener, validation);
          on(el, 'change', this.onChange);
        } else {
          this.onClick = bind(validation.listener, validation);
          on(el, 'click', this.onClick);
        }
      } else {
        if (!model) {
          this.onInput = bind(validation.listener, validation);
          on(el, 'input', this.onInput);
        }
      }
    },
    unlisten: function unlisten() {
      var el = this.getElementFrom(this.frag);

      if (this.onInput) {
        off(el, 'input', this.onInput);
        this.onInput = null;
      }

      if (this.onClick) {
        off(el, 'click', this.onClick);
        this.onClick = null;
      }

      if (this.onChange) {
        off(el, 'change', this.onChange);
        this.onChange = null;
      }

      if (this.onBlur) {
        off(el, 'blur', this.onBlur);
        this.onBlur = null;
      }
    },
    teardownValidate: function teardownValidate() {
      if (this.validator && this.validation) {
        var el = this.getElementFrom(this.frag);

        this.params.group && this.validator.removeGroupValidation(this.params.group, this.field);

        this.validator.unmanageValidation(this.field, el);

        this.validator = null;
        this.validation = null;
        this.field = null;
      }
    },
    setupFragment: function setupFragment() {
      this.anchor = createAnchor('v-validate');
      replace(this.el, this.anchor);

      this.factory = new FragmentFactory(this.vm, this.shimNode(this.el));
      this.frag = this.factory.create(this._host, this._scope, this._frag);
      this.frag.before(this.anchor);
    },
    teardownFragment: function teardownFragment() {
      if (this.frag) {
        this.frag.remove();
        this.frag = null;
        this.factory = null;
      }

      replace(this.anchor, this.el);
      this.anchor = null;
    },
    handleArray: function handleArray(value, old) {
      var _this = this;

      old && this.validation.resetValidation();

      each(value, function (val) {
        _this.validation.setValidation(val);
      });
    },
    handleObject: function handleObject(value, old) {
      var _this2 = this;

      old && this.validation.resetValidation();

      each(value, function (val, key) {
        if (isPlainObject(val)) {
          if ('rule' in val) {
            var msg = 'message' in val ? val.message : null;
            var initial = 'initial' in val ? val.initial : null;
            _this2.validation.setValidation(key, val.rule, msg, initial);
          }
        } else {
          _this2.validation.setValidation(key, val);
        }
      });
    },
    isDetectBlur: function isDetectBlur(detectBlur) {
      return detectBlur === undefined || detectBlur === 'on' || detectBlur === true;
    },
    isDetectChange: function isDetectChange(detectChange) {
      return detectChange === undefined || detectChange === 'on' || detectChange === true;
    },
    isInitialNoopValidation: function isInitialNoopValidation(initial) {
      return initial === 'off' || initial === false;
    },
    shimNode: function shimNode(node) {
      var ret = node;
      if (hasTextareaCloneBug) {
        if (node.tagName === 'TEXTAREA') {
          ret = node.cloneNode(true);
          ret.value = node.value;
          var i = ret.childNodes.length;
          while (i--) {
            ret.removeChild(ret.childNodes[i]);
          }
        }
      }
      return ret;
    },
    getElementFrom: function getElementFrom(frag) {
      return frag.single ? frag.node : frag.node.nextSibling;
    }
  });
}

/**
 * BaseValidation class
 */

var BaseValidation = function () {
  function BaseValidation(field, model, vm, el, scope, validator, filters, detectBlur, detectChange) {
    babelHelpers.classCallCheck(this, BaseValidation);

    this.field = field;
    this.touched = false;
    this.dirty = false;
    this.modified = false;

    this._modified = false;
    this._model = model;
    this._filters = filters;
    this._validator = validator;
    this._vm = vm;
    this._el = el;
    this._forScope = scope;
    this._init = this._getValue(el);
    this._validators = {};
    this._detectBlur = detectBlur;
    this._detectChange = detectChange;
    this._classes = {};
  }

  BaseValidation.prototype.manageElement = function manageElement(el, initial) {
    var _this = this;

    var scope = this._getScope();
    var model = this._model;

    this._initial = initial;

    var classIds = el.getAttribute(VALIDATE_UPDATE);
    if (classIds) {
      el.removeAttribute(VALIDATE_UPDATE);
      this._classIds = classIds.split(',');
    }

    if (model) {
      el.value = this._evalModel(model, this._filters);
      this._unwatch = scope.$watch(model, function (val, old) {
        if (val !== old) {
          if (_this.guardValidate(el, 'input')) {
            return;
          }

          _this.handleValidate(el, { noopable: _this._initial });
          if (_this._initial) {
            _this._initial = null;
          }
        }
      }, { deep: true });
    }
  };

  BaseValidation.prototype.unmanageElement = function unmanageElement(el) {
    this._unwatch && this._unwatch();
  };

  BaseValidation.prototype.resetValidation = function resetValidation() {
    var _this2 = this;

    var keys = Object.keys(this._validators);
    each(keys, function (key, index) {
      _this2._validators[key] = null;
      delete _this2._validators[key];
    });
  };

  BaseValidation.prototype.setValidation = function setValidation(name, arg, msg, initial) {
    var validator = this._validators[name];
    if (!validator) {
      validator = this._validators[name] = {};
      validator.name = name;
    }

    validator.arg = arg;
    if (msg) {
      validator.msg = msg;
    }

    if (initial) {
      validator.initial = initial;
      validator._isNoopable = true;
    }
  };

  BaseValidation.prototype.setValidationClasses = function setValidationClasses(classes) {
    var _this3 = this;

    each(classes, function (value, key) {
      _this3._classes[key] = value;
    });
  };

  BaseValidation.prototype.willUpdateFlags = function willUpdateFlags() {
    var touched = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

    touched && this.willUpdateTouched(this._el, 'blur');
    this.willUpdateDirty(this._el);
    this.willUpdateModified(this._el);
  };

  BaseValidation.prototype.willUpdateTouched = function willUpdateTouched(el, type) {
    if (type && type === 'blur') {
      this.touched = true;
      this._fireEvent(el, 'touched');
    }
  };

  BaseValidation.prototype.willUpdateDirty = function willUpdateDirty(el) {
    if (!this.dirty && this._checkModified(el)) {
      this.dirty = true;
      this._fireEvent(el, 'dirty');
    }
  };

  BaseValidation.prototype.willUpdateModified = function willUpdateModified(el) {
    this.modified = this._checkModified(el);
    if (this._modified !== this.modified) {
      this._fireEvent(el, 'modified', { modified: this.modified });
      this._modified = this.modified;
    }
  };

  BaseValidation.prototype.listener = function listener(e) {
    if (this.guardValidate(e.target, e.type)) {
      return;
    }

    this.handleValidate(e.target, { type: e.type });
  };

  BaseValidation.prototype.handleValidate = function handleValidate(el) {
    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var _ref$type = _ref.type;
    var type = _ref$type === undefined ? null : _ref$type;
    var _ref$noopable = _ref.noopable;
    var noopable = _ref$noopable === undefined ? false : _ref$noopable;

    this.willUpdateTouched(el, type);
    this.willUpdateDirty(el);
    this.willUpdateModified(el);

    this._validator.validate({ field: this.field, el: el, noopable: noopable });
  };

  BaseValidation.prototype.validate = function validate(cb) {
    var _this4 = this;

    var noopable = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    var el = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

    var _ = exports$1.Vue.util;

    var results = {};
    var errors = [];
    var valid = true;

    this._runValidators(function (descriptor, name, done) {
      var asset = _this4._resolveValidator(name);
      var validator = null;
      var msg = null;

      if (_.isPlainObject(asset)) {
        if (asset.check && typeof asset.check === 'function') {
          validator = asset.check;
        }
        if (asset.message) {
          msg = asset.message;
        }
      } else if (typeof asset === 'function') {
        validator = asset;
      }

      if (descriptor.msg) {
        msg = descriptor.msg;
      }

      if (noopable) {
        results[name] = false;
        return done();
      }

      if (descriptor._isNoopable) {
        results[name] = false;
        descriptor._isNoopable = null;
        return done();
      }

      if (validator) {
        var value = _this4._getValue(_this4._el);
        _this4._invokeValidator(_this4._vm, validator, value, descriptor.arg, function (ret, err) {
          if (!ret) {
            valid = false;
            if (err) {
              // async error message
              errors.push({ validator: name, message: err });
              results[name] = err;
            } else if (msg) {
              var error = { validator: name };
              error.message = typeof msg === 'function' ? msg.call(_this4._vm, _this4.field, descriptor.arg) : msg;
              errors.push(error);
              results[name] = error.message;
            } else {
              results[name] = !ret;
            }
          } else {
            results[name] = !ret;
          }

          done();
        });
      } else {
        done();
      }
    }, function () {
      // finished
      _this4._fireEvent(_this4._el, valid ? 'valid' : 'invalid');

      var props = {
        valid: valid,
        invalid: !valid,
        touched: _this4.touched,
        untouched: !_this4.touched,
        dirty: _this4.dirty,
        pristine: !_this4.dirty,
        modified: _this4.modified
      };
      if (!empty(errors)) {
        props.errors = errors;
      }
      _.extend(results, props);

      _this4.willUpdateClasses(results, el);

      cb(results);
    });
  };

  BaseValidation.prototype.resetFlags = function resetFlags() {
    this.touched = false;
    this.dirty = false;
    this.modified = false;
    this._modified = false;
  };

  BaseValidation.prototype.reset = function reset() {
    each(this._validators, function (descriptor, key) {
      if (descriptor.initial && !descriptor._isNoopable) {
        descriptor._isNoopable = true;
      }
    });
    this.resetFlags();
    this._init = this._getValue(this._el);
  };

  BaseValidation.prototype.willUpdateClasses = function willUpdateClasses(results) {
    var _this5 = this;

    var el = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

    if (this._checkClassIds(el)) {
      (function () {
        var classIds = _this5._getClassIds(el);
        _this5.vm.$nextTick(function () {
          _this5.vm.$emit(VALIDATE_UPDATE, classIds, _this5, results);
        });
      })();
    } else {
      this.updateClasses(results);
    }
  };

  BaseValidation.prototype.updateClasses = function updateClasses(results) {
    var el = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

    this._updateClasses(el || this._el, results);
  };

  BaseValidation.prototype.guardValidate = function guardValidate(el, type) {
    if (type && type === 'blur' && !this.detectBlur) {
      return true;
    }

    if (type && type === 'input' && !this.detectChange) {
      return true;
    }

    if (type && type === 'change' && !this.detectChange) {
      return true;
    }

    if (type && type === 'click' && !this.detectChange) {
      return true;
    }

    return false;
  };

  BaseValidation.prototype._getValue = function _getValue(el) {
    return el.value;
  };

  BaseValidation.prototype._getScope = function _getScope() {
    return this._forScope || this._vm;
  };

  BaseValidation.prototype._getClassIds = function _getClassIds(el) {
    return this._classIds;
  };

  BaseValidation.prototype._checkModified = function _checkModified(target) {
    return this._init !== this._getValue(target);
  };

  BaseValidation.prototype._checkClassIds = function _checkClassIds(el) {
    return this._getClassIds(el);
  };

  BaseValidation.prototype._fireEvent = function _fireEvent(el, type, args) {
    trigger(el, type, args);
  };

  BaseValidation.prototype._evalModel = function _evalModel(model, filters) {
    var scope = this._getScope();

    var val = null;
    if (filters) {
      val = scope.$get(model);
      return filters ? this._applyFilters(val, null, filters) : val;
    } else {
      val = scope.$get(model);
      return val === undefined || val === null ? '' : val;
    }
  };

  BaseValidation.prototype._updateClasses = function _updateClasses(el, results) {
    this._toggleValid(el, results.valid);
    this._toggleTouched(el, results.touched);
    this._togglePristine(el, results.pristine);
    this._toggleModfied(el, results.modified);
  };

  BaseValidation.prototype._toggleValid = function _toggleValid(el, valid) {
    var _util$Vue$util = exports$1.Vue.util;
    var addClass = _util$Vue$util.addClass;
    var removeClass = _util$Vue$util.removeClass;

    var validClass = this._classes.valid || 'valid';
    var invalidClass = this._classes.invalid || 'invalid';

    if (valid) {
      toggleClasses(el, validClass, addClass);
      toggleClasses(el, invalidClass, removeClass);
    } else {
      toggleClasses(el, validClass, removeClass);
      toggleClasses(el, invalidClass, addClass);
    }
  };

  BaseValidation.prototype._toggleTouched = function _toggleTouched(el, touched) {
    var _util$Vue$util2 = exports$1.Vue.util;
    var addClass = _util$Vue$util2.addClass;
    var removeClass = _util$Vue$util2.removeClass;

    var touchedClass = this._classes.touched || 'touched';
    var untouchedClass = this._classes.untouched || 'untouched';

    if (touched) {
      toggleClasses(el, touchedClass, addClass);
      toggleClasses(el, untouchedClass, removeClass);
    } else {
      toggleClasses(el, touchedClass, removeClass);
      toggleClasses(el, untouchedClass, addClass);
    }
  };

  BaseValidation.prototype._togglePristine = function _togglePristine(el, pristine) {
    var _util$Vue$util3 = exports$1.Vue.util;
    var addClass = _util$Vue$util3.addClass;
    var removeClass = _util$Vue$util3.removeClass;

    var pristineClass = this._classes.pristine || 'pristine';
    var dirtyClass = this._classes.dirty || 'dirty';

    if (pristine) {
      toggleClasses(el, pristineClass, addClass);
      toggleClasses(el, dirtyClass, removeClass);
    } else {
      toggleClasses(el, pristineClass, removeClass);
      toggleClasses(el, dirtyClass, addClass);
    }
  };

  BaseValidation.prototype._toggleModfied = function _toggleModfied(el, modified) {
    var _util$Vue$util4 = exports$1.Vue.util;
    var addClass = _util$Vue$util4.addClass;
    var removeClass = _util$Vue$util4.removeClass;

    var modifiedClass = this._classes.modified || 'modified';

    if (modified) {
      toggleClasses(el, modifiedClass, addClass);
    } else {
      toggleClasses(el, modifiedClass, removeClass);
    }
  };

  BaseValidation.prototype._applyFilters = function _applyFilters(value, oldValue, filters, write) {
    var resolveAsset = exports$1.Vue.util.resolveAsset;
    var scope = this._getScope();

    var filter = void 0,
        fn = void 0,
        args = void 0,
        arg = void 0,
        offset = void 0,
        i = void 0,
        l = void 0,
        j = void 0,
        k = void 0;
    for (i = 0, l = filters.length; i < l; i++) {
      filter = filters[i];
      fn = resolveAsset(this._vm.$options, 'filters', filter.name);
      if (!fn) {
        continue;
      }

      fn = write ? fn.write : fn.read || fn;
      if (typeof fn !== 'function') {
        continue;
      }

      args = write ? [value, oldValue] : [value];
      offset = write ? 2 : 1;
      if (filter.args) {
        for (j = 0, k = filter.args.length; j < k; j++) {
          arg = filter.args[j];
          args[j + offset] = arg.dynamic ? scope.$get(arg.value) : arg.value;
        }
      }

      value = fn.apply(this._vm, args);
    }

    return value;
  };

  BaseValidation.prototype._runValidators = function _runValidators(fn, cb) {
    var validators = this._validators;
    var length = Object.keys(validators).length;

    var count = 0;
    each(validators, function (descriptor, name) {
      fn(descriptor, name, function () {
        ++count;
        count >= length && cb();
      });
    });
  };

  BaseValidation.prototype._invokeValidator = function _invokeValidator(vm, validator, val, arg, cb) {
    var future = validator.call(this, val, arg);
    if (typeof future === 'function') {
      // function
      future(function () {
        // resolve
        cb(true);
      }, function (msg) {
        // reject
        cb(false, msg);
      });
    } else if (isPromise(future)) {
      // promise
      future.then(function () {
        // resolve
        cb(true);
      }, function (msg) {
        // reject
        cb(false, msg);
      }).catch(function (err) {
        cb(false, err.message);
      });
    } else {
      // sync
      cb(future);
    }
  };

  BaseValidation.prototype._resolveValidator = function _resolveValidator(name) {
    var resolveAsset = exports$1.Vue.util.resolveAsset;
    return resolveAsset(this._vm.$options, 'validators', name);
  };

  babelHelpers.createClass(BaseValidation, [{
    key: 'vm',
    get: function get() {
      return this._vm;
    }
  }, {
    key: 'el',
    get: function get() {
      return this._el;
    }
  }, {
    key: 'detectChange',
    get: function get() {
      return this._detectChange;
    },
    set: function set(val) {
      this._detectChange = val;
    }
  }, {
    key: 'detectBlur',
    get: function get() {
      return this._detectBlur;
    },
    set: function set(val) {
      this._detectBlur = val;
    }
  }]);
  return BaseValidation;
}();

/**
 * CheckboxValidation class
 */

var CheckboxValidation = function (_BaseValidation) {
  babelHelpers.inherits(CheckboxValidation, _BaseValidation);

  function CheckboxValidation(field, model, vm, el, scope, validator, filters, detectBlur, detectChange) {
    babelHelpers.classCallCheck(this, CheckboxValidation);

    var _this = babelHelpers.possibleConstructorReturn(this, _BaseValidation.call(this, field, model, vm, el, scope, validator, filters, detectBlur, detectChange));

    _this._inits = [];
    return _this;
  }

  CheckboxValidation.prototype.manageElement = function manageElement(el, initial) {
    var _this2 = this;

    var scope = this._getScope();
    var item = this._addItem(el, initial);

    var model = item.model = this._model;
    if (model) {
      var value = this._evalModel(model, this._filters);
      if (Array.isArray(value)) {
        this._setChecked(value, item.el);
        item.unwatch = scope.$watch(model, function (val, old) {
          if (val !== old) {
            if (_this2.guardValidate(item.el, 'change')) {
              return;
            }

            _this2.handleValidate(item.el, { noopable: item.initial });
            if (item.initial) {
              item.initial = null;
            }
          }
        });
      } else {
        el.checked = value || false;
        this._init = el.checked;
        item.init = el.checked;
        item.value = el.value;
        item.unwatch = scope.$watch(model, function (val, old) {
          if (val !== old) {
            if (_this2.guardValidate(el, 'change')) {
              return;
            }

            _this2.handleValidate(el, { noopable: item.initial });
            if (item.initial) {
              item.initial = null;
            }
          }
        });
      }
    } else {
      var options = { field: this.field, noopable: initial };
      if (this._checkClassIds(el)) {
        options.el = el;
      }
      this._validator.validate(options);
    }
  };

  CheckboxValidation.prototype.unmanageElement = function unmanageElement(el) {
    var found = -1;
    each(this._inits, function (item, index) {
      if (item.el === el) {
        found = index;
        if (item.unwatch && item.model) {
          item.unwatch();
          item.unwatch = null;
          item.model = null;
        }
      }
    });
    if (found === -1) {
      return;
    }

    this._inits.splice(found, 1);
    this._validator.validate({ field: this.field });
  };

  CheckboxValidation.prototype.willUpdateFlags = function willUpdateFlags() {
    var _this3 = this;

    var touched = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

    each(this._inits, function (item, index) {
      touched && _this3.willUpdateTouched(item.el, 'blur');
      _this3.willUpdateDirty(item.el);
      _this3.willUpdateModified(item.el);
    });
  };

  CheckboxValidation.prototype.reset = function reset() {
    this.resetFlags();
    each(this._inits, function (item, index) {
      item.init = item.el.checked;
      item.value = item.el.value;
    });
  };

  CheckboxValidation.prototype.updateClasses = function updateClasses(results) {
    var _this4 = this;

    var el = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

    if (el) {
      // for another element
      this._updateClasses(el, results);
    } else {
      each(this._inits, function (item, index) {
        _this4._updateClasses(item.el, results);
      });
    }
  };

  CheckboxValidation.prototype._addItem = function _addItem(el, initial) {
    var item = {
      el: el,
      init: el.checked,
      value: el.value,
      initial: initial
    };

    var classIds = el.getAttribute(VALIDATE_UPDATE);
    if (classIds) {
      el.removeAttribute(VALIDATE_UPDATE);
      item.classIds = classIds.split(',');
    }

    this._inits.push(item);
    return item;
  };

  CheckboxValidation.prototype._setChecked = function _setChecked(values, el) {
    for (var i = 0, l = values.length; i < l; i++) {
      var value = values[i];
      if (!el.disabled && el.value === value && !el.checked) {
        el.checked = true;
      }
    }
  };

  CheckboxValidation.prototype._getValue = function _getValue(el) {
    var _this5 = this;

    if (!this._inits || this._inits.length === 0) {
      return el.checked;
    } else {
      var _ret = function () {
        var vals = [];
        each(_this5._inits, function (item, index) {
          item.el.checked && vals.push(item.el.value);
        });
        return {
          v: vals
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : babelHelpers.typeof(_ret)) === "object") return _ret.v;
    }
  };

  CheckboxValidation.prototype._getClassIds = function _getClassIds(el) {
    var classIds = void 0;
    each(this._inits, function (item, index) {
      if (item.el === el) {
        classIds = item.classIds;
      }
    });
    return classIds;
  };

  CheckboxValidation.prototype._checkModified = function _checkModified(target) {
    var _this6 = this;

    if (this._inits.length === 0) {
      return this._init !== target.checked;
    } else {
      var _ret2 = function () {
        var modified = false;
        each(_this6._inits, function (item, index) {
          if (!modified) {
            modified = item.init !== item.el.checked;
          }
        });
        return {
          v: modified
        };
      }();

      if ((typeof _ret2 === 'undefined' ? 'undefined' : babelHelpers.typeof(_ret2)) === "object") return _ret2.v;
    }
  };

  return CheckboxValidation;
}(BaseValidation);

/**
 * RadioValidation class
 */

var RadioValidation = function (_BaseValidation) {
  babelHelpers.inherits(RadioValidation, _BaseValidation);

  function RadioValidation(field, model, vm, el, scope, validator, filters, detectBlur, detectChange) {
    babelHelpers.classCallCheck(this, RadioValidation);

    var _this = babelHelpers.possibleConstructorReturn(this, _BaseValidation.call(this, field, model, vm, el, scope, validator, filters, detectBlur, detectChange));

    _this._inits = [];
    return _this;
  }

  RadioValidation.prototype.manageElement = function manageElement(el, initial) {
    var _this2 = this;

    var scope = this._getScope();
    var item = this._addItem(el, initial);

    var model = item.model = this._model;
    if (model) {
      var value = this._evalModel(model, this._filters);
      this._setChecked(value, el, item);
      item.unwatch = scope.$watch(model, function (val, old) {
        if (val !== old) {
          if (_this2.guardValidate(item.el, 'change')) {
            return;
          }

          _this2.handleValidate(el, { noopable: item.initial });
          if (item.initial) {
            item.initial = null;
          }
        }
      });
    } else {
      var options = { field: this.field, noopable: initial };
      if (this._checkClassIds(el)) {
        options.el = el;
      }
      this._validator.validate(options);
    }
  };

  RadioValidation.prototype.unmanageElement = function unmanageElement(el) {
    var found = -1;
    each(this._inits, function (item, index) {
      if (item.el === el) {
        found = index;
      }
    });
    if (found === -1) {
      return;
    }

    this._inits.splice(found, 1);
    this._validator.validate({ field: this.field });
  };

  RadioValidation.prototype.willUpdateFlags = function willUpdateFlags() {
    var _this3 = this;

    var touched = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

    each(this._inits, function (item, index) {
      touched && _this3.willUpdateTouched(item.el, 'blur');
      _this3.willUpdateDirty(item.el);
      _this3.willUpdateModified(item.el);
    });
  };

  RadioValidation.prototype.reset = function reset() {
    this.resetFlags();
    each(this._inits, function (item, index) {
      item.init = item.el.checked;
      item.value = item.el.value;
    });
  };

  RadioValidation.prototype.updateClasses = function updateClasses(results) {
    var _this4 = this;

    var el = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

    if (el) {
      // for another element
      this._updateClasses(el, results);
    } else {
      each(this._inits, function (item, index) {
        _this4._updateClasses(item.el, results);
      });
    }
  };

  RadioValidation.prototype._addItem = function _addItem(el, initial) {
    var item = {
      el: el,
      init: el.checked,
      value: el.value,
      initial: initial
    };

    var classIds = el.getAttribute(VALIDATE_UPDATE);
    if (classIds) {
      el.removeAttribute(VALIDATE_UPDATE);
      item.classIds = classIds.split(',');
    }

    this._inits.push(item);
    return item;
  };

  RadioValidation.prototype._setChecked = function _setChecked(value, el, item) {
    if (el.value === value) {
      el.checked = true;
      this._init = el.checked;
      item.init = el.checked;
      item.value = value;
    }
  };

  RadioValidation.prototype._getValue = function _getValue(el) {
    var _this5 = this;

    if (!this._inits || this._inits.length === 0) {
      return el.checked;
    } else {
      var _ret = function () {
        var vals = [];
        each(_this5._inits, function (item, index) {
          item.el.checked && vals.push(item.el.value);
        });
        return {
          v: vals
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : babelHelpers.typeof(_ret)) === "object") return _ret.v;
    }
  };

  RadioValidation.prototype._getClassIds = function _getClassIds(el) {
    var classIds = void 0;
    each(this._inits, function (item, index) {
      if (item.el === el) {
        classIds = item.classIds;
      }
    });
    return classIds;
  };

  RadioValidation.prototype._checkModified = function _checkModified(target) {
    var _this6 = this;

    if (this._inits.length === 0) {
      return this._init !== target.checked;
    } else {
      var _ret2 = function () {
        var modified = false;
        each(_this6._inits, function (item, index) {
          if (!modified) {
            modified = item.init !== item.el.checked;
          }
        });
        return {
          v: modified
        };
      }();

      if ((typeof _ret2 === 'undefined' ? 'undefined' : babelHelpers.typeof(_ret2)) === "object") return _ret2.v;
    }
  };

  return RadioValidation;
}(BaseValidation);

/**
 * SelectValidation class
 */

var SelectValidation = function (_BaseValidation) {
  babelHelpers.inherits(SelectValidation, _BaseValidation);

  function SelectValidation(field, model, vm, el, scope, validator, filters, detectBlur, detectChange) {
    babelHelpers.classCallCheck(this, SelectValidation);

    var _this = babelHelpers.possibleConstructorReturn(this, _BaseValidation.call(this, field, model, vm, el, scope, validator, filters, detectBlur, detectChange));

    _this._multiple = _this._el.hasAttribute('multiple');
    return _this;
  }

  SelectValidation.prototype.manageElement = function manageElement(el, initial) {
    var _this2 = this;

    var scope = this._getScope();
    var model = this._model;

    this._initial = initial;

    var classIds = el.getAttribute(VALIDATE_UPDATE);
    if (classIds) {
      el.removeAttribute(VALIDATE_UPDATE);
      this._classIds = classIds.split(',');
    }

    if (model) {
      var value = this._evalModel(model, this._filters);
      var values = !Array.isArray(value) ? [value] : value;
      this._setOption(values, el);
      this._unwatch = scope.$watch(model, function (val, old) {
        var values1 = !Array.isArray(val) ? [val] : val;
        var values2 = !Array.isArray(old) ? [old] : old;
        if (values1.slice().sort().toString() !== values2.slice().sort().toString()) {
          if (_this2.guardValidate(el, 'change')) {
            return;
          }

          _this2.handleValidate(el, { noopable: _this2._initial });
          if (_this2._initial) {
            _this2._initial = null;
          }
        }
      });
    }
  };

  SelectValidation.prototype.unmanageElement = function unmanageElement(el) {
    this._unwatch && this._unwatch();
  };

  SelectValidation.prototype.reset = function reset() {
    this.resetFlags();
  };

  SelectValidation.prototype._getValue = function _getValue(el) {
    var ret = [];

    for (var i = 0, l = el.options.length; i < l; i++) {
      var option = el.options[i];
      if (!option.disabled && option.selected) {
        ret.push(option.value);
      }
    }

    return ret;
  };

  SelectValidation.prototype._setOption = function _setOption(values, el) {
    for (var i = 0, l = values.length; i < l; i++) {
      var value = values[i];
      for (var j = 0, m = el.options.length; j < m; j++) {
        var option = el.options[j];
        if (!option.disabled && option.value === value && (!option.hasAttribute('selected') || !option.selected)) {
          option.selected = true;
        }
      }
    }
  };

  SelectValidation.prototype._checkModified = function _checkModified(target) {
    var values = this._getValue(target).slice().sort();
    if (this._init.length !== values.length) {
      return true;
    } else {
      var inits = this._init.slice().sort();
      return inits.toString() !== values.toString();
    }
  };

  return SelectValidation;
}(BaseValidation);

/**
 * Validator class
 */

var Validator$1 = function () {
  function Validator(name, dir, groups, classes) {
    var _this = this;

    babelHelpers.classCallCheck(this, Validator);

    this.name = name;

    this._scope = {};
    this._dir = dir;
    this._validations = {};
    this._checkboxValidations = {};
    this._radioValidations = {};
    this._groups = groups;
    this._groupValidations = {};
    this._events = {};
    this._modified = false;
    this._classes = classes;

    each(groups, function (group) {
      _this._groupValidations[group] = [];
    });
  }

  Validator.prototype.enableReactive = function enableReactive() {
    var vm = this._dir.vm;

    // define the validation scope
    exports$1.Vue.util.defineReactive(vm, this.name, this._scope);
    vm._validatorMaps[this.name] = this;

    // define the validation resetting meta method to vue instance
    this._defineResetValidation();

    // define the validate manually meta method to vue instance
    this._defineValidate();

    // define manually the validation errors
    this._defineSetValidationErrors();
  };

  Validator.prototype.disableReactive = function disableReactive() {
    var vm = this._dir.vm;
    vm.$setValidationErrors = null;
    delete vm['$setValidationErrors'];
    vm.$validate = null;
    delete vm['$validate'];
    vm.$validatorReset = null;
    delete vm['$validatorReset'];
    vm._validatorMaps[this.name] = null;
    delete vm._validatorMaps[this.name];
    vm[this.name] = null;
    delete vm[this.name];
  };

  Validator.prototype.registerEvents = function registerEvents() {
    var isSimplePath = exports$1.Vue.parsers.expression.isSimplePath;

    var attrs = this._dir.el.attributes;
    for (var i = 0, l = attrs.length; i < l; i++) {
      var event = attrs[i].name;
      if (REGEX_EVENT.test(event)) {
        var value = attrs[i].value;
        if (isSimplePath(value)) {
          value += '.apply(this, $arguments)';
        }
        event = event.replace(REGEX_EVENT, '');
        this._events[this._getEventName(event)] = this._dir.vm.$eval(value, true);
      }
    }
  };

  Validator.prototype.unregisterEvents = function unregisterEvents() {
    var _this2 = this;

    each(this._events, function (handler, event) {
      _this2._events[event] = null;
      delete _this2._events[event];
    });
  };

  Validator.prototype.manageValidation = function manageValidation(field, model, vm, el, scope, filters, initial, detectBlur, detectChange) {
    var validation = null;

    if (el.tagName === 'SELECT') {
      validation = this._manageSelectValidation(field, model, vm, el, scope, filters, initial, detectBlur, detectChange);
    } else if (el.type === 'checkbox') {
      validation = this._manageCheckboxValidation(field, model, vm, el, scope, filters, initial, detectBlur, detectChange);
    } else if (el.type === 'radio') {
      validation = this._manageRadioValidation(field, model, vm, el, scope, filters, initial, detectBlur, detectChange);
    } else {
      validation = this._manageBaseValidation(field, model, vm, el, scope, filters, initial, detectBlur, detectChange);
    }

    validation.setValidationClasses(this._classes);

    return validation;
  };

  Validator.prototype.unmanageValidation = function unmanageValidation(field, el) {
    if (el.type === 'checkbox') {
      this._unmanageCheckboxValidation(field, el);
    } else if (el.type === 'radio') {
      this._unmanageRadioValidation(field, el);
    } else if (el.tagName === 'SELECT') {
      this._unmanageSelectValidation(field, el);
    } else {
      this._unmanageBaseValidation(field, el);
    }
  };

  Validator.prototype.addGroupValidation = function addGroupValidation(group, field) {
    var indexOf = exports$1.Vue.util.indexOf;

    var validation = this._getValidationFrom(field);
    var validations = this._groupValidations[group];

    validations && ! ~indexOf(validations, validation) && validations.push(validation);
  };

  Validator.prototype.removeGroupValidation = function removeGroupValidation(group, field) {
    var validation = this._getValidationFrom(field);
    var validations = this._groupValidations[group];

    validations && pull(validations, validation);
  };

  Validator.prototype.validate = function validate() {
    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _ref$el = _ref.el;
    var el = _ref$el === undefined ? null : _ref$el;
    var _ref$field = _ref.field;
    var field = _ref$field === undefined ? null : _ref$field;
    var _ref$touched = _ref.touched;
    var touched = _ref$touched === undefined ? false : _ref$touched;
    var _ref$noopable = _ref.noopable;
    var noopable = _ref$noopable === undefined ? false : _ref$noopable;
    var _ref$cb = _ref.cb;
    var cb = _ref$cb === undefined ? null : _ref$cb;

    if (!field) {
      // all
      each(this.validations, function (validation, key) {
        validation.willUpdateFlags(touched);
      });
      this._validates(cb);
    } else {
      // each field
      this._validate(field, touched, noopable, el, cb);
    }
  };

  Validator.prototype.setupScope = function setupScope() {
    var _this3 = this;

    this._defineProperties(function () {
      return _this3.validations;
    }, function () {
      return _this3._scope;
    });

    each(this._groups, function (name) {
      var validations = _this3._groupValidations[name];
      var group = {};
      exports$1.Vue.set(_this3._scope, name, group);
      _this3._defineProperties(function () {
        return validations;
      }, function () {
        return group;
      });
    });
  };

  Validator.prototype.waitFor = function waitFor(cb) {
    var method = '$activateValidator';
    var vm = this._dir.vm;

    vm[method] = function () {
      cb();
      vm[method] = null;
    };
  };

  Validator.prototype._defineResetValidation = function _defineResetValidation() {
    var _this4 = this;

    this._dir.vm.$resetValidation = function (cb) {
      _this4._resetValidation(cb);
    };
  };

  Validator.prototype._defineValidate = function _defineValidate() {
    var _this5 = this;

    this._dir.vm.$validate = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var field = null;
      var touched = false;
      var cb = null;

      each(args, function (arg, index) {
        if (typeof arg === 'string') {
          field = arg;
        } else if (typeof arg === 'boolean') {
          touched = arg;
        } else if (typeof arg === 'function') {
          cb = arg;
        }
      });

      _this5.validate({ field: field, touched: touched, cb: cb });
    };
  };

  Validator.prototype._defineSetValidationErrors = function _defineSetValidationErrors() {
    var _this6 = this;

    this._dir.vm.$setValidationErrors = function (errors) {
      _this6._setValidationErrors(errors);
    };
  };

  Validator.prototype._validate = function _validate(field) {
    var touched = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    var noopable = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    var _this7 = this;

    var el = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
    var cb = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];

    var scope = this._scope;

    var validation = this._getValidationFrom(field);
    if (validation) {
      validation.willUpdateFlags(touched);
      validation.validate(function (results) {
        exports$1.Vue.set(scope, field, results);
        _this7._fireEvents();
        cb && cb();
      }, noopable, el);
    }
  };

  Validator.prototype._validates = function _validates(cb) {
    var _this8 = this;

    var scope = this._scope;

    this._runValidates(function (validation, key, done) {
      validation.validate(function (results) {
        exports$1.Vue.set(scope, key, results);
        done();
      });
    }, function () {
      // finished
      _this8._fireEvents();
      cb && cb();
    });
  };

  Validator.prototype._getValidationFrom = function _getValidationFrom(field) {
    return this._validations[field] || this._checkboxValidations[field] && this._checkboxValidations[field].validation || this._radioValidations[field] && this._radioValidations[field].validation;
  };

  Validator.prototype._resetValidation = function _resetValidation(cb) {
    each(this.validations, function (validation, key) {
      validation.reset();
    });
    this._validates(cb);
  };

  Validator.prototype._setValidationErrors = function _setValidationErrors(errors) {
    var _this9 = this;

    var extend = exports$1.Vue.util.extend;

    // make tempolaly errors

    var temp = {};
    each(errors, function (error, index) {
      if (!temp[error.field]) {
        temp[error.field] = [];
      }
      temp[error.field].push(error);
    });

    // set errors
    each(temp, function (values, field) {
      var results = _this9._scope[field];
      var newResults = {};

      each(values, function (error) {
        if (error.validator) {
          results[error.validator] = error.message;
        }
      });

      results.valid = false;
      results.invalid = true;
      results.errors = values;
      extend(newResults, results);

      var validation = _this9._getValidationFrom(field);
      validation.willUpdateClasses(newResults, validation.el);

      exports$1.Vue.set(_this9._scope, field, newResults);
    });
  };

  Validator.prototype._manageBaseValidation = function _manageBaseValidation(field, model, vm, el, scope, filters, initial, detectBlur, detectChange) {
    var validation = this._validations[field] = new BaseValidation(field, model, vm, el, scope, this, filters, detectBlur, detectChange);
    validation.manageElement(el, initial);
    return validation;
  };

  Validator.prototype._unmanageBaseValidation = function _unmanageBaseValidation(field, el) {
    var validation = this._validations[field];
    if (validation) {
      validation.unmanageElement(el);
      exports$1.Vue.delete(this._scope, field);
      this._validations[field] = null;
      delete this._validations[field];
    }
  };

  Validator.prototype._manageCheckboxValidation = function _manageCheckboxValidation(field, model, vm, el, scope, filters, initial, detectBlur, detectChange) {
    var validationSet = this._checkboxValidations[field];
    if (!validationSet) {
      var validation = new CheckboxValidation(field, model, vm, el, scope, this, filters, detectBlur, detectChange);
      validationSet = { validation: validation, elements: 0 };
      this._checkboxValidations[field] = validationSet;
    }

    validationSet.elements++;
    validationSet.validation.manageElement(el, initial);
    return validationSet.validation;
  };

  Validator.prototype._unmanageCheckboxValidation = function _unmanageCheckboxValidation(field, el) {
    var validationSet = this._checkboxValidations[field];
    if (validationSet) {
      validationSet.elements--;
      validationSet.validation.unmanageElement(el);
      if (validationSet.elements === 0) {
        exports$1.Vue.delete(this._scope, field);
        this._checkboxValidations[field] = null;
        delete this._checkboxValidations[field];
      }
    }
  };

  Validator.prototype._manageRadioValidation = function _manageRadioValidation(field, model, vm, el, scope, filters, initial, detectBlur, detectChange) {
    var validationSet = this._radioValidations[field];
    if (!validationSet) {
      var validation = new RadioValidation(field, model, vm, el, scope, this, filters, detectBlur, detectChange);
      validationSet = { validation: validation, elements: 0 };
      this._radioValidations[field] = validationSet;
    }

    validationSet.elements++;
    validationSet.validation.manageElement(el, initial);
    return validationSet.validation;
  };

  Validator.prototype._unmanageRadioValidation = function _unmanageRadioValidation(field, el) {
    var validationSet = this._radioValidations[field];
    if (validationSet) {
      validationSet.elements--;
      validationSet.validation.unmanageElement(el);
      if (validationSet.elements === 0) {
        exports$1.Vue.delete(this._scope, field);
        this._radioValidations[field] = null;
        delete this._radioValidations[field];
      }
    }
  };

  Validator.prototype._manageSelectValidation = function _manageSelectValidation(field, model, vm, el, scope, filters, initial, detectBlur, detectChange) {
    var validation = this._validations[field] = new SelectValidation(field, model, vm, el, scope, this, filters, detectBlur, detectChange);
    validation.manageElement(el, initial);
    return validation;
  };

  Validator.prototype._unmanageSelectValidation = function _unmanageSelectValidation(field, el) {
    var validation = this._validations[field];
    if (validation) {
      validation.unmanageElement(el);
      exports$1.Vue.delete(this._scope, field);
      this._validations[field] = null;
      delete this._validations[field];
    }
  };

  Validator.prototype._fireEvent = function _fireEvent(type) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    var handler = this._events[this._getEventName(type)];
    handler && this._dir.vm.$nextTick(function () {
      handler.apply(null, args);
    });
  };

  Validator.prototype._fireEvents = function _fireEvents() {
    var scope = this._scope;

    scope.touched && this._fireEvent('touched');
    scope.dirty && this._fireEvent('dirty');

    if (this._modified !== scope.modified) {
      this._fireEvent('modified', scope.modified);
      this._modified = scope.modified;
    }

    var valid = scope.valid;
    this._fireEvent(valid ? 'valid' : 'invalid');
  };

  Validator.prototype._getEventName = function _getEventName(type) {
    return this.name + ':' + type;
  };

  Validator.prototype._defineProperties = function _defineProperties(validationsGetter, targetGetter) {
    var _this10 = this;

    var bind = exports$1.Vue.util.bind;

    each({
      valid: { fn: this._defineValid, arg: validationsGetter },
      invalid: { fn: this._defineInvalid, arg: targetGetter },
      touched: { fn: this._defineTouched, arg: validationsGetter },
      untouched: { fn: this._defineUntouched, arg: targetGetter },
      modified: { fn: this._defineModified, arg: validationsGetter },
      dirty: { fn: this._defineDirty, arg: validationsGetter },
      pristine: { fn: this._definePristine, arg: targetGetter },
      errors: { fn: this._defineErrors, arg: validationsGetter }
    }, function (descriptor, name) {
      Object.defineProperty(targetGetter(), name, {
        enumerable: true,
        configurable: true,
        get: function get() {
          return bind(descriptor.fn, _this10)(descriptor.arg);
        }
      });
    });
  };

  Validator.prototype._runValidates = function _runValidates(fn, cb) {
    var length = Object.keys(this.validations).length;

    var count = 0;
    each(this.validations, function (validation, key) {
      fn(validation, key, function () {
        ++count;
        count >= length && cb();
      });
    });
  };

  Validator.prototype._walkValidations = function _walkValidations(validations, property, condition) {
    var _this11 = this;

    var hasOwn = exports$1.Vue.util.hasOwn;
    var ret = condition;

    each(validations, function (validation, key) {
      if (ret === !condition) {
        return;
      }
      if (hasOwn(_this11._scope, validation.field)) {
        var target = _this11._scope[validation.field];
        if (target && target[property] === !condition) {
          ret = !condition;
        }
      }
    });

    return ret;
  };

  Validator.prototype._defineValid = function _defineValid(validationsGetter) {
    return this._walkValidations(validationsGetter(), 'valid', true);
  };

  Validator.prototype._defineInvalid = function _defineInvalid(scopeGetter) {
    return !scopeGetter().valid;
  };

  Validator.prototype._defineTouched = function _defineTouched(validationsGetter) {
    return this._walkValidations(validationsGetter(), 'touched', false);
  };

  Validator.prototype._defineUntouched = function _defineUntouched(scopeGetter) {
    return !scopeGetter().touched;
  };

  Validator.prototype._defineModified = function _defineModified(validationsGetter) {
    return this._walkValidations(validationsGetter(), 'modified', false);
  };

  Validator.prototype._defineDirty = function _defineDirty(validationsGetter) {
    return this._walkValidations(validationsGetter(), 'dirty', false);
  };

  Validator.prototype._definePristine = function _definePristine(scopeGetter) {
    return !scopeGetter().dirty;
  };

  Validator.prototype._defineErrors = function _defineErrors(validationsGetter) {
    var _this12 = this;

    var hasOwn = exports$1.Vue.util.hasOwn;
    var isPlainObject = exports$1.Vue.util.isPlainObject;
    var errors = [];

    each(validationsGetter(), function (validation, key) {
      if (hasOwn(_this12._scope, validation.field)) {
        var target = _this12._scope[validation.field];
        if (target && !empty(target.errors)) {
          each(target.errors, function (err, index) {
            var error = { field: validation.field };
            if (isPlainObject(err)) {
              if (err.validator) {
                error.validator = err.validator;
              }
              error.message = err.message;
            } else if (typeof err === 'string') {
              error.message = err;
            }
            errors.push(error);
          });
        }
      }
    });

    return empty(errors) ? undefined : errors.sort(function (a, b) {
      return a.field < b.field ? -1 : 1;
    });
  };

  babelHelpers.createClass(Validator, [{
    key: 'validations',
    get: function get() {
      var extend = exports$1.Vue.util.extend;

      var ret = {};
      extend(ret, this._validations);

      each(this._checkboxValidations, function (dataset, key) {
        ret[key] = dataset.validation;
      });

      each(this._radioValidations, function (dataset, key) {
        ret[key] = dataset.validation;
      });

      return ret;
    }
  }]);
  return Validator;
}();

function Validator (Vue) {
  var FragmentFactory = Vue.FragmentFactory;
  var vIf = Vue.directive('if');
  var _Vue$util = Vue.util;
  var isArray = _Vue$util.isArray;
  var isPlainObject = _Vue$util.isPlainObject;
  var createAnchor = _Vue$util.createAnchor;
  var replace = _Vue$util.replace;
  var extend = _Vue$util.extend;
  var camelize = _Vue$util.camelize;

  /**
   * `validator` element directive
   */

  Vue.elementDirective('validator', {
    params: ['name', 'groups', 'lazy', 'classes'],

    bind: function bind() {
      var params = this.params;

      if (process.env.NODE_ENV !== 'production' && !params.name) {
        warn('validator element requires a \'name\' attribute: ' + '(e.g. <validator name="validator1">...</validator>)');
        return;
      }

      this.validatorName = '$' + camelize(params.name);
      if (!this.vm._validatorMaps) {
        throw new Error('Invalid validator management error');
      }

      var classes = {};
      if (isPlainObject(this.params.classes)) {
        classes = this.params.classes;
      }

      this.setupValidator(classes);
      this.setupFragment(params.lazy);
    },
    unbind: function unbind() {
      this.teardownFragment();
      this.teardownValidator();
    },
    getGroups: function getGroups() {
      var params = this.params;
      var groups = [];

      if (params.groups) {
        if (isArray(params.groups)) {
          groups = params.groups;
        } else if (!isPlainObject(params.groups) && typeof params.groups === 'string') {
          groups.push(params.groups);
        }
      }

      return groups;
    },
    setupValidator: function setupValidator(classes) {
      var validator = this.validator = new Validator$1(this.validatorName, this, this.getGroups(), classes);
      validator.enableReactive();
      validator.setupScope();
      validator.registerEvents();
    },
    teardownValidator: function teardownValidator() {
      this.validator.unregisterEvents();
      this.validator.disableReactive();

      if (this.validatorName) {
        this.validatorName = null;
        this.validator = null;
      }
    },
    setupFragment: function setupFragment(lazy) {
      var _this = this;

      var vm = this.vm;

      this.validator.waitFor(function () {
        _this.anchor = createAnchor('vue-validator');
        replace(_this.el, _this.anchor);
        extend(vm.$options, { _validator: _this.validatorName });
        _this.factory = new FragmentFactory(vm, _this.el.innerHTML);
        vIf.insert.call(_this);
      });

      !lazy && vm.$activateValidator();
    },
    teardownFragment: function teardownFragment() {
      vIf.unbind.call(this);
    }
  });
}

function ValidatorError (Vue) {
  /**
   * ValidatorError component
   */

  var error = {
    name: 'validator-error',

    props: {
      field: {
        type: String,
        required: true
      },
      validator: {
        type: String
      },
      message: {
        type: String,
        required: true
      },
      partial: {
        type: String,
        default: 'validator-error-default'
      }
    },

    template: '<div><partial :name="partial"></partial></div>',

    partials: {}
  };

  // only use ValidatorError component
  error.partials['validator-error-default'] = '<p>{{field}}: {{message}}</p>';

  return error;
}

function Errors (Vue) {
  var _ = Vue.util;
  var error = ValidatorError(Vue); // import ValidatorError component

  /**
   * ValidatorErrors component
   */

  var errors = {
    name: 'validator-errors',

    props: {
      validation: {
        type: Object,
        required: true
      },
      group: {
        type: String,
        default: null
      },
      field: {
        type: String,
        default: null
      },
      component: {
        type: String,
        default: 'validator-error'
      }
    },

    computed: {
      errors: function errors() {
        var _this = this;

        if (this.group !== null) {
          return this.validation[this.group].errors;
        } else if (this.field !== null) {
          var target = this.validation[this.field];
          if (!target.errors) {
            return;
          }

          return target.errors.map(function (error) {
            var err = { field: _this.field };
            if (_.isPlainObject(error)) {
              if (error.validator) {
                err.validator = error.validator;
              }
              err.message = error.message;
            } else if (typeof error === 'string') {
              err.message = error;
            }
            return err;
          });
        } else {
          return this.validation.errors;
        }
      }
    },

    template: '<template v-for="error in errors">' + '<component :is="component" :partial="partial" :field="error.field" :validator="error.validator" :message="error.message">' + '</component>' + '</template>',

    components: {}
  };

  // define 'partial' prop
  errors.props['partial'] = error.props['partial'];

  // only use ValidatorErrors component
  errors.components[error.name] = error;

  // install ValidatorErrors component
  Vue.component(errors.name, errors);

  return errors;
}

/**
 * plugin
 *
 * @param {Function} Vue
 * @param {Object} options
 */

function plugin(Vue) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  if (plugin.installed) {
    warn('already installed.');
    return;
  }

  exports$1.Vue = Vue;
  Asset(Vue);
  Errors(Vue);

  Override(Vue);
  Validator(Vue);
  ValidateClass(Vue);
  Validate(Vue);
}

plugin.version = '2.1.5';

if (typeof window !== 'undefined' && window.Vue) {
  window.Vue.use(plugin);
}

module.exports = plugin;
}).call(this,require('_process'))
},{"_process":22}],30:[function(require,module,exports){
(function (process,global){
/*!
 * Vue.js v1.0.26
 * (c) 2016 Evan You
 * Released under the MIT License.
 */
'use strict';

function set(obj, key, val) {
  if (hasOwn(obj, key)) {
    obj[key] = val;
    return;
  }
  if (obj._isVue) {
    set(obj._data, key, val);
    return;
  }
  var ob = obj.__ob__;
  if (!ob) {
    obj[key] = val;
    return;
  }
  ob.convert(key, val);
  ob.dep.notify();
  if (ob.vms) {
    var i = ob.vms.length;
    while (i--) {
      var vm = ob.vms[i];
      vm._proxy(key);
      vm._digest();
    }
  }
  return val;
}

/**
 * Delete a property and trigger change if necessary.
 *
 * @param {Object} obj
 * @param {String} key
 */

function del(obj, key) {
  if (!hasOwn(obj, key)) {
    return;
  }
  delete obj[key];
  var ob = obj.__ob__;
  if (!ob) {
    if (obj._isVue) {
      delete obj._data[key];
      obj._digest();
    }
    return;
  }
  ob.dep.notify();
  if (ob.vms) {
    var i = ob.vms.length;
    while (i--) {
      var vm = ob.vms[i];
      vm._unproxy(key);
      vm._digest();
    }
  }
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
/**
 * Check whether the object has the property.
 *
 * @param {Object} obj
 * @param {String} key
 * @return {Boolean}
 */

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

/**
 * Check if an expression is a literal value.
 *
 * @param {String} exp
 * @return {Boolean}
 */

var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;

function isLiteral(exp) {
  return literalValueRE.test(exp);
}

/**
 * Check if a string starts with $ or _
 *
 * @param {String} str
 * @return {Boolean}
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}

/**
 * Guard text output, make sure undefined outputs
 * empty string
 *
 * @param {*} value
 * @return {String}
 */

function _toString(value) {
  return value == null ? '' : value.toString();
}

/**
 * Check and convert possible numeric strings to numbers
 * before setting back to data
 *
 * @param {*} value
 * @return {*|Number}
 */

function toNumber(value) {
  if (typeof value !== 'string') {
    return value;
  } else {
    var parsed = Number(value);
    return isNaN(parsed) ? value : parsed;
  }
}

/**
 * Convert string boolean literals into real booleans.
 *
 * @param {*} value
 * @return {*|Boolean}
 */

function toBoolean(value) {
  return value === 'true' ? true : value === 'false' ? false : value;
}

/**
 * Strip quotes from a string
 *
 * @param {String} str
 * @return {String | false}
 */

function stripQuotes(str) {
  var a = str.charCodeAt(0);
  var b = str.charCodeAt(str.length - 1);
  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
}

/**
 * Camelize a hyphen-delmited string.
 *
 * @param {String} str
 * @return {String}
 */

var camelizeRE = /-(\w)/g;

function camelize(str) {
  return str.replace(camelizeRE, toUpper);
}

function toUpper(_, c) {
  return c ? c.toUpperCase() : '';
}

/**
 * Hyphenate a camelCase string.
 *
 * @param {String} str
 * @return {String}
 */

var hyphenateRE = /([a-z\d])([A-Z])/g;

function hyphenate(str) {
  return str.replace(hyphenateRE, '$1-$2').toLowerCase();
}

/**
 * Converts hyphen/underscore/slash delimitered names into
 * camelized classNames.
 *
 * e.g. my-component => MyComponent
 *      some_else    => SomeElse
 *      some/comp    => SomeComp
 *
 * @param {String} str
 * @return {String}
 */

var classifyRE = /(?:^|[-_\/])(\w)/g;

function classify(str) {
  return str.replace(classifyRE, toUpper);
}

/**
 * Simple bind, faster than native
 *
 * @param {Function} fn
 * @param {Object} ctx
 * @return {Function}
 */

function bind(fn, ctx) {
  return function (a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  };
}

/**
 * Convert an Array-like object to a real Array.
 *
 * @param {Array-like} list
 * @param {Number} [start] - start index
 * @return {Array}
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret;
}

/**
 * Mix properties into target object.
 *
 * @param {Object} to
 * @param {Object} from
 */

function extend(to, from) {
  var keys = Object.keys(from);
  var i = keys.length;
  while (i--) {
    to[keys[i]] = from[keys[i]];
  }
  return to;
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 *
 * @param {*} obj
 * @return {Boolean}
 */

function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 *
 * @param {*} obj
 * @return {Boolean}
 */

var toString = Object.prototype.toString;
var OBJECT_STRING = '[object Object]';

function isPlainObject(obj) {
  return toString.call(obj) === OBJECT_STRING;
}

/**
 * Array type check.
 *
 * @param {*} obj
 * @return {Boolean}
 */

var isArray = Array.isArray;

/**
 * Define a property.
 *
 * @param {Object} obj
 * @param {String} key
 * @param {*} val
 * @param {Boolean} [enumerable]
 */

function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Debounce a function so it only gets called after the
 * input stops arriving after the given wait period.
 *
 * @param {Function} func
 * @param {Number} wait
 * @return {Function} - the debounced function
 */

function _debounce(func, wait) {
  var timeout, args, context, timestamp, result;
  var later = function later() {
    var last = Date.now() - timestamp;
    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
  };
  return function () {
    context = this;
    args = arguments;
    timestamp = Date.now();
    if (!timeout) {
      timeout = setTimeout(later, wait);
    }
    return result;
  };
}

/**
 * Manual indexOf because it's slightly faster than
 * native.
 *
 * @param {Array} arr
 * @param {*} obj
 */

function indexOf(arr, obj) {
  var i = arr.length;
  while (i--) {
    if (arr[i] === obj) return i;
  }
  return -1;
}

/**
 * Make a cancellable version of an async callback.
 *
 * @param {Function} fn
 * @return {Function}
 */

function cancellable(fn) {
  var cb = function cb() {
    if (!cb.cancelled) {
      return fn.apply(this, arguments);
    }
  };
  cb.cancel = function () {
    cb.cancelled = true;
  };
  return cb;
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 *
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 */

function looseEqual(a, b) {
  /* eslint-disable eqeqeq */
  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);
  /* eslint-enable eqeqeq */
}

var hasProto = ('__proto__' in {});

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

// UA sniffing for working around browser-specific quirks
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && UA.indexOf('trident') > 0;
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isAndroid = UA && UA.indexOf('android') > 0;
var isIos = UA && /(iphone|ipad|ipod|ios)/i.test(UA);
var iosVersionMatch = isIos && UA.match(/os ([\d_]+)/);
var iosVersion = iosVersionMatch && iosVersionMatch[1].split('_');

// detecting iOS UIWebView by indexedDB
var hasMutationObserverBug = iosVersion && Number(iosVersion[0]) >= 9 && Number(iosVersion[1]) >= 3 && !window.indexedDB;

var transitionProp = undefined;
var transitionEndEvent = undefined;
var animationProp = undefined;
var animationEndEvent = undefined;

// Transition property/event sniffing
if (inBrowser && !isIE9) {
  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;
  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;
  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';
  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';
  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';
  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';
}

/**
 * Defer a task to execute it asynchronously. Ideally this
 * should be executed as a microtask, so we leverage
 * MutationObserver if it's available, and fallback to
 * setTimeout(0).
 *
 * @param {Function} cb
 * @param {Object} ctx
 */

var nextTick = (function () {
  var callbacks = [];
  var pending = false;
  var timerFunc;
  function nextTickHandler() {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks = [];
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  /* istanbul ignore if */
  if (typeof MutationObserver !== 'undefined' && !hasMutationObserverBug) {
    var counter = 1;
    var observer = new MutationObserver(nextTickHandler);
    var textNode = document.createTextNode(counter);
    observer.observe(textNode, {
      characterData: true
    });
    timerFunc = function () {
      counter = (counter + 1) % 2;
      textNode.data = counter;
    };
  } else {
    // webpack attempts to inject a shim for setImmediate
    // if it is used as a global, so we have to work around that to
    // avoid bundling unnecessary code.
    var context = inBrowser ? window : typeof global !== 'undefined' ? global : {};
    timerFunc = context.setImmediate || setTimeout;
  }
  return function (cb, ctx) {
    var func = ctx ? function () {
      cb.call(ctx);
    } : cb;
    callbacks.push(func);
    if (pending) return;
    pending = true;
    timerFunc(nextTickHandler, 0);
  };
})();

var _Set = undefined;
/* istanbul ignore if */
if (typeof Set !== 'undefined' && Set.toString().match(/native code/)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = function () {
    this.set = Object.create(null);
  };
  _Set.prototype.has = function (key) {
    return this.set[key] !== undefined;
  };
  _Set.prototype.add = function (key) {
    this.set[key] = 1;
  };
  _Set.prototype.clear = function () {
    this.set = Object.create(null);
  };
}

function Cache(limit) {
  this.size = 0;
  this.limit = limit;
  this.head = this.tail = undefined;
  this._keymap = Object.create(null);
}

var p = Cache.prototype;

/**
 * Put <value> into the cache associated with <key>.
 * Returns the entry which was removed to make room for
 * the new entry. Otherwise undefined is returned.
 * (i.e. if there was enough room already).
 *
 * @param {String} key
 * @param {*} value
 * @return {Entry|undefined}
 */

p.put = function (key, value) {
  var removed;

  var entry = this.get(key, true);
  if (!entry) {
    if (this.size === this.limit) {
      removed = this.shift();
    }
    entry = {
      key: key
    };
    this._keymap[key] = entry;
    if (this.tail) {
      this.tail.newer = entry;
      entry.older = this.tail;
    } else {
      this.head = entry;
    }
    this.tail = entry;
    this.size++;
  }
  entry.value = value;

  return removed;
};

/**
 * Purge the least recently used (oldest) entry from the
 * cache. Returns the removed entry or undefined if the
 * cache was empty.
 */

p.shift = function () {
  var entry = this.head;
  if (entry) {
    this.head = this.head.newer;
    this.head.older = undefined;
    entry.newer = entry.older = undefined;
    this._keymap[entry.key] = undefined;
    this.size--;
  }
  return entry;
};

/**
 * Get and register recent use of <key>. Returns the value
 * associated with <key> or undefined if not in cache.
 *
 * @param {String} key
 * @param {Boolean} returnEntry
 * @return {Entry|*}
 */

p.get = function (key, returnEntry) {
  var entry = this._keymap[key];
  if (entry === undefined) return;
  if (entry === this.tail) {
    return returnEntry ? entry : entry.value;
  }
  // HEAD--------------TAIL
  //   <.older   .newer>
  //  <--- add direction --
  //   A  B  C  <D>  E
  if (entry.newer) {
    if (entry === this.head) {
      this.head = entry.newer;
    }
    entry.newer.older = entry.older; // C <-- E.
  }
  if (entry.older) {
    entry.older.newer = entry.newer; // C. --> E
  }
  entry.newer = undefined; // D --x
  entry.older = this.tail; // D. --> E
  if (this.tail) {
    this.tail.newer = entry; // E. <-- D
  }
  this.tail = entry;
  return returnEntry ? entry : entry.value;
};

var cache$1 = new Cache(1000);
var filterTokenRE = /[^\s'"]+|'[^']*'|"[^"]*"/g;
var reservedArgRE = /^in$|^-?\d+/;

/**
 * Parser state
 */

var str;
var dir;
var c;
var prev;
var i;
var l;
var lastFilterIndex;
var inSingle;
var inDouble;
var curly;
var square;
var paren;
/**
 * Push a filter to the current directive object
 */

function pushFilter() {
  var exp = str.slice(lastFilterIndex, i).trim();
  var filter;
  if (exp) {
    filter = {};
    var tokens = exp.match(filterTokenRE);
    filter.name = tokens[0];
    if (tokens.length > 1) {
      filter.args = tokens.slice(1).map(processFilterArg);
    }
  }
  if (filter) {
    (dir.filters = dir.filters || []).push(filter);
  }
  lastFilterIndex = i + 1;
}

/**
 * Check if an argument is dynamic and strip quotes.
 *
 * @param {String} arg
 * @return {Object}
 */

function processFilterArg(arg) {
  if (reservedArgRE.test(arg)) {
    return {
      value: toNumber(arg),
      dynamic: false
    };
  } else {
    var stripped = stripQuotes(arg);
    var dynamic = stripped === arg;
    return {
      value: dynamic ? arg : stripped,
      dynamic: dynamic
    };
  }
}

/**
 * Parse a directive value and extract the expression
 * and its filters into a descriptor.
 *
 * Example:
 *
 * "a + 1 | uppercase" will yield:
 * {
 *   expression: 'a + 1',
 *   filters: [
 *     { name: 'uppercase', args: null }
 *   ]
 * }
 *
 * @param {String} s
 * @return {Object}
 */

function parseDirective(s) {
  var hit = cache$1.get(s);
  if (hit) {
    return hit;
  }

  // reset parser state
  str = s;
  inSingle = inDouble = false;
  curly = square = paren = 0;
  lastFilterIndex = 0;
  dir = {};

  for (i = 0, l = str.length; i < l; i++) {
    prev = c;
    c = str.charCodeAt(i);
    if (inSingle) {
      // check single quote
      if (c === 0x27 && prev !== 0x5C) inSingle = !inSingle;
    } else if (inDouble) {
      // check double quote
      if (c === 0x22 && prev !== 0x5C) inDouble = !inDouble;
    } else if (c === 0x7C && // pipe
    str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {
      if (dir.expression == null) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        dir.expression = str.slice(0, i).trim();
      } else {
        // already has filter
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;break; // "
        case 0x27:
          inSingle = true;break; // '
        case 0x28:
          paren++;break; // (
        case 0x29:
          paren--;break; // )
        case 0x5B:
          square++;break; // [
        case 0x5D:
          square--;break; // ]
        case 0x7B:
          curly++;break; // {
        case 0x7D:
          curly--;break; // }
      }
    }
  }

  if (dir.expression == null) {
    dir.expression = str.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  cache$1.put(s, dir);
  return dir;
}

var directive = Object.freeze({
  parseDirective: parseDirective
});

var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
var cache = undefined;
var tagRE = undefined;
var htmlRE = undefined;
/**
 * Escape a string so it can be used in a RegExp
 * constructor.
 *
 * @param {String} str
 */

function escapeRegex(str) {
  return str.replace(regexEscapeRE, '\\$&');
}

function compileRegex() {
  var open = escapeRegex(config.delimiters[0]);
  var close = escapeRegex(config.delimiters[1]);
  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);
  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);
  tagRE = new RegExp(unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\n)+?)' + close, 'g');
  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '$');
  // reset cache
  cache = new Cache(1000);
}

/**
 * Parse a template text string into an array of tokens.
 *
 * @param {String} text
 * @return {Array<Object> | null}
 *               - {String} type
 *               - {String} value
 *               - {Boolean} [html]
 *               - {Boolean} [oneTime]
 */

function parseText(text) {
  if (!cache) {
    compileRegex();
  }
  var hit = cache.get(text);
  if (hit) {
    return hit;
  }
  if (!tagRE.test(text)) {
    return null;
  }
  var tokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, html, value, first, oneTime;
  /* eslint-disable no-cond-assign */
  while (match = tagRE.exec(text)) {
    /* eslint-enable no-cond-assign */
    index = match.index;
    // push text token
    if (index > lastIndex) {
      tokens.push({
        value: text.slice(lastIndex, index)
      });
    }
    // tag token
    html = htmlRE.test(match[0]);
    value = html ? match[1] : match[2];
    first = value.charCodeAt(0);
    oneTime = first === 42; // *
    value = oneTime ? value.slice(1) : value;
    tokens.push({
      tag: true,
      value: value.trim(),
      html: html,
      oneTime: oneTime
    });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    tokens.push({
      value: text.slice(lastIndex)
    });
  }
  cache.put(text, tokens);
  return tokens;
}

/**
 * Format a list of tokens into an expression.
 * e.g. tokens parsed from 'a {{b}} c' can be serialized
 * into one single expression as '"a " + b + " c"'.
 *
 * @param {Array} tokens
 * @param {Vue} [vm]
 * @return {String}
 */

function tokensToExp(tokens, vm) {
  if (tokens.length > 1) {
    return tokens.map(function (token) {
      return formatToken(token, vm);
    }).join('+');
  } else {
    return formatToken(tokens[0], vm, true);
  }
}

/**
 * Format a single token.
 *
 * @param {Object} token
 * @param {Vue} [vm]
 * @param {Boolean} [single]
 * @return {String}
 */

function formatToken(token, vm, single) {
  return token.tag ? token.oneTime && vm ? '"' + vm.$eval(token.value) + '"' : inlineFilters(token.value, single) : '"' + token.value + '"';
}

/**
 * For an attribute with multiple interpolation tags,
 * e.g. attr="some-{{thing | filter}}", in order to combine
 * the whole thing into a single watchable expression, we
 * have to inline those filters. This function does exactly
 * that. This is a bit hacky but it avoids heavy changes
 * to directive parser and watcher mechanism.
 *
 * @param {String} exp
 * @param {Boolean} single
 * @return {String}
 */

var filterRE = /[^|]\|[^|]/;
function inlineFilters(exp, single) {
  if (!filterRE.test(exp)) {
    return single ? exp : '(' + exp + ')';
  } else {
    var dir = parseDirective(exp);
    if (!dir.filters) {
      return '(' + exp + ')';
    } else {
      return 'this._applyFilters(' + dir.expression + // value
      ',null,' + // oldValue (null for read)
      JSON.stringify(dir.filters) + // filter descriptors
      ',false)'; // write?
    }
  }
}

var text = Object.freeze({
  compileRegex: compileRegex,
  parseText: parseText,
  tokensToExp: tokensToExp
});

var delimiters = ['{{', '}}'];
var unsafeDelimiters = ['{{{', '}}}'];

var config = Object.defineProperties({

  /**
   * Whether to print debug messages.
   * Also enables stack trace for warnings.
   *
   * @type {Boolean}
   */

  debug: false,

  /**
   * Whether to suppress warnings.
   *
   * @type {Boolean}
   */

  silent: false,

  /**
   * Whether to use async rendering.
   */

  async: true,

  /**
   * Whether to warn against errors caught when evaluating
   * expressions.
   */

  warnExpressionErrors: true,

  /**
   * Whether to allow devtools inspection.
   * Disabled by default in production builds.
   */

  devtools: process.env.NODE_ENV !== 'production',

  /**
   * Internal flag to indicate the delimiters have been
   * changed.
   *
   * @type {Boolean}
   */

  _delimitersChanged: true,

  /**
   * List of asset types that a component can own.
   *
   * @type {Array}
   */

  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],

  /**
   * prop binding modes
   */

  _propBindingModes: {
    ONE_WAY: 0,
    TWO_WAY: 1,
    ONE_TIME: 2
  },

  /**
   * Max circular updates allowed in a batcher flush cycle.
   */

  _maxUpdateCount: 100

}, {
  delimiters: { /**
                 * Interpolation delimiters. Changing these would trigger
                 * the text parser to re-compile the regular expressions.
                 *
                 * @type {Array<String>}
                 */

    get: function get() {
      return delimiters;
    },
    set: function set(val) {
      delimiters = val;
      compileRegex();
    },
    configurable: true,
    enumerable: true
  },
  unsafeDelimiters: {
    get: function get() {
      return unsafeDelimiters;
    },
    set: function set(val) {
      unsafeDelimiters = val;
      compileRegex();
    },
    configurable: true,
    enumerable: true
  }
});

var warn = undefined;
var formatComponentName = undefined;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var hasConsole = typeof console !== 'undefined';

    warn = function (msg, vm) {
      if (hasConsole && !config.silent) {
        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));
      }
    };

    formatComponentName = function (vm) {
      var name = vm._isVue ? vm.$options.name : vm.name;
      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';
    };
  })();
}

/**
 * Append with transition.
 *
 * @param {Element} el
 * @param {Element} target
 * @param {Vue} vm
 * @param {Function} [cb]
 */

function appendWithTransition(el, target, vm, cb) {
  applyTransition(el, 1, function () {
    target.appendChild(el);
  }, vm, cb);
}

/**
 * InsertBefore with transition.
 *
 * @param {Element} el
 * @param {Element} target
 * @param {Vue} vm
 * @param {Function} [cb]
 */

function beforeWithTransition(el, target, vm, cb) {
  applyTransition(el, 1, function () {
    before(el, target);
  }, vm, cb);
}

/**
 * Remove with transition.
 *
 * @param {Element} el
 * @param {Vue} vm
 * @param {Function} [cb]
 */

function removeWithTransition(el, vm, cb) {
  applyTransition(el, -1, function () {
    remove(el);
  }, vm, cb);
}

/**
 * Apply transitions with an operation callback.
 *
 * @param {Element} el
 * @param {Number} direction
 *                  1: enter
 *                 -1: leave
 * @param {Function} op - the actual DOM operation
 * @param {Vue} vm
 * @param {Function} [cb]
 */

function applyTransition(el, direction, op, vm, cb) {
  var transition = el.__v_trans;
  if (!transition ||
  // skip if there are no js hooks and CSS transition is
  // not supported
  !transition.hooks && !transitionEndEvent ||
  // skip transitions for initial compile
  !vm._isCompiled ||
  // if the vm is being manipulated by a parent directive
  // during the parent's compilation phase, skip the
  // animation.
  vm.$parent && !vm.$parent._isCompiled) {
    op();
    if (cb) cb();
    return;
  }
  var action = direction > 0 ? 'enter' : 'leave';
  transition[action](op, cb);
}

var transition = Object.freeze({
  appendWithTransition: appendWithTransition,
  beforeWithTransition: beforeWithTransition,
  removeWithTransition: removeWithTransition,
  applyTransition: applyTransition
});

/**
 * Query an element selector if it's not an element already.
 *
 * @param {String|Element} el
 * @return {Element}
 */

function query(el) {
  if (typeof el === 'string') {
    var selector = el;
    el = document.querySelector(el);
    if (!el) {
      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);
    }
  }
  return el;
}

/**
 * Check if a node is in the document.
 * Note: document.documentElement.contains should work here
 * but always returns false for comment nodes in phantomjs,
 * making unit tests difficult. This is fixed by doing the
 * contains() check on the node's parentNode instead of
 * the node itself.
 *
 * @param {Node} node
 * @return {Boolean}
 */

function inDoc(node) {
  if (!node) return false;
  var doc = node.ownerDocument.documentElement;
  var parent = node.parentNode;
  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));
}

/**
 * Get and remove an attribute from a node.
 *
 * @param {Node} node
 * @param {String} _attr
 */

function getAttr(node, _attr) {
  var val = node.getAttribute(_attr);
  if (val !== null) {
    node.removeAttribute(_attr);
  }
  return val;
}

/**
 * Get an attribute with colon or v-bind: prefix.
 *
 * @param {Node} node
 * @param {String} name
 * @return {String|null}
 */

function getBindAttr(node, name) {
  var val = getAttr(node, ':' + name);
  if (val === null) {
    val = getAttr(node, 'v-bind:' + name);
  }
  return val;
}

/**
 * Check the presence of a bind attribute.
 *
 * @param {Node} node
 * @param {String} name
 * @return {Boolean}
 */

function hasBindAttr(node, name) {
  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);
}

/**
 * Insert el before target
 *
 * @param {Element} el
 * @param {Element} target
 */

function before(el, target) {
  target.parentNode.insertBefore(el, target);
}

/**
 * Insert el after target
 *
 * @param {Element} el
 * @param {Element} target
 */

function after(el, target) {
  if (target.nextSibling) {
    before(el, target.nextSibling);
  } else {
    target.parentNode.appendChild(el);
  }
}

/**
 * Remove el from DOM
 *
 * @param {Element} el
 */

function remove(el) {
  el.parentNode.removeChild(el);
}

/**
 * Prepend el to target
 *
 * @param {Element} el
 * @param {Element} target
 */

function prepend(el, target) {
  if (target.firstChild) {
    before(el, target.firstChild);
  } else {
    target.appendChild(el);
  }
}

/**
 * Replace target with el
 *
 * @param {Element} target
 * @param {Element} el
 */

function replace(target, el) {
  var parent = target.parentNode;
  if (parent) {
    parent.replaceChild(el, target);
  }
}

/**
 * Add event listener shorthand.
 *
 * @param {Element} el
 * @param {String} event
 * @param {Function} cb
 * @param {Boolean} [useCapture]
 */

function on(el, event, cb, useCapture) {
  el.addEventListener(event, cb, useCapture);
}

/**
 * Remove event listener shorthand.
 *
 * @param {Element} el
 * @param {String} event
 * @param {Function} cb
 */

function off(el, event, cb) {
  el.removeEventListener(event, cb);
}

/**
 * For IE9 compat: when both class and :class are present
 * getAttribute('class') returns wrong value...
 *
 * @param {Element} el
 * @return {String}
 */

function getClass(el) {
  var classname = el.className;
  if (typeof classname === 'object') {
    classname = classname.baseVal || '';
  }
  return classname;
}

/**
 * In IE9, setAttribute('class') will result in empty class
 * if the element also has the :class attribute; However in
 * PhantomJS, setting `className` does not work on SVG elements...
 * So we have to do a conditional check here.
 *
 * @param {Element} el
 * @param {String} cls
 */

function setClass(el, cls) {
  /* istanbul ignore if */
  if (isIE9 && !/svg$/.test(el.namespaceURI)) {
    el.className = cls;
  } else {
    el.setAttribute('class', cls);
  }
}

/**
 * Add class with compatibility for IE & SVG
 *
 * @param {Element} el
 * @param {String} cls
 */

function addClass(el, cls) {
  if (el.classList) {
    el.classList.add(cls);
  } else {
    var cur = ' ' + getClass(el) + ' ';
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      setClass(el, (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for IE & SVG
 *
 * @param {Element} el
 * @param {String} cls
 */

function removeClass(el, cls) {
  if (el.classList) {
    el.classList.remove(cls);
  } else {
    var cur = ' ' + getClass(el) + ' ';
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    setClass(el, cur.trim());
  }
  if (!el.className) {
    el.removeAttribute('class');
  }
}

/**
 * Extract raw content inside an element into a temporary
 * container div
 *
 * @param {Element} el
 * @param {Boolean} asFragment
 * @return {Element|DocumentFragment}
 */

function extractContent(el, asFragment) {
  var child;
  var rawContent;
  /* istanbul ignore if */
  if (isTemplate(el) && isFragment(el.content)) {
    el = el.content;
  }
  if (el.hasChildNodes()) {
    trimNode(el);
    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');
    /* eslint-disable no-cond-assign */
    while (child = el.firstChild) {
      /* eslint-enable no-cond-assign */
      rawContent.appendChild(child);
    }
  }
  return rawContent;
}

/**
 * Trim possible empty head/tail text and comment
 * nodes inside a parent.
 *
 * @param {Node} node
 */

function trimNode(node) {
  var child;
  /* eslint-disable no-sequences */
  while ((child = node.firstChild, isTrimmable(child))) {
    node.removeChild(child);
  }
  while ((child = node.lastChild, isTrimmable(child))) {
    node.removeChild(child);
  }
  /* eslint-enable no-sequences */
}

function isTrimmable(node) {
  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);
}

/**
 * Check if an element is a template tag.
 * Note if the template appears inside an SVG its tagName
 * will be in lowercase.
 *
 * @param {Element} el
 */

function isTemplate(el) {
  return el.tagName && el.tagName.toLowerCase() === 'template';
}

/**
 * Create an "anchor" for performing dom insertion/removals.
 * This is used in a number of scenarios:
 * - fragment instance
 * - v-html
 * - v-if
 * - v-for
 * - component
 *
 * @param {String} content
 * @param {Boolean} persist - IE trashes empty textNodes on
 *                            cloneNode(true), so in certain
 *                            cases the anchor needs to be
 *                            non-empty to be persisted in
 *                            templates.
 * @return {Comment|Text}
 */

function createAnchor(content, persist) {
  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');
  anchor.__v_anchor = true;
  return anchor;
}

/**
 * Find a component ref attribute that starts with $.
 *
 * @param {Element} node
 * @return {String|undefined}
 */

var refRE = /^v-ref:/;

function findRef(node) {
  if (node.hasAttributes()) {
    var attrs = node.attributes;
    for (var i = 0, l = attrs.length; i < l; i++) {
      var name = attrs[i].name;
      if (refRE.test(name)) {
        return camelize(name.replace(refRE, ''));
      }
    }
  }
}

/**
 * Map a function to a range of nodes .
 *
 * @param {Node} node
 * @param {Node} end
 * @param {Function} op
 */

function mapNodeRange(node, end, op) {
  var next;
  while (node !== end) {
    next = node.nextSibling;
    op(node);
    node = next;
  }
  op(end);
}

/**
 * Remove a range of nodes with transition, store
 * the nodes in a fragment with correct ordering,
 * and call callback when done.
 *
 * @param {Node} start
 * @param {Node} end
 * @param {Vue} vm
 * @param {DocumentFragment} frag
 * @param {Function} cb
 */

function removeNodeRange(start, end, vm, frag, cb) {
  var done = false;
  var removed = 0;
  var nodes = [];
  mapNodeRange(start, end, function (node) {
    if (node === end) done = true;
    nodes.push(node);
    removeWithTransition(node, vm, onRemoved);
  });
  function onRemoved() {
    removed++;
    if (done && removed >= nodes.length) {
      for (var i = 0; i < nodes.length; i++) {
        frag.appendChild(nodes[i]);
      }
      cb && cb();
    }
  }
}

/**
 * Check if a node is a DocumentFragment.
 *
 * @param {Node} node
 * @return {Boolean}
 */

function isFragment(node) {
  return node && node.nodeType === 11;
}

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 *
 * @param {Element} el
 * @return {String}
 */

function getOuterHTML(el) {
  if (el.outerHTML) {
    return el.outerHTML;
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML;
  }
}

var commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;
var reservedTagRE = /^(slot|partial|component)$/i;

var isUnknownElement = undefined;
if (process.env.NODE_ENV !== 'production') {
  isUnknownElement = function (el, tag) {
    if (tag.indexOf('-') > -1) {
      // http://stackoverflow.com/a/28210364/1070244
      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
    } else {
      return (/HTMLUnknownElement/.test(el.toString()) &&
        // Chrome returns unknown for several HTML5 elements.
        // https://code.google.com/p/chromium/issues/detail?id=540526
        // Firefox returns unknown for some "Interactive elements."
        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)
      );
    }
  };
}

/**
 * Check if an element is a component, if yes return its
 * component id.
 *
 * @param {Element} el
 * @param {Object} options
 * @return {Object|undefined}
 */

function checkComponentAttr(el, options) {
  var tag = el.tagName.toLowerCase();
  var hasAttrs = el.hasAttributes();
  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {
    if (resolveAsset(options, 'components', tag)) {
      return { id: tag };
    } else {
      var is = hasAttrs && getIsBinding(el, options);
      if (is) {
        return is;
      } else if (process.env.NODE_ENV !== 'production') {
        var expectedTag = options._componentNameMap && options._componentNameMap[tag];
        if (expectedTag) {
          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');
        } else if (isUnknownElement(el, tag)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.');
        }
      }
    }
  } else if (hasAttrs) {
    return getIsBinding(el, options);
  }
}

/**
 * Get "is" binding from an element.
 *
 * @param {Element} el
 * @param {Object} options
 * @return {Object|undefined}
 */

function getIsBinding(el, options) {
  // dynamic syntax
  var exp = el.getAttribute('is');
  if (exp != null) {
    if (resolveAsset(options, 'components', exp)) {
      el.removeAttribute('is');
      return { id: exp };
    }
  } else {
    exp = getBindAttr(el, 'is');
    if (exp != null) {
      return { id: exp, dynamic: true };
    }
  }
}

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 *
 * All strategy functions follow the same signature:
 *
 * @param {*} parentVal
 * @param {*} childVal
 * @param {Vue} [vm]
 */

var strats = config.optionMergeStrategies = Object.create(null);

/**
 * Helper that recursively merges two data objects together.
 */

function mergeData(to, from) {
  var key, toVal, fromVal;
  for (key in from) {
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isObject(toVal) && isObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to;
}

/**
 * Data
 */

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }
    if (typeof childVal !== 'function') {
      process.env.NODE_ENV !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }
    if (!parentVal) {
      return childVal;
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn() {
      return mergeData(childVal.call(this), parentVal.call(this));
    };
  } else if (parentVal || childVal) {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
};

/**
 * El
 */

strats.el = function (parentVal, childVal, vm) {
  if (!vm && childVal && typeof childVal !== 'function') {
    process.env.NODE_ENV !== 'production' && warn('The "el" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
    return;
  }
  var ret = childVal || parentVal;
  // invoke the element factory if this is instance merge
  return vm && typeof ret === 'function' ? ret.call(vm) : ret;
};

/**
 * Hooks and param attributes are merged as arrays.
 */

strats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {
  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
};

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal) {
  var res = Object.create(parentVal || null);
  return childVal ? extend(res, guardArrayAssets(childVal)) : res;
}

config._assetTypes.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Events & Watchers.
 *
 * Events & watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = strats.events = function (parentVal, childVal) {
  if (!childVal) return parentVal;
  if (!parentVal) return childVal;
  var ret = {};
  extend(ret, parentVal);
  for (var key in childVal) {
    var parent = ret[key];
    var child = childVal[key];
    if (parent && !isArray(parent)) {
      parent = [parent];
    }
    ret[key] = parent ? parent.concat(child) : [child];
  }
  return ret;
};

/**
 * Other object hashes.
 */

strats.props = strats.methods = strats.computed = function (parentVal, childVal) {
  if (!childVal) return parentVal;
  if (!parentVal) return childVal;
  var ret = Object.create(null);
  extend(ret, parentVal);
  extend(ret, childVal);
  return ret;
};

/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};

/**
 * Make sure component options get converted to actual
 * constructors.
 *
 * @param {Object} options
 */

function guardComponents(options) {
  if (options.components) {
    var components = options.components = guardArrayAssets(options.components);
    var ids = Object.keys(components);
    var def;
    if (process.env.NODE_ENV !== 'production') {
      var map = options._componentNameMap = {};
    }
    for (var i = 0, l = ids.length; i < l; i++) {
      var key = ids[i];
      if (commonTagRE.test(key) || reservedTagRE.test(key)) {
        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
        continue;
      }
      // record a all lowercase <-> kebab-case mapping for
      // possible custom element case error warning
      if (process.env.NODE_ENV !== 'production') {
        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);
      }
      def = components[key];
      if (isPlainObject(def)) {
        components[key] = Vue.extend(def);
      }
    }
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 *
 * @param {Object} options
 */

function guardProps(options) {
  var props = options.props;
  var i, val;
  if (isArray(props)) {
    options.props = {};
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        options.props[val] = null;
      } else if (val.name) {
        options.props[val.name] = val;
      }
    }
  } else if (isPlainObject(props)) {
    var keys = Object.keys(props);
    i = keys.length;
    while (i--) {
      val = props[keys[i]];
      if (typeof val === 'function') {
        props[keys[i]] = { type: val };
      }
    }
  }
}

/**
 * Guard an Array-format assets option and converted it
 * into the key-value Object format.
 *
 * @param {Object|Array} assets
 * @return {Object}
 */

function guardArrayAssets(assets) {
  if (isArray(assets)) {
    var res = {};
    var i = assets.length;
    var asset;
    while (i--) {
      asset = assets[i];
      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;
      if (!id) {
        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a "name" or "id" field.');
      } else {
        res[id] = asset;
      }
    }
    return res;
  }
  return assets;
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 *
 * @param {Object} parent
 * @param {Object} child
 * @param {Vue} [vm] - if vm is present, indicates this is
 *                     an instantiation merge.
 */

function mergeOptions(parent, child, vm) {
  guardComponents(child);
  guardProps(child);
  if (process.env.NODE_ENV !== 'production') {
    if (child.propsData && !vm) {
      warn('propsData can only be used as an instantiation option.');
    }
  }
  var options = {};
  var key;
  if (child['extends']) {
    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      var mixin = child.mixins[i];
      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;
      parent = mergeOptions(parent, mixinOptions, vm);
    }
  }
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options;
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 *
 * @param {Object} options
 * @param {String} type
 * @param {String} id
 * @param {Boolean} warnMissing
 * @return {Object|Function}
 */

function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }
  var assets = options[type];
  var camelizedId;
  var res = assets[id] ||
  // camelCase ID
  assets[camelizedId = camelize(id)] ||
  // Pascal Case ID
  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];
  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }
  return res;
}

var uid$1 = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 *
 * @constructor
 */
function Dep() {
  this.id = uid$1++;
  this.subs = [];
}

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;

/**
 * Add a directive subscriber.
 *
 * @param {Directive} sub
 */

Dep.prototype.addSub = function (sub) {
  this.subs.push(sub);
};

/**
 * Remove a directive subscriber.
 *
 * @param {Directive} sub
 */

Dep.prototype.removeSub = function (sub) {
  this.subs.$remove(sub);
};

/**
 * Add self as a dependency to the target watcher.
 */

Dep.prototype.depend = function () {
  Dep.target.addDep(this);
};

/**
 * Notify all subscribers of a new value.
 */

Dep.prototype.notify = function () {
  // stablize the subscriber list first
  var subs = toArray(this.subs);
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto)

/**
 * Intercept mutating methods and emit events
 */

;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    // avoid leaking arguments:
    // http://jsperf.com/closure-with-arguments
    var i = arguments.length;
    var args = new Array(i);
    while (i--) {
      args[i] = arguments[i];
    }
    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
        inserted = args;
        break;
      case 'unshift':
        inserted = args;
        break;
      case 'splice':
        inserted = args.slice(2);
        break;
    }
    if (inserted) ob.observeArray(inserted);
    // notify change
    ob.dep.notify();
    return result;
  });
});

/**
 * Swap the element at the given index with a new value
 * and emits corresponding event.
 *
 * @param {Number} index
 * @param {*} val
 * @return {*} - replaced element
 */

def(arrayProto, '$set', function $set(index, val) {
  if (index >= this.length) {
    this.length = Number(index) + 1;
  }
  return this.splice(index, 1, val)[0];
});

/**
 * Convenience method to remove the element at given index or target element reference.
 *
 * @param {*} item
 */

def(arrayProto, '$remove', function $remove(item) {
  /* istanbul ignore if */
  if (!this.length) return;
  var index = indexOf(this, item);
  if (index > -1) {
    return this.splice(index, 1);
  }
});

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * By default, when a reactive property is set, the new value is
 * also converted to become reactive. However in certain cases, e.g.
 * v-for scope alias and props, we don't want to force conversion
 * because the value may be a nested value under a frozen data structure.
 *
 * So whenever we want to set a reactive property without forcing
 * conversion on the new value, we wrap that call inside this function.
 */

var shouldConvert = true;

function withoutConversion(fn) {
  shouldConvert = false;
  fn();
  shouldConvert = true;
}

/**
 * Observer class that are attached to each observed
 * object. Once attached, the observer converts target
 * object's property keys into getter/setters that
 * collect dependencies and dispatches updates.
 *
 * @param {Array|Object} value
 * @constructor
 */

function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  def(value, '__ob__', this);
  if (isArray(value)) {
    var augment = hasProto ? protoAugment : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
}

// Instance methods

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 *
 * @param {Object} obj
 */

Observer.prototype.walk = function (obj) {
  var keys = Object.keys(obj);
  for (var i = 0, l = keys.length; i < l; i++) {
    this.convert(keys[i], obj[keys[i]]);
  }
};

/**
 * Observe a list of Array items.
 *
 * @param {Array} items
 */

Observer.prototype.observeArray = function (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

/**
 * Convert a property into getter/setter so we can emit
 * the events when the property is accessed/changed.
 *
 * @param {String} key
 * @param {*} val
 */

Observer.prototype.convert = function (key, val) {
  defineReactive(this.value, key, val);
};

/**
 * Add an owner vm, so that when $set/$delete mutations
 * happen we can notify owner vms to proxy the keys and
 * digest the watchers. This is only called when the object
 * is observed as an instance's root $data.
 *
 * @param {Vue} vm
 */

Observer.prototype.addVm = function (vm) {
  (this.vms || (this.vms = [])).push(vm);
};

/**
 * Remove an owner vm. This is called when the object is
 * swapped out as an instance's $data object.
 *
 * @param {Vue} vm
 */

Observer.prototype.removeVm = function (vm) {
  this.vms.$remove(vm);
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 *
 * @param {Object|Array} target
 * @param {Object} src
 */

function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 *
 * @param {Object|Array} target
 * @param {Object} proto
 */

function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 *
 * @param {*} value
 * @param {Vue} [vm]
 * @return {Observer|undefined}
 * @static
 */

function observe(value, vm) {
  if (!value || typeof value !== 'object') {
    return;
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }
  if (ob && vm) {
    ob.addVm(vm);
  }
  return ob;
}

/**
 * Define a reactive property on an Object.
 *
 * @param {Object} obj
 * @param {String} key
 * @param {*} val
 */

function defineReactive(obj, key, val) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return;
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;

  var childOb = observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
        }
        if (isArray(value)) {
          for (var e, i = 0, l = value.length; i < l; i++) {
            e = value[i];
            e && e.__ob__ && e.__ob__.dep.depend();
          }
        }
      }
      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      if (newVal === value) {
        return;
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = observe(newVal);
      dep.notify();
    }
  });
}



var util = Object.freeze({
	defineReactive: defineReactive,
	set: set,
	del: del,
	hasOwn: hasOwn,
	isLiteral: isLiteral,
	isReserved: isReserved,
	_toString: _toString,
	toNumber: toNumber,
	toBoolean: toBoolean,
	stripQuotes: stripQuotes,
	camelize: camelize,
	hyphenate: hyphenate,
	classify: classify,
	bind: bind,
	toArray: toArray,
	extend: extend,
	isObject: isObject,
	isPlainObject: isPlainObject,
	def: def,
	debounce: _debounce,
	indexOf: indexOf,
	cancellable: cancellable,
	looseEqual: looseEqual,
	isArray: isArray,
	hasProto: hasProto,
	inBrowser: inBrowser,
	devtools: devtools,
	isIE: isIE,
	isIE9: isIE9,
	isAndroid: isAndroid,
	isIos: isIos,
	iosVersionMatch: iosVersionMatch,
	iosVersion: iosVersion,
	hasMutationObserverBug: hasMutationObserverBug,
	get transitionProp () { return transitionProp; },
	get transitionEndEvent () { return transitionEndEvent; },
	get animationProp () { return animationProp; },
	get animationEndEvent () { return animationEndEvent; },
	nextTick: nextTick,
	get _Set () { return _Set; },
	query: query,
	inDoc: inDoc,
	getAttr: getAttr,
	getBindAttr: getBindAttr,
	hasBindAttr: hasBindAttr,
	before: before,
	after: after,
	remove: remove,
	prepend: prepend,
	replace: replace,
	on: on,
	off: off,
	setClass: setClass,
	addClass: addClass,
	removeClass: removeClass,
	extractContent: extractContent,
	trimNode: trimNode,
	isTemplate: isTemplate,
	createAnchor: createAnchor,
	findRef: findRef,
	mapNodeRange: mapNodeRange,
	removeNodeRange: removeNodeRange,
	isFragment: isFragment,
	getOuterHTML: getOuterHTML,
	mergeOptions: mergeOptions,
	resolveAsset: resolveAsset,
	checkComponentAttr: checkComponentAttr,
	commonTagRE: commonTagRE,
	reservedTagRE: reservedTagRE,
	get warn () { return warn; }
});

var uid = 0;

function initMixin (Vue) {
  /**
   * The main init sequence. This is called for every
   * instance, including ones that are created from extended
   * constructors.
   *
   * @param {Object} options - this options object should be
   *                           the result of merging class
   *                           options and the options passed
   *                           in to the constructor.
   */

  Vue.prototype._init = function (options) {
    options = options || {};

    this.$el = null;
    this.$parent = options.parent;
    this.$root = this.$parent ? this.$parent.$root : this;
    this.$children = [];
    this.$refs = {}; // child vm references
    this.$els = {}; // element references
    this._watchers = []; // all watchers as an array
    this._directives = []; // all directives

    // a uid
    this._uid = uid++;

    // a flag to avoid this being observed
    this._isVue = true;

    // events bookkeeping
    this._events = {}; // registered callbacks
    this._eventsCount = {}; // for $broadcast optimization

    // fragment instance properties
    this._isFragment = false;
    this._fragment = // @type {DocumentFragment}
    this._fragmentStart = // @type {Text|Comment}
    this._fragmentEnd = null; // @type {Text|Comment}

    // lifecycle state
    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;
    this._unlinkFn = null;

    // context:
    // if this is a transcluded component, context
    // will be the common parent vm of this instance
    // and its host.
    this._context = options._context || this.$parent;

    // scope:
    // if this is inside an inline v-for, the scope
    // will be the intermediate scope created for this
    // repeat fragment. this is used for linking props
    // and container directives.
    this._scope = options._scope;

    // fragment:
    // if this instance is compiled inside a Fragment, it
    // needs to reigster itself as a child of that fragment
    // for attach/detach to work properly.
    this._frag = options._frag;
    if (this._frag) {
      this._frag.children.push(this);
    }

    // push self into parent / transclusion host
    if (this.$parent) {
      this.$parent.$children.push(this);
    }

    // merge options.
    options = this.$options = mergeOptions(this.constructor.options, options, this);

    // set ref
    this._updateRef();

    // initialize data as empty object.
    // it will be filled up in _initData().
    this._data = {};

    // call init hook
    this._callHook('init');

    // initialize data observation and scope inheritance.
    this._initState();

    // setup event system and option events.
    this._initEvents();

    // call created hook
    this._callHook('created');

    // if `el` option is passed, start compilation.
    if (options.el) {
      this.$mount(options.el);
    }
  };
}

var pathCache = new Cache(1000);

// actions
var APPEND = 0;
var PUSH = 1;
var INC_SUB_PATH_DEPTH = 2;
var PUSH_SUB_PATH = 3;

// states
var BEFORE_PATH = 0;
var IN_PATH = 1;
var BEFORE_IDENT = 2;
var IN_IDENT = 3;
var IN_SUB_PATH = 4;
var IN_SINGLE_QUOTE = 5;
var IN_DOUBLE_QUOTE = 6;
var AFTER_PATH = 7;
var ERROR = 8;

var pathStateMachine = [];

pathStateMachine[BEFORE_PATH] = {
  'ws': [BEFORE_PATH],
  'ident': [IN_IDENT, APPEND],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[IN_PATH] = {
  'ws': [IN_PATH],
  '.': [BEFORE_IDENT],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[BEFORE_IDENT] = {
  'ws': [BEFORE_IDENT],
  'ident': [IN_IDENT, APPEND]
};

pathStateMachine[IN_IDENT] = {
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND],
  'ws': [IN_PATH, PUSH],
  '.': [BEFORE_IDENT, PUSH],
  '[': [IN_SUB_PATH, PUSH],
  'eof': [AFTER_PATH, PUSH]
};

pathStateMachine[IN_SUB_PATH] = {
  "'": [IN_SINGLE_QUOTE, APPEND],
  '"': [IN_DOUBLE_QUOTE, APPEND],
  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
  ']': [IN_PATH, PUSH_SUB_PATH],
  'eof': ERROR,
  'else': [IN_SUB_PATH, APPEND]
};

pathStateMachine[IN_SINGLE_QUOTE] = {
  "'": [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_SINGLE_QUOTE, APPEND]
};

pathStateMachine[IN_DOUBLE_QUOTE] = {
  '"': [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_DOUBLE_QUOTE, APPEND]
};

/**
 * Determine the type of a character in a keypath.
 *
 * @param {Char} ch
 * @return {String} type
 */

function getPathCharType(ch) {
  if (ch === undefined) {
    return 'eof';
  }

  var code = ch.charCodeAt(0);

  switch (code) {
    case 0x5B: // [
    case 0x5D: // ]
    case 0x2E: // .
    case 0x22: // "
    case 0x27: // '
    case 0x30:
      // 0
      return ch;

    case 0x5F: // _
    case 0x24:
      // $
      return 'ident';

    case 0x20: // Space
    case 0x09: // Tab
    case 0x0A: // Newline
    case 0x0D: // Return
    case 0xA0: // No-break space
    case 0xFEFF: // Byte Order Mark
    case 0x2028: // Line Separator
    case 0x2029:
      // Paragraph Separator
      return 'ws';
  }

  // a-z, A-Z
  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {
    return 'ident';
  }

  // 1-9
  if (code >= 0x31 && code <= 0x39) {
    return 'number';
  }

  return 'else';
}

/**
 * Format a subPath, return its plain form if it is
 * a literal string or number. Otherwise prepend the
 * dynamic indicator (*).
 *
 * @param {String} path
 * @return {String}
 */

function formatSubPath(path) {
  var trimmed = path.trim();
  // invalid leading 0
  if (path.charAt(0) === '0' && isNaN(path)) {
    return false;
  }
  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;
}

/**
 * Parse a string path into an array of segments
 *
 * @param {String} path
 * @return {Array|undefined}
 */

function parse(path) {
  var keys = [];
  var index = -1;
  var mode = BEFORE_PATH;
  var subPathDepth = 0;
  var c, newChar, key, type, transition, action, typeMap;

  var actions = [];

  actions[PUSH] = function () {
    if (key !== undefined) {
      keys.push(key);
      key = undefined;
    }
  };

  actions[APPEND] = function () {
    if (key === undefined) {
      key = newChar;
    } else {
      key += newChar;
    }
  };

  actions[INC_SUB_PATH_DEPTH] = function () {
    actions[APPEND]();
    subPathDepth++;
  };

  actions[PUSH_SUB_PATH] = function () {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = IN_SUB_PATH;
      actions[APPEND]();
    } else {
      subPathDepth = 0;
      key = formatSubPath(key);
      if (key === false) {
        return false;
      } else {
        actions[PUSH]();
      }
    }
  };

  function maybeUnescapeQuote() {
    var nextChar = path[index + 1];
    if (mode === IN_SINGLE_QUOTE && nextChar === "'" || mode === IN_DOUBLE_QUOTE && nextChar === '"') {
      index++;
      newChar = '\\' + nextChar;
      actions[APPEND]();
      return true;
    }
  }

  while (mode != null) {
    index++;
    c = path[index];

    if (c === '\\' && maybeUnescapeQuote()) {
      continue;
    }

    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || ERROR;

    if (transition === ERROR) {
      return; // parse error
    }

    mode = transition[0];
    action = actions[transition[1]];
    if (action) {
      newChar = transition[2];
      newChar = newChar === undefined ? c : newChar;
      if (action() === false) {
        return;
      }
    }

    if (mode === AFTER_PATH) {
      keys.raw = path;
      return keys;
    }
  }
}

/**
 * External parse that check for a cache hit first
 *
 * @param {String} path
 * @return {Array|undefined}
 */

function parsePath(path) {
  var hit = pathCache.get(path);
  if (!hit) {
    hit = parse(path);
    if (hit) {
      pathCache.put(path, hit);
    }
  }
  return hit;
}

/**
 * Get from an object from a path string
 *
 * @param {Object} obj
 * @param {String} path
 */

function getPath(obj, path) {
  return parseExpression(path).get(obj);
}

/**
 * Warn against setting non-existent root path on a vm.
 */

var warnNonExistent;
if (process.env.NODE_ENV !== 'production') {
  warnNonExistent = function (path, vm) {
    warn('You are setting a non-existent path "' + path.raw + '" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the "data" option for more reliable reactivity ' + 'and better performance.', vm);
  };
}

/**
 * Set on an object from a path
 *
 * @param {Object} obj
 * @param {String | Array} path
 * @param {*} val
 */

function setPath(obj, path, val) {
  var original = obj;
  if (typeof path === 'string') {
    path = parse(path);
  }
  if (!path || !isObject(obj)) {
    return false;
  }
  var last, key;
  for (var i = 0, l = path.length; i < l; i++) {
    last = obj;
    key = path[i];
    if (key.charAt(0) === '*') {
      key = parseExpression(key.slice(1)).get.call(original, original);
    }
    if (i < l - 1) {
      obj = obj[key];
      if (!isObject(obj)) {
        obj = {};
        if (process.env.NODE_ENV !== 'production' && last._isVue) {
          warnNonExistent(path, last);
        }
        set(last, key, obj);
      }
    } else {
      if (isArray(obj)) {
        obj.$set(key, val);
      } else if (key in obj) {
        obj[key] = val;
      } else {
        if (process.env.NODE_ENV !== 'production' && obj._isVue) {
          warnNonExistent(path, obj);
        }
        set(obj, key, val);
      }
    }
  }
  return true;
}

var path = Object.freeze({
  parsePath: parsePath,
  getPath: getPath,
  setPath: setPath
});

var expressionCache = new Cache(1000);

var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';
var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\b|') + '\\b)');

// keywords that don't make sense inside expressions
var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';
var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\b|') + '\\b)');

var wsRE = /\s/g;
var newlineRE = /\n/g;
var saveRE = /[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g;
var restoreRE = /"(\d+)"/g;
var pathTestRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/;
var identRE = /[^\w$\.](?:[A-Za-z_$][\w$]*)/g;
var literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;

function noop() {}

/**
 * Save / Rewrite / Restore
 *
 * When rewriting paths found in an expression, it is
 * possible for the same letter sequences to be found in
 * strings and Object literal property keys. Therefore we
 * remove and store these parts in a temporary array, and
 * restore them after the path rewrite.
 */

var saved = [];

/**
 * Save replacer
 *
 * The save regex can match two possible cases:
 * 1. An opening object literal
 * 2. A string
 * If matched as a plain string, we need to escape its
 * newlines, since the string needs to be preserved when
 * generating the function body.
 *
 * @param {String} str
 * @param {String} isString - str if matched as a string
 * @return {String} - placeholder with index
 */

function save(str, isString) {
  var i = saved.length;
  saved[i] = isString ? str.replace(newlineRE, '\\n') : str;
  return '"' + i + '"';
}

/**
 * Path rewrite replacer
 *
 * @param {String} raw
 * @return {String}
 */

function rewrite(raw) {
  var c = raw.charAt(0);
  var path = raw.slice(1);
  if (allowedKeywordsRE.test(path)) {
    return raw;
  } else {
    path = path.indexOf('"') > -1 ? path.replace(restoreRE, restore) : path;
    return c + 'scope.' + path;
  }
}

/**
 * Restore replacer
 *
 * @param {String} str
 * @param {String} i - matched save index
 * @return {String}
 */

function restore(str, i) {
  return saved[i];
}

/**
 * Rewrite an expression, prefixing all path accessors with
 * `scope.` and generate getter/setter functions.
 *
 * @param {String} exp
 * @return {Function}
 */

function compileGetter(exp) {
  if (improperKeywordsRE.test(exp)) {
    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);
  }
  // reset state
  saved.length = 0;
  // save strings and object literal keys
  var body = exp.replace(saveRE, save).replace(wsRE, '');
  // rewrite all paths
  // pad 1 space here because the regex matches 1 extra char
  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);
  return makeGetterFn(body);
}

/**
 * Build a getter function. Requires eval.
 *
 * We isolate the try/catch so it doesn't affect the
 * optimization of the parse function when it is not called.
 *
 * @param {String} body
 * @return {Function|undefined}
 */

function makeGetterFn(body) {
  try {
    /* eslint-disable no-new-func */
    return new Function('scope', 'return ' + body + ';');
    /* eslint-enable no-new-func */
  } catch (e) {
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if (e.toString().match(/unsafe-eval|CSP/)) {
        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');
      } else {
        warn('Invalid expression. ' + 'Generated function body: ' + body);
      }
    }
    return noop;
  }
}

/**
 * Compile a setter function for the expression.
 *
 * @param {String} exp
 * @return {Function|undefined}
 */

function compileSetter(exp) {
  var path = parsePath(exp);
  if (path) {
    return function (scope, val) {
      setPath(scope, path, val);
    };
  } else {
    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);
  }
}

/**
 * Parse an expression into re-written getter/setters.
 *
 * @param {String} exp
 * @param {Boolean} needSet
 * @return {Function}
 */

function parseExpression(exp, needSet) {
  exp = exp.trim();
  // try cache
  var hit = expressionCache.get(exp);
  if (hit) {
    if (needSet && !hit.set) {
      hit.set = compileSetter(hit.exp);
    }
    return hit;
  }
  var res = { exp: exp };
  res.get = isSimplePath(exp) && exp.indexOf('[') < 0
  // optimized super simple getter
  ? makeGetterFn('scope.' + exp)
  // dynamic getter
  : compileGetter(exp);
  if (needSet) {
    res.set = compileSetter(exp);
  }
  expressionCache.put(exp, res);
  return res;
}

/**
 * Check if an expression is a simple path.
 *
 * @param {String} exp
 * @return {Boolean}
 */

function isSimplePath(exp) {
  return pathTestRE.test(exp) &&
  // don't treat literal values as paths
  !literalValueRE$1.test(exp) &&
  // Math constants e.g. Math.PI, Math.E etc.
  exp.slice(0, 5) !== 'Math.';
}

var expression = Object.freeze({
  parseExpression: parseExpression,
  isSimplePath: isSimplePath
});

// we have two separate queues: one for directive updates
// and one for user watcher registered via $watch().
// we want to guarantee directive updates to be called
// before user watchers so that when user watchers are
// triggered, the DOM would have already been in updated
// state.

var queue = [];
var userQueue = [];
var has = {};
var circular = {};
var waiting = false;

/**
 * Reset the batcher's state.
 */

function resetBatcherState() {
  queue.length = 0;
  userQueue.length = 0;
  has = {};
  circular = {};
  waiting = false;
}

/**
 * Flush both queues and run the watchers.
 */

function flushBatcherQueue() {
  var _again = true;

  _function: while (_again) {
    _again = false;

    runBatcherQueue(queue);
    runBatcherQueue(userQueue);
    // user watchers triggered more watchers,
    // keep flushing until it depletes
    if (queue.length) {
      _again = true;
      continue _function;
    }
    // dev tool hook
    /* istanbul ignore if */
    if (devtools && config.devtools) {
      devtools.emit('flush');
    }
    resetBatcherState();
  }
}

/**
 * Run the watchers in a single queue.
 *
 * @param {Array} queue
 */

function runBatcherQueue(queue) {
  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (var i = 0; i < queue.length; i++) {
    var watcher = queue[i];
    var id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > config._maxUpdateCount) {
        warn('You may have an infinite update loop for watcher ' + 'with expression "' + watcher.expression + '"', watcher.vm);
        break;
      }
    }
  }
  queue.length = 0;
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 *
 * @param {Watcher} watcher
 *   properties:
 *   - {Number} id
 *   - {Function} run
 */

function pushWatcher(watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    // push watcher into appropriate queue
    var q = watcher.user ? userQueue : queue;
    has[id] = q.length;
    q.push(watcher);
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushBatcherQueue);
    }
  }
}

var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 *
 * @param {Vue} vm
 * @param {String|Function} expOrFn
 * @param {Function} cb
 * @param {Object} options
 *                 - {Array} filters
 *                 - {Boolean} twoWay
 *                 - {Boolean} deep
 *                 - {Boolean} user
 *                 - {Boolean} sync
 *                 - {Boolean} lazy
 *                 - {Function} [preProcess]
 *                 - {Function} [postProcess]
 * @constructor
 */
function Watcher(vm, expOrFn, cb, options) {
  // mix in options
  if (options) {
    extend(this, options);
  }
  var isFn = typeof expOrFn === 'function';
  this.vm = vm;
  vm._watchers.push(this);
  this.expression = expOrFn;
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.prevError = null; // for async error stacks
  // parse expression for getter/setter
  if (isFn) {
    this.getter = expOrFn;
    this.setter = undefined;
  } else {
    var res = parseExpression(expOrFn, this.twoWay);
    this.getter = res.get;
    this.setter = res.set;
  }
  this.value = this.lazy ? undefined : this.get();
  // state for avoiding false triggers for deep and Array
  // watchers during vm._digest()
  this.queued = this.shallow = false;
}

/**
 * Evaluate the getter, and re-collect dependencies.
 */

Watcher.prototype.get = function () {
  this.beforeGet();
  var scope = this.scope || this.vm;
  var value;
  try {
    value = this.getter.call(scope, scope);
  } catch (e) {
    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {
      warn('Error when evaluating expression ' + '"' + this.expression + '": ' + e.toString(), this.vm);
    }
  }
  // "touch" every property so they are all tracked as
  // dependencies for deep watching
  if (this.deep) {
    traverse(value);
  }
  if (this.preProcess) {
    value = this.preProcess(value);
  }
  if (this.filters) {
    value = scope._applyFilters(value, null, this.filters, false);
  }
  if (this.postProcess) {
    value = this.postProcess(value);
  }
  this.afterGet();
  return value;
};

/**
 * Set the corresponding value with the setter.
 *
 * @param {*} value
 */

Watcher.prototype.set = function (value) {
  var scope = this.scope || this.vm;
  if (this.filters) {
    value = scope._applyFilters(value, this.value, this.filters, true);
  }
  try {
    this.setter.call(scope, scope, value);
  } catch (e) {
    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {
      warn('Error when evaluating setter ' + '"' + this.expression + '": ' + e.toString(), this.vm);
    }
  }
  // two-way sync for v-for alias
  var forContext = scope.$forContext;
  if (forContext && forContext.alias === this.expression) {
    if (forContext.filters) {
      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);
      return;
    }
    forContext._withLock(function () {
      if (scope.$key) {
        // original is an object
        forContext.rawValue[scope.$key] = value;
      } else {
        forContext.rawValue.$set(scope.$index, value);
      }
    });
  }
};

/**
 * Prepare for dependency collection.
 */

Watcher.prototype.beforeGet = function () {
  Dep.target = this;
};

/**
 * Add a dependency to this directive.
 *
 * @param {Dep} dep
 */

Watcher.prototype.addDep = function (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */

Watcher.prototype.afterGet = function () {
  Dep.target = null;
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 *
 * @param {Boolean} shallow
 */

Watcher.prototype.update = function (shallow) {
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync || !config.async) {
    this.run();
  } else {
    // if queued, only overwrite shallow with non-shallow,
    // but not the other way around.
    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;
    this.queued = true;
    // record before-push error stack in debug mode
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.debug) {
      this.prevError = new Error('[vue] async stack trace');
    }
    pushWatcher(this);
  }
};

/**
 * Batcher job interface.
 * Will be called by the batcher.
 */

Watcher.prototype.run = function () {
  if (this.active) {
    var value = this.get();
    if (value !== this.value ||
    // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated; but only do so if this is a
    // non-shallow update (caused by a vm digest).
    (isObject(value) || this.deep) && !this.shallow) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      // in debug + async mode, when a watcher callbacks
      // throws, we also throw the saved before-push error
      // so the full cross-tick stack trace is available.
      var prevError = this.prevError;
      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {
        this.prevError = null;
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          nextTick(function () {
            throw prevError;
          }, 0);
          throw e;
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
    this.queued = this.shallow = false;
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */

Watcher.prototype.evaluate = function () {
  // avoid overwriting another watcher that is being
  // collected.
  var current = Dep.target;
  this.value = this.get();
  this.dirty = false;
  Dep.target = current;
};

/**
 * Depend on all deps collected by this watcher.
 */

Watcher.prototype.depend = function () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subcriber list.
 */

Watcher.prototype.teardown = function () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed or is performing a v-for
    // re-render (the watcher list is then filtered by v-for).
    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {
      this.vm._watchers.$remove(this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
    this.vm = this.cb = this.value = null;
  }
};

/**
 * Recrusively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 *
 * @param {*} val
 */

var seenObjects = new _Set();
function traverse(val, seen) {
  var i = undefined,
      keys = undefined;
  if (!seen) {
    seen = seenObjects;
    seen.clear();
  }
  var isA = isArray(val);
  var isO = isObject(val);
  if ((isA || isO) && Object.isExtensible(val)) {
    if (val.__ob__) {
      var depId = val.__ob__.dep.id;
      if (seen.has(depId)) {
        return;
      } else {
        seen.add(depId);
      }
    }
    if (isA) {
      i = val.length;
      while (i--) traverse(val[i], seen);
    } else if (isO) {
      keys = Object.keys(val);
      i = keys.length;
      while (i--) traverse(val[keys[i]], seen);
    }
  }
}

var text$1 = {

  bind: function bind() {
    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';
  },

  update: function update(value) {
    this.el[this.attr] = _toString(value);
  }
};

var templateCache = new Cache(1000);
var idSelectorCache = new Cache(1000);

var map = {
  efault: [0, '', ''],
  legend: [1, '<fieldset>', '</fieldset>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']
};

map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

map.option = map.optgroup = [1, '<select multiple="multiple">', '</select>'];

map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];

map.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'xmlns:xlink="http://www.w3.org/1999/xlink" ' + 'xmlns:ev="http://www.w3.org/2001/xml-events"' + 'version="1.1">', '</svg>'];

/**
 * Check if a node is a supported template node with a
 * DocumentFragment content.
 *
 * @param {Node} node
 * @return {Boolean}
 */

function isRealTemplate(node) {
  return isTemplate(node) && isFragment(node.content);
}

var tagRE$1 = /<([\w:-]+)/;
var entityRE = /&#?\w+?;/;
var commentRE = /<!--/;

/**
 * Convert a string template to a DocumentFragment.
 * Determines correct wrapping by tag types. Wrapping
 * strategy found in jQuery & component/domify.
 *
 * @param {String} templateString
 * @param {Boolean} raw
 * @return {DocumentFragment}
 */

function stringToFragment(templateString, raw) {
  // try a cache hit first
  var cacheKey = raw ? templateString : templateString.trim();
  var hit = templateCache.get(cacheKey);
  if (hit) {
    return hit;
  }

  var frag = document.createDocumentFragment();
  var tagMatch = templateString.match(tagRE$1);
  var entityMatch = entityRE.test(templateString);
  var commentMatch = commentRE.test(templateString);

  if (!tagMatch && !entityMatch && !commentMatch) {
    // text only, return a single text node.
    frag.appendChild(document.createTextNode(templateString));
  } else {
    var tag = tagMatch && tagMatch[1];
    var wrap = map[tag] || map.efault;
    var depth = wrap[0];
    var prefix = wrap[1];
    var suffix = wrap[2];
    var node = document.createElement('div');

    node.innerHTML = prefix + templateString + suffix;
    while (depth--) {
      node = node.lastChild;
    }

    var child;
    /* eslint-disable no-cond-assign */
    while (child = node.firstChild) {
      /* eslint-enable no-cond-assign */
      frag.appendChild(child);
    }
  }
  if (!raw) {
    trimNode(frag);
  }
  templateCache.put(cacheKey, frag);
  return frag;
}

/**
 * Convert a template node to a DocumentFragment.
 *
 * @param {Node} node
 * @return {DocumentFragment}
 */

function nodeToFragment(node) {
  // if its a template tag and the browser supports it,
  // its content is already a document fragment. However, iOS Safari has
  // bug when using directly cloned template content with touch
  // events and can cause crashes when the nodes are removed from DOM, so we
  // have to treat template elements as string templates. (#2805)
  /* istanbul ignore if */
  if (isRealTemplate(node)) {
    return stringToFragment(node.innerHTML);
  }
  // script template
  if (node.tagName === 'SCRIPT') {
    return stringToFragment(node.textContent);
  }
  // normal node, clone it to avoid mutating the original
  var clonedNode = cloneNode(node);
  var frag = document.createDocumentFragment();
  var child;
  /* eslint-disable no-cond-assign */
  while (child = clonedNode.firstChild) {
    /* eslint-enable no-cond-assign */
    frag.appendChild(child);
  }
  trimNode(frag);
  return frag;
}

// Test for the presence of the Safari template cloning bug
// https://bugs.webkit.org/showug.cgi?id=137755
var hasBrokenTemplate = (function () {
  /* istanbul ignore else */
  if (inBrowser) {
    var a = document.createElement('div');
    a.innerHTML = '<template>1</template>';
    return !a.cloneNode(true).firstChild.innerHTML;
  } else {
    return false;
  }
})();

// Test for IE10/11 textarea placeholder clone bug
var hasTextareaCloneBug = (function () {
  /* istanbul ignore else */
  if (inBrowser) {
    var t = document.createElement('textarea');
    t.placeholder = 't';
    return t.cloneNode(true).value === 't';
  } else {
    return false;
  }
})();

/**
 * 1. Deal with Safari cloning nested <template> bug by
 *    manually cloning all template instances.
 * 2. Deal with IE10/11 textarea placeholder bug by setting
 *    the correct value after cloning.
 *
 * @param {Element|DocumentFragment} node
 * @return {Element|DocumentFragment}
 */

function cloneNode(node) {
  /* istanbul ignore if */
  if (!node.querySelectorAll) {
    return node.cloneNode();
  }
  var res = node.cloneNode(true);
  var i, original, cloned;
  /* istanbul ignore if */
  if (hasBrokenTemplate) {
    var tempClone = res;
    if (isRealTemplate(node)) {
      node = node.content;
      tempClone = res.content;
    }
    original = node.querySelectorAll('template');
    if (original.length) {
      cloned = tempClone.querySelectorAll('template');
      i = cloned.length;
      while (i--) {
        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);
      }
    }
  }
  /* istanbul ignore if */
  if (hasTextareaCloneBug) {
    if (node.tagName === 'TEXTAREA') {
      res.value = node.value;
    } else {
      original = node.querySelectorAll('textarea');
      if (original.length) {
        cloned = res.querySelectorAll('textarea');
        i = cloned.length;
        while (i--) {
          cloned[i].value = original[i].value;
        }
      }
    }
  }
  return res;
}

/**
 * Process the template option and normalizes it into a
 * a DocumentFragment that can be used as a partial or a
 * instance template.
 *
 * @param {*} template
 *        Possible values include:
 *        - DocumentFragment object
 *        - Node object of type Template
 *        - id selector: '#some-template-id'
 *        - template string: '<div><span>{{msg}}</span></div>'
 * @param {Boolean} shouldClone
 * @param {Boolean} raw
 *        inline HTML interpolation. Do not check for id
 *        selector and keep whitespace in the string.
 * @return {DocumentFragment|undefined}
 */

function parseTemplate(template, shouldClone, raw) {
  var node, frag;

  // if the template is already a document fragment,
  // do nothing
  if (isFragment(template)) {
    trimNode(template);
    return shouldClone ? cloneNode(template) : template;
  }

  if (typeof template === 'string') {
    // id selector
    if (!raw && template.charAt(0) === '#') {
      // id selector can be cached too
      frag = idSelectorCache.get(template);
      if (!frag) {
        node = document.getElementById(template.slice(1));
        if (node) {
          frag = nodeToFragment(node);
          // save selector to cache
          idSelectorCache.put(template, frag);
        }
      }
    } else {
      // normal string template
      frag = stringToFragment(template, raw);
    }
  } else if (template.nodeType) {
    // a direct node
    frag = nodeToFragment(template);
  }

  return frag && shouldClone ? cloneNode(frag) : frag;
}

var template = Object.freeze({
  cloneNode: cloneNode,
  parseTemplate: parseTemplate
});

var html = {

  bind: function bind() {
    // a comment node means this is a binding for
    // {{{ inline unescaped html }}}
    if (this.el.nodeType === 8) {
      // hold nodes
      this.nodes = [];
      // replace the placeholder with proper anchor
      this.anchor = createAnchor('v-html');
      replace(this.el, this.anchor);
    }
  },

  update: function update(value) {
    value = _toString(value);
    if (this.nodes) {
      this.swap(value);
    } else {
      this.el.innerHTML = value;
    }
  },

  swap: function swap(value) {
    // remove old nodes
    var i = this.nodes.length;
    while (i--) {
      remove(this.nodes[i]);
    }
    // convert new value to a fragment
    // do not attempt to retrieve from id selector
    var frag = parseTemplate(value, true, true);
    // save a reference to these nodes so we can remove later
    this.nodes = toArray(frag.childNodes);
    before(frag, this.anchor);
  }
};

/**
 * Abstraction for a partially-compiled fragment.
 * Can optionally compile content with a child scope.
 *
 * @param {Function} linker
 * @param {Vue} vm
 * @param {DocumentFragment} frag
 * @param {Vue} [host]
 * @param {Object} [scope]
 * @param {Fragment} [parentFrag]
 */
function Fragment(linker, vm, frag, host, scope, parentFrag) {
  this.children = [];
  this.childFrags = [];
  this.vm = vm;
  this.scope = scope;
  this.inserted = false;
  this.parentFrag = parentFrag;
  if (parentFrag) {
    parentFrag.childFrags.push(this);
  }
  this.unlink = linker(vm, frag, host, scope, this);
  var single = this.single = frag.childNodes.length === 1 &&
  // do not go single mode if the only node is an anchor
  !frag.childNodes[0].__v_anchor;
  if (single) {
    this.node = frag.childNodes[0];
    this.before = singleBefore;
    this.remove = singleRemove;
  } else {
    this.node = createAnchor('fragment-start');
    this.end = createAnchor('fragment-end');
    this.frag = frag;
    prepend(this.node, frag);
    frag.appendChild(this.end);
    this.before = multiBefore;
    this.remove = multiRemove;
  }
  this.node.__v_frag = this;
}

/**
 * Call attach/detach for all components contained within
 * this fragment. Also do so recursively for all child
 * fragments.
 *
 * @param {Function} hook
 */

Fragment.prototype.callHook = function (hook) {
  var i, l;
  for (i = 0, l = this.childFrags.length; i < l; i++) {
    this.childFrags[i].callHook(hook);
  }
  for (i = 0, l = this.children.length; i < l; i++) {
    hook(this.children[i]);
  }
};

/**
 * Insert fragment before target, single node version
 *
 * @param {Node} target
 * @param {Boolean} withTransition
 */

function singleBefore(target, withTransition) {
  this.inserted = true;
  var method = withTransition !== false ? beforeWithTransition : before;
  method(this.node, target, this.vm);
  if (inDoc(this.node)) {
    this.callHook(attach);
  }
}

/**
 * Remove fragment, single node version
 */

function singleRemove() {
  this.inserted = false;
  var shouldCallRemove = inDoc(this.node);
  var self = this;
  this.beforeRemove();
  removeWithTransition(this.node, this.vm, function () {
    if (shouldCallRemove) {
      self.callHook(detach);
    }
    self.destroy();
  });
}

/**
 * Insert fragment before target, multi-nodes version
 *
 * @param {Node} target
 * @param {Boolean} withTransition
 */

function multiBefore(target, withTransition) {
  this.inserted = true;
  var vm = this.vm;
  var method = withTransition !== false ? beforeWithTransition : before;
  mapNodeRange(this.node, this.end, function (node) {
    method(node, target, vm);
  });
  if (inDoc(this.node)) {
    this.callHook(attach);
  }
}

/**
 * Remove fragment, multi-nodes version
 */

function multiRemove() {
  this.inserted = false;
  var self = this;
  var shouldCallRemove = inDoc(this.node);
  this.beforeRemove();
  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {
    if (shouldCallRemove) {
      self.callHook(detach);
    }
    self.destroy();
  });
}

/**
 * Prepare the fragment for removal.
 */

Fragment.prototype.beforeRemove = function () {
  var i, l;
  for (i = 0, l = this.childFrags.length; i < l; i++) {
    // call the same method recursively on child
    // fragments, depth-first
    this.childFrags[i].beforeRemove(false);
  }
  for (i = 0, l = this.children.length; i < l; i++) {
    // Call destroy for all contained instances,
    // with remove:false and defer:true.
    // Defer is necessary because we need to
    // keep the children to call detach hooks
    // on them.
    this.children[i].$destroy(false, true);
  }
  var dirs = this.unlink.dirs;
  for (i = 0, l = dirs.length; i < l; i++) {
    // disable the watchers on all the directives
    // so that the rendered content stays the same
    // during removal.
    dirs[i]._watcher && dirs[i]._watcher.teardown();
  }
};

/**
 * Destroy the fragment.
 */

Fragment.prototype.destroy = function () {
  if (this.parentFrag) {
    this.parentFrag.childFrags.$remove(this);
  }
  this.node.__v_frag = null;
  this.unlink();
};

/**
 * Call attach hook for a Vue instance.
 *
 * @param {Vue} child
 */

function attach(child) {
  if (!child._isAttached && inDoc(child.$el)) {
    child._callHook('attached');
  }
}

/**
 * Call detach hook for a Vue instance.
 *
 * @param {Vue} child
 */

function detach(child) {
  if (child._isAttached && !inDoc(child.$el)) {
    child._callHook('detached');
  }
}

var linkerCache = new Cache(5000);

/**
 * A factory that can be used to create instances of a
 * fragment. Caches the compiled linker if possible.
 *
 * @param {Vue} vm
 * @param {Element|String} el
 */
function FragmentFactory(vm, el) {
  this.vm = vm;
  var template;
  var isString = typeof el === 'string';
  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {
    template = parseTemplate(el, true);
  } else {
    template = document.createDocumentFragment();
    template.appendChild(el);
  }
  this.template = template;
  // linker can be cached, but only for components
  var linker;
  var cid = vm.constructor.cid;
  if (cid > 0) {
    var cacheId = cid + (isString ? el : getOuterHTML(el));
    linker = linkerCache.get(cacheId);
    if (!linker) {
      linker = compile(template, vm.$options, true);
      linkerCache.put(cacheId, linker);
    }
  } else {
    linker = compile(template, vm.$options, true);
  }
  this.linker = linker;
}

/**
 * Create a fragment instance with given host and scope.
 *
 * @param {Vue} host
 * @param {Object} scope
 * @param {Fragment} parentFrag
 */

FragmentFactory.prototype.create = function (host, scope, parentFrag) {
  var frag = cloneNode(this.template);
  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);
};

var ON = 700;
var MODEL = 800;
var BIND = 850;
var TRANSITION = 1100;
var EL = 1500;
var COMPONENT = 1500;
var PARTIAL = 1750;
var IF = 2100;
var FOR = 2200;
var SLOT = 2300;

var uid$3 = 0;

var vFor = {

  priority: FOR,
  terminal: true,

  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],

  bind: function bind() {
    // support "item in/of items" syntax
    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);
    if (inMatch) {
      var itMatch = inMatch[1].match(/\((.*),(.*)\)/);
      if (itMatch) {
        this.iterator = itMatch[1].trim();
        this.alias = itMatch[2].trim();
      } else {
        this.alias = inMatch[1].trim();
      }
      this.expression = inMatch[2];
    }

    if (!this.alias) {
      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression "' + this.descriptor.raw + '": ' + 'alias is required.', this.vm);
      return;
    }

    // uid as a cache identifier
    this.id = '__v-for__' + ++uid$3;

    // check if this is an option list,
    // so that we know if we need to update the <select>'s
    // v-model when the option list has changed.
    // because v-model has a lower priority than v-for,
    // the v-model is not bound here yet, so we have to
    // retrive it in the actual updateModel() function.
    var tag = this.el.tagName;
    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';

    // setup anchor nodes
    this.start = createAnchor('v-for-start');
    this.end = createAnchor('v-for-end');
    replace(this.el, this.end);
    before(this.start, this.end);

    // cache
    this.cache = Object.create(null);

    // fragment factory
    this.factory = new FragmentFactory(this.vm, this.el);
  },

  update: function update(data) {
    this.diff(data);
    this.updateRef();
    this.updateModel();
  },

  /**
   * Diff, based on new data and old data, determine the
   * minimum amount of DOM manipulations needed to make the
   * DOM reflect the new data Array.
   *
   * The algorithm diffs the new data Array by storing a
   * hidden reference to an owner vm instance on previously
   * seen data. This allows us to achieve O(n) which is
   * better than a levenshtein distance based algorithm,
   * which is O(m * n).
   *
   * @param {Array} data
   */

  diff: function diff(data) {
    // check if the Array was converted from an Object
    var item = data[0];
    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');

    var trackByKey = this.params.trackBy;
    var oldFrags = this.frags;
    var frags = this.frags = new Array(data.length);
    var alias = this.alias;
    var iterator = this.iterator;
    var start = this.start;
    var end = this.end;
    var inDocument = inDoc(start);
    var init = !oldFrags;
    var i, l, frag, key, value, primitive;

    // First pass, go through the new Array and fill up
    // the new frags array. If a piece of data has a cached
    // instance for it, we reuse it. Otherwise build a new
    // instance.
    for (i = 0, l = data.length; i < l; i++) {
      item = data[i];
      key = convertedFromObject ? item.$key : null;
      value = convertedFromObject ? item.$value : item;
      primitive = !isObject(value);
      frag = !init && this.getCachedFrag(value, i, key);
      if (frag) {
        // reusable fragment
        frag.reused = true;
        // update $index
        frag.scope.$index = i;
        // update $key
        if (key) {
          frag.scope.$key = key;
        }
        // update iterator
        if (iterator) {
          frag.scope[iterator] = key !== null ? key : i;
        }
        // update data for track-by, object repeat &
        // primitive values.
        if (trackByKey || convertedFromObject || primitive) {
          withoutConversion(function () {
            frag.scope[alias] = value;
          });
        }
      } else {
        // new isntance
        frag = this.create(value, alias, i, key);
        frag.fresh = !init;
      }
      frags[i] = frag;
      if (init) {
        frag.before(end);
      }
    }

    // we're done for the initial render.
    if (init) {
      return;
    }

    // Second pass, go through the old fragments and
    // destroy those who are not reused (and remove them
    // from cache)
    var removalIndex = 0;
    var totalRemoved = oldFrags.length - frags.length;
    // when removing a large number of fragments, watcher removal
    // turns out to be a perf bottleneck, so we batch the watcher
    // removals into a single filter call!
    this.vm._vForRemoving = true;
    for (i = 0, l = oldFrags.length; i < l; i++) {
      frag = oldFrags[i];
      if (!frag.reused) {
        this.deleteCachedFrag(frag);
        this.remove(frag, removalIndex++, totalRemoved, inDocument);
      }
    }
    this.vm._vForRemoving = false;
    if (removalIndex) {
      this.vm._watchers = this.vm._watchers.filter(function (w) {
        return w.active;
      });
    }

    // Final pass, move/insert new fragments into the
    // right place.
    var targetPrev, prevEl, currentPrev;
    var insertionIndex = 0;
    for (i = 0, l = frags.length; i < l; i++) {
      frag = frags[i];
      // this is the frag that we should be after
      targetPrev = frags[i - 1];
      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;
      if (frag.reused && !frag.staggerCb) {
        currentPrev = findPrevFrag(frag, start, this.id);
        if (currentPrev !== targetPrev && (!currentPrev ||
        // optimization for moving a single item.
        // thanks to suggestions by @livoras in #1807
        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {
          this.move(frag, prevEl);
        }
      } else {
        // new instance, or still in stagger.
        // insert with updated stagger index.
        this.insert(frag, insertionIndex++, prevEl, inDocument);
      }
      frag.reused = frag.fresh = false;
    }
  },

  /**
   * Create a new fragment instance.
   *
   * @param {*} value
   * @param {String} alias
   * @param {Number} index
   * @param {String} [key]
   * @return {Fragment}
   */

  create: function create(value, alias, index, key) {
    var host = this._host;
    // create iteration scope
    var parentScope = this._scope || this.vm;
    var scope = Object.create(parentScope);
    // ref holder for the scope
    scope.$refs = Object.create(parentScope.$refs);
    scope.$els = Object.create(parentScope.$els);
    // make sure point $parent to parent scope
    scope.$parent = parentScope;
    // for two-way binding on alias
    scope.$forContext = this;
    // define scope properties
    // important: define the scope alias without forced conversion
    // so that frozen data structures remain non-reactive.
    withoutConversion(function () {
      defineReactive(scope, alias, value);
    });
    defineReactive(scope, '$index', index);
    if (key) {
      defineReactive(scope, '$key', key);
    } else if (scope.$key) {
      // avoid accidental fallback
      def(scope, '$key', null);
    }
    if (this.iterator) {
      defineReactive(scope, this.iterator, key !== null ? key : index);
    }
    var frag = this.factory.create(host, scope, this._frag);
    frag.forId = this.id;
    this.cacheFrag(value, frag, index, key);
    return frag;
  },

  /**
   * Update the v-ref on owner vm.
   */

  updateRef: function updateRef() {
    var ref = this.descriptor.ref;
    if (!ref) return;
    var hash = (this._scope || this.vm).$refs;
    var refs;
    if (!this.fromObject) {
      refs = this.frags.map(findVmFromFrag);
    } else {
      refs = {};
      this.frags.forEach(function (frag) {
        refs[frag.scope.$key] = findVmFromFrag(frag);
      });
    }
    hash[ref] = refs;
  },

  /**
   * For option lists, update the containing v-model on
   * parent <select>.
   */

  updateModel: function updateModel() {
    if (this.isOption) {
      var parent = this.start.parentNode;
      var model = parent && parent.__v_model;
      if (model) {
        model.forceUpdate();
      }
    }
  },

  /**
   * Insert a fragment. Handles staggering.
   *
   * @param {Fragment} frag
   * @param {Number} index
   * @param {Node} prevEl
   * @param {Boolean} inDocument
   */

  insert: function insert(frag, index, prevEl, inDocument) {
    if (frag.staggerCb) {
      frag.staggerCb.cancel();
      frag.staggerCb = null;
    }
    var staggerAmount = this.getStagger(frag, index, null, 'enter');
    if (inDocument && staggerAmount) {
      // create an anchor and insert it synchronously,
      // so that we can resolve the correct order without
      // worrying about some elements not inserted yet
      var anchor = frag.staggerAnchor;
      if (!anchor) {
        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');
        anchor.__v_frag = frag;
      }
      after(anchor, prevEl);
      var op = frag.staggerCb = cancellable(function () {
        frag.staggerCb = null;
        frag.before(anchor);
        remove(anchor);
      });
      setTimeout(op, staggerAmount);
    } else {
      var target = prevEl.nextSibling;
      /* istanbul ignore if */
      if (!target) {
        // reset end anchor position in case the position was messed up
        // by an external drag-n-drop library.
        after(this.end, prevEl);
        target = this.end;
      }
      frag.before(target);
    }
  },

  /**
   * Remove a fragment. Handles staggering.
   *
   * @param {Fragment} frag
   * @param {Number} index
   * @param {Number} total
   * @param {Boolean} inDocument
   */

  remove: function remove(frag, index, total, inDocument) {
    if (frag.staggerCb) {
      frag.staggerCb.cancel();
      frag.staggerCb = null;
      // it's not possible for the same frag to be removed
      // twice, so if we have a pending stagger callback,
      // it means this frag is queued for enter but removed
      // before its transition started. Since it is already
      // destroyed, we can just leave it in detached state.
      return;
    }
    var staggerAmount = this.getStagger(frag, index, total, 'leave');
    if (inDocument && staggerAmount) {
      var op = frag.staggerCb = cancellable(function () {
        frag.staggerCb = null;
        frag.remove();
      });
      setTimeout(op, staggerAmount);
    } else {
      frag.remove();
    }
  },

  /**
   * Move a fragment to a new position.
   * Force no transition.
   *
   * @param {Fragment} frag
   * @param {Node} prevEl
   */

  move: function move(frag, prevEl) {
    // fix a common issue with Sortable:
    // if prevEl doesn't have nextSibling, this means it's
    // been dragged after the end anchor. Just re-position
    // the end anchor to the end of the container.
    /* istanbul ignore if */
    if (!prevEl.nextSibling) {
      this.end.parentNode.appendChild(this.end);
    }
    frag.before(prevEl.nextSibling, false);
  },

  /**
   * Cache a fragment using track-by or the object key.
   *
   * @param {*} value
   * @param {Fragment} frag
   * @param {Number} index
   * @param {String} [key]
   */

  cacheFrag: function cacheFrag(value, frag, index, key) {
    var trackByKey = this.params.trackBy;
    var cache = this.cache;
    var primitive = !isObject(value);
    var id;
    if (key || trackByKey || primitive) {
      id = getTrackByKey(index, key, value, trackByKey);
      if (!cache[id]) {
        cache[id] = frag;
      } else if (trackByKey !== '$index') {
        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
      }
    } else {
      id = this.id;
      if (hasOwn(value, id)) {
        if (value[id] === null) {
          value[id] = frag;
        } else {
          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
        }
      } else if (Object.isExtensible(value)) {
        def(value, id, frag);
      } else if (process.env.NODE_ENV !== 'production') {
        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');
      }
    }
    frag.raw = value;
  },

  /**
   * Get a cached fragment from the value/index/key
   *
   * @param {*} value
   * @param {Number} index
   * @param {String} key
   * @return {Fragment}
   */

  getCachedFrag: function getCachedFrag(value, index, key) {
    var trackByKey = this.params.trackBy;
    var primitive = !isObject(value);
    var frag;
    if (key || trackByKey || primitive) {
      var id = getTrackByKey(index, key, value, trackByKey);
      frag = this.cache[id];
    } else {
      frag = value[this.id];
    }
    if (frag && (frag.reused || frag.fresh)) {
      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
    }
    return frag;
  },

  /**
   * Delete a fragment from cache.
   *
   * @param {Fragment} frag
   */

  deleteCachedFrag: function deleteCachedFrag(frag) {
    var value = frag.raw;
    var trackByKey = this.params.trackBy;
    var scope = frag.scope;
    var index = scope.$index;
    // fix #948: avoid accidentally fall through to
    // a parent repeater which happens to have $key.
    var key = hasOwn(scope, '$key') && scope.$key;
    var primitive = !isObject(value);
    if (trackByKey || key || primitive) {
      var id = getTrackByKey(index, key, value, trackByKey);
      this.cache[id] = null;
    } else {
      value[this.id] = null;
      frag.raw = null;
    }
  },

  /**
   * Get the stagger amount for an insertion/removal.
   *
   * @param {Fragment} frag
   * @param {Number} index
   * @param {Number} total
   * @param {String} type
   */

  getStagger: function getStagger(frag, index, total, type) {
    type = type + 'Stagger';
    var trans = frag.node.__v_trans;
    var hooks = trans && trans.hooks;
    var hook = hooks && (hooks[type] || hooks.stagger);
    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);
  },

  /**
   * Pre-process the value before piping it through the
   * filters. This is passed to and called by the watcher.
   */

  _preProcess: function _preProcess(value) {
    // regardless of type, store the un-filtered raw value.
    this.rawValue = value;
    return value;
  },

  /**
   * Post-process the value after it has been piped through
   * the filters. This is passed to and called by the watcher.
   *
   * It is necessary for this to be called during the
   * watcher's dependency collection phase because we want
   * the v-for to update when the source Object is mutated.
   */

  _postProcess: function _postProcess(value) {
    if (isArray(value)) {
      return value;
    } else if (isPlainObject(value)) {
      // convert plain object to array.
      var keys = Object.keys(value);
      var i = keys.length;
      var res = new Array(i);
      var key;
      while (i--) {
        key = keys[i];
        res[i] = {
          $key: key,
          $value: value[key]
        };
      }
      return res;
    } else {
      if (typeof value === 'number' && !isNaN(value)) {
        value = range(value);
      }
      return value || [];
    }
  },

  unbind: function unbind() {
    if (this.descriptor.ref) {
      (this._scope || this.vm).$refs[this.descriptor.ref] = null;
    }
    if (this.frags) {
      var i = this.frags.length;
      var frag;
      while (i--) {
        frag = this.frags[i];
        this.deleteCachedFrag(frag);
        frag.destroy();
      }
    }
  }
};

/**
 * Helper to find the previous element that is a fragment
 * anchor. This is necessary because a destroyed frag's
 * element could still be lingering in the DOM before its
 * leaving transition finishes, but its inserted flag
 * should have been set to false so we can skip them.
 *
 * If this is a block repeat, we want to make sure we only
 * return frag that is bound to this v-for. (see #929)
 *
 * @param {Fragment} frag
 * @param {Comment|Text} anchor
 * @param {String} id
 * @return {Fragment}
 */

function findPrevFrag(frag, anchor, id) {
  var el = frag.node.previousSibling;
  /* istanbul ignore if */
  if (!el) return;
  frag = el.__v_frag;
  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {
    el = el.previousSibling;
    /* istanbul ignore if */
    if (!el) return;
    frag = el.__v_frag;
  }
  return frag;
}

/**
 * Find a vm from a fragment.
 *
 * @param {Fragment} frag
 * @return {Vue|undefined}
 */

function findVmFromFrag(frag) {
  var node = frag.node;
  // handle multi-node frag
  if (frag.end) {
    while (!node.__vue__ && node !== frag.end && node.nextSibling) {
      node = node.nextSibling;
    }
  }
  return node.__vue__;
}

/**
 * Create a range array from given number.
 *
 * @param {Number} n
 * @return {Array}
 */

function range(n) {
  var i = -1;
  var ret = new Array(Math.floor(n));
  while (++i < n) {
    ret[i] = i;
  }
  return ret;
}

/**
 * Get the track by key for an item.
 *
 * @param {Number} index
 * @param {String} key
 * @param {*} value
 * @param {String} [trackByKey]
 */

function getTrackByKey(index, key, value, trackByKey) {
  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;
}

if (process.env.NODE_ENV !== 'production') {
  vFor.warnDuplicate = function (value) {
    warn('Duplicate value found in v-for="' + this.descriptor.raw + '": ' + JSON.stringify(value) + '. Use track-by="$index" if ' + 'you are expecting duplicate values.', this.vm);
  };
}

var vIf = {

  priority: IF,
  terminal: true,

  bind: function bind() {
    var el = this.el;
    if (!el.__vue__) {
      // check else block
      var next = el.nextElementSibling;
      if (next && getAttr(next, 'v-else') !== null) {
        remove(next);
        this.elseEl = next;
      }
      // check main block
      this.anchor = createAnchor('v-if');
      replace(el, this.anchor);
    } else {
      process.env.NODE_ENV !== 'production' && warn('v-if="' + this.expression + '" cannot be ' + 'used on an instance root element.', this.vm);
      this.invalid = true;
    }
  },

  update: function update(value) {
    if (this.invalid) return;
    if (value) {
      if (!this.frag) {
        this.insert();
      }
    } else {
      this.remove();
    }
  },

  insert: function insert() {
    if (this.elseFrag) {
      this.elseFrag.remove();
      this.elseFrag = null;
    }
    // lazy init factory
    if (!this.factory) {
      this.factory = new FragmentFactory(this.vm, this.el);
    }
    this.frag = this.factory.create(this._host, this._scope, this._frag);
    this.frag.before(this.anchor);
  },

  remove: function remove() {
    if (this.frag) {
      this.frag.remove();
      this.frag = null;
    }
    if (this.elseEl && !this.elseFrag) {
      if (!this.elseFactory) {
        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);
      }
      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);
      this.elseFrag.before(this.anchor);
    }
  },

  unbind: function unbind() {
    if (this.frag) {
      this.frag.destroy();
    }
    if (this.elseFrag) {
      this.elseFrag.destroy();
    }
  }
};

var show = {

  bind: function bind() {
    // check else block
    var next = this.el.nextElementSibling;
    if (next && getAttr(next, 'v-else') !== null) {
      this.elseEl = next;
    }
  },

  update: function update(value) {
    this.apply(this.el, value);
    if (this.elseEl) {
      this.apply(this.elseEl, !value);
    }
  },

  apply: function apply(el, value) {
    if (inDoc(el)) {
      applyTransition(el, value ? 1 : -1, toggle, this.vm);
    } else {
      toggle();
    }
    function toggle() {
      el.style.display = value ? '' : 'none';
    }
  }
};

var text$2 = {

  bind: function bind() {
    var self = this;
    var el = this.el;
    var isRange = el.type === 'range';
    var lazy = this.params.lazy;
    var number = this.params.number;
    var debounce = this.params.debounce;

    // handle composition events.
    //   http://blog.evanyou.me/2014/01/03/composition-event/
    // skip this for Android because it handles composition
    // events quite differently. Android doesn't trigger
    // composition events for language input methods e.g.
    // Chinese, but instead triggers them for spelling
    // suggestions... (see Discussion/#162)
    var composing = false;
    if (!isAndroid && !isRange) {
      this.on('compositionstart', function () {
        composing = true;
      });
      this.on('compositionend', function () {
        composing = false;
        // in IE11 the "compositionend" event fires AFTER
        // the "input" event, so the input handler is blocked
        // at the end... have to call it here.
        //
        // #1327: in lazy mode this is unecessary.
        if (!lazy) {
          self.listener();
        }
      });
    }

    // prevent messing with the input when user is typing,
    // and force update on blur.
    this.focused = false;
    if (!isRange && !lazy) {
      this.on('focus', function () {
        self.focused = true;
      });
      this.on('blur', function () {
        self.focused = false;
        // do not sync value after fragment removal (#2017)
        if (!self._frag || self._frag.inserted) {
          self.rawListener();
        }
      });
    }

    // Now attach the main listener
    this.listener = this.rawListener = function () {
      if (composing || !self._bound) {
        return;
      }
      var val = number || isRange ? toNumber(el.value) : el.value;
      self.set(val);
      // force update on next tick to avoid lock & same value
      // also only update when user is not typing
      nextTick(function () {
        if (self._bound && !self.focused) {
          self.update(self._watcher.value);
        }
      });
    };

    // apply debounce
    if (debounce) {
      this.listener = _debounce(this.listener, debounce);
    }

    // Support jQuery events, since jQuery.trigger() doesn't
    // trigger native events in some cases and some plugins
    // rely on $.trigger()
    //
    // We want to make sure if a listener is attached using
    // jQuery, it is also removed with jQuery, that's why
    // we do the check for each directive instance and
    // store that check result on itself. This also allows
    // easier test coverage control by unsetting the global
    // jQuery variable in tests.
    this.hasjQuery = typeof jQuery === 'function';
    if (this.hasjQuery) {
      var method = jQuery.fn.on ? 'on' : 'bind';
      jQuery(el)[method]('change', this.rawListener);
      if (!lazy) {
        jQuery(el)[method]('input', this.listener);
      }
    } else {
      this.on('change', this.rawListener);
      if (!lazy) {
        this.on('input', this.listener);
      }
    }

    // IE9 doesn't fire input event on backspace/del/cut
    if (!lazy && isIE9) {
      this.on('cut', function () {
        nextTick(self.listener);
      });
      this.on('keyup', function (e) {
        if (e.keyCode === 46 || e.keyCode === 8) {
          self.listener();
        }
      });
    }

    // set initial value if present
    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {
      this.afterBind = this.listener;
    }
  },

  update: function update(value) {
    // #3029 only update when the value changes. This prevent
    // browsers from overwriting values like selectionStart
    value = _toString(value);
    if (value !== this.el.value) this.el.value = value;
  },

  unbind: function unbind() {
    var el = this.el;
    if (this.hasjQuery) {
      var method = jQuery.fn.off ? 'off' : 'unbind';
      jQuery(el)[method]('change', this.listener);
      jQuery(el)[method]('input', this.listener);
    }
  }
};

var radio = {

  bind: function bind() {
    var self = this;
    var el = this.el;

    this.getValue = function () {
      // value overwrite via v-bind:value
      if (el.hasOwnProperty('_value')) {
        return el._value;
      }
      var val = el.value;
      if (self.params.number) {
        val = toNumber(val);
      }
      return val;
    };

    this.listener = function () {
      self.set(self.getValue());
    };
    this.on('change', this.listener);

    if (el.hasAttribute('checked')) {
      this.afterBind = this.listener;
    }
  },

  update: function update(value) {
    this.el.checked = looseEqual(value, this.getValue());
  }
};

var select = {

  bind: function bind() {
    var _this = this;

    var self = this;
    var el = this.el;

    // method to force update DOM using latest value.
    this.forceUpdate = function () {
      if (self._watcher) {
        self.update(self._watcher.get());
      }
    };

    // check if this is a multiple select
    var multiple = this.multiple = el.hasAttribute('multiple');

    // attach listener
    this.listener = function () {
      var value = getValue(el, multiple);
      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;
      self.set(value);
    };
    this.on('change', this.listener);

    // if has initial value, set afterBind
    var initValue = getValue(el, multiple, true);
    if (multiple && initValue.length || !multiple && initValue !== null) {
      this.afterBind = this.listener;
    }

    // All major browsers except Firefox resets
    // selectedIndex with value -1 to 0 when the element
    // is appended to a new parent, therefore we have to
    // force a DOM update whenever that happens...
    this.vm.$on('hook:attached', function () {
      nextTick(_this.forceUpdate);
    });
    if (!inDoc(el)) {
      nextTick(this.forceUpdate);
    }
  },

  update: function update(value) {
    var el = this.el;
    el.selectedIndex = -1;
    var multi = this.multiple && isArray(value);
    var options = el.options;
    var i = options.length;
    var op, val;
    while (i--) {
      op = options[i];
      val = op.hasOwnProperty('_value') ? op._value : op.value;
      /* eslint-disable eqeqeq */
      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);
      /* eslint-enable eqeqeq */
    }
  },

  unbind: function unbind() {
    /* istanbul ignore next */
    this.vm.$off('hook:attached', this.forceUpdate);
  }
};

/**
 * Get select value
 *
 * @param {SelectElement} el
 * @param {Boolean} multi
 * @param {Boolean} init
 * @return {Array|*}
 */

function getValue(el, multi, init) {
  var res = multi ? [] : null;
  var op, val, selected;
  for (var i = 0, l = el.options.length; i < l; i++) {
    op = el.options[i];
    selected = init ? op.hasAttribute('selected') : op.selected;
    if (selected) {
      val = op.hasOwnProperty('_value') ? op._value : op.value;
      if (multi) {
        res.push(val);
      } else {
        return val;
      }
    }
  }
  return res;
}

/**
 * Native Array.indexOf uses strict equal, but in this
 * case we need to match string/numbers with custom equal.
 *
 * @param {Array} arr
 * @param {*} val
 */

function indexOf$1(arr, val) {
  var i = arr.length;
  while (i--) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }
  return -1;
}

var checkbox = {

  bind: function bind() {
    var self = this;
    var el = this.el;

    this.getValue = function () {
      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;
    };

    function getBooleanValue() {
      var val = el.checked;
      if (val && el.hasOwnProperty('_trueValue')) {
        return el._trueValue;
      }
      if (!val && el.hasOwnProperty('_falseValue')) {
        return el._falseValue;
      }
      return val;
    }

    this.listener = function () {
      var model = self._watcher.value;
      if (isArray(model)) {
        var val = self.getValue();
        if (el.checked) {
          if (indexOf(model, val) < 0) {
            model.push(val);
          }
        } else {
          model.$remove(val);
        }
      } else {
        self.set(getBooleanValue());
      }
    };

    this.on('change', this.listener);
    if (el.hasAttribute('checked')) {
      this.afterBind = this.listener;
    }
  },

  update: function update(value) {
    var el = this.el;
    if (isArray(value)) {
      el.checked = indexOf(value, this.getValue()) > -1;
    } else {
      if (el.hasOwnProperty('_trueValue')) {
        el.checked = looseEqual(value, el._trueValue);
      } else {
        el.checked = !!value;
      }
    }
  }
};

var handlers = {
  text: text$2,
  radio: radio,
  select: select,
  checkbox: checkbox
};

var model = {

  priority: MODEL,
  twoWay: true,
  handlers: handlers,
  params: ['lazy', 'number', 'debounce'],

  /**
   * Possible elements:
   *   <select>
   *   <textarea>
   *   <input type="*">
   *     - text
   *     - checkbox
   *     - radio
   *     - number
   */

  bind: function bind() {
    // friendly warning...
    this.checkFilters();
    if (this.hasRead && !this.hasWrite) {
      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model="' + this.descriptor.raw + '". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);
    }
    var el = this.el;
    var tag = el.tagName;
    var handler;
    if (tag === 'INPUT') {
      handler = handlers[el.type] || handlers.text;
    } else if (tag === 'SELECT') {
      handler = handlers.select;
    } else if (tag === 'TEXTAREA') {
      handler = handlers.text;
    } else {
      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);
      return;
    }
    el.__v_model = this;
    handler.bind.call(this);
    this.update = handler.update;
    this._unbind = handler.unbind;
  },

  /**
   * Check read/write filter stats.
   */

  checkFilters: function checkFilters() {
    var filters = this.filters;
    if (!filters) return;
    var i = filters.length;
    while (i--) {
      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);
      if (typeof filter === 'function' || filter.read) {
        this.hasRead = true;
      }
      if (filter.write) {
        this.hasWrite = true;
      }
    }
  },

  unbind: function unbind() {
    this.el.__v_model = null;
    this._unbind && this._unbind();
  }
};

// keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  'delete': [8, 46],
  up: 38,
  left: 37,
  right: 39,
  down: 40
};

function keyFilter(handler, keys) {
  var codes = keys.map(function (key) {
    var charCode = key.charCodeAt(0);
    if (charCode > 47 && charCode < 58) {
      return parseInt(key, 10);
    }
    if (key.length === 1) {
      charCode = key.toUpperCase().charCodeAt(0);
      if (charCode > 64 && charCode < 91) {
        return charCode;
      }
    }
    return keyCodes[key];
  });
  codes = [].concat.apply([], codes);
  return function keyHandler(e) {
    if (codes.indexOf(e.keyCode) > -1) {
      return handler.call(this, e);
    }
  };
}

function stopFilter(handler) {
  return function stopHandler(e) {
    e.stopPropagation();
    return handler.call(this, e);
  };
}

function preventFilter(handler) {
  return function preventHandler(e) {
    e.preventDefault();
    return handler.call(this, e);
  };
}

function selfFilter(handler) {
  return function selfHandler(e) {
    if (e.target === e.currentTarget) {
      return handler.call(this, e);
    }
  };
}

var on$1 = {

  priority: ON,
  acceptStatement: true,
  keyCodes: keyCodes,

  bind: function bind() {
    // deal with iframes
    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {
      var self = this;
      this.iframeBind = function () {
        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);
      };
      this.on('load', this.iframeBind);
    }
  },

  update: function update(handler) {
    // stub a noop for v-on with no value,
    // e.g. @mousedown.prevent
    if (!this.descriptor.raw) {
      handler = function () {};
    }

    if (typeof handler !== 'function') {
      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '="' + this.expression + '" expects a function value, ' + 'got ' + handler, this.vm);
      return;
    }

    // apply modifiers
    if (this.modifiers.stop) {
      handler = stopFilter(handler);
    }
    if (this.modifiers.prevent) {
      handler = preventFilter(handler);
    }
    if (this.modifiers.self) {
      handler = selfFilter(handler);
    }
    // key filter
    var keys = Object.keys(this.modifiers).filter(function (key) {
      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';
    });
    if (keys.length) {
      handler = keyFilter(handler, keys);
    }

    this.reset();
    this.handler = handler;

    if (this.iframeBind) {
      this.iframeBind();
    } else {
      on(this.el, this.arg, this.handler, this.modifiers.capture);
    }
  },

  reset: function reset() {
    var el = this.iframeBind ? this.el.contentWindow : this.el;
    if (this.handler) {
      off(el, this.arg, this.handler);
    }
  },

  unbind: function unbind() {
    this.reset();
  }
};

var prefixes = ['-webkit-', '-moz-', '-ms-'];
var camelPrefixes = ['Webkit', 'Moz', 'ms'];
var importantRE = /!important;?$/;
var propCache = Object.create(null);

var testEl = null;

var style = {

  deep: true,

  update: function update(value) {
    if (typeof value === 'string') {
      this.el.style.cssText = value;
    } else if (isArray(value)) {
      this.handleObject(value.reduce(extend, {}));
    } else {
      this.handleObject(value || {});
    }
  },

  handleObject: function handleObject(value) {
    // cache object styles so that only changed props
    // are actually updated.
    var cache = this.cache || (this.cache = {});
    var name, val;
    for (name in cache) {
      if (!(name in value)) {
        this.handleSingle(name, null);
        delete cache[name];
      }
    }
    for (name in value) {
      val = value[name];
      if (val !== cache[name]) {
        cache[name] = val;
        this.handleSingle(name, val);
      }
    }
  },

  handleSingle: function handleSingle(prop, value) {
    prop = normalize(prop);
    if (!prop) return; // unsupported prop
    // cast possible numbers/booleans into strings
    if (value != null) value += '';
    if (value) {
      var isImportant = importantRE.test(value) ? 'important' : '';
      if (isImportant) {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production') {
          warn('It\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');
        }
        value = value.replace(importantRE, '').trim();
        this.el.style.setProperty(prop.kebab, value, isImportant);
      } else {
        this.el.style[prop.camel] = value;
      }
    } else {
      this.el.style[prop.camel] = '';
    }
  }

};

/**
 * Normalize a CSS property name.
 * - cache result
 * - auto prefix
 * - camelCase -> dash-case
 *
 * @param {String} prop
 * @return {String}
 */

function normalize(prop) {
  if (propCache[prop]) {
    return propCache[prop];
  }
  var res = prefix(prop);
  propCache[prop] = propCache[res] = res;
  return res;
}

/**
 * Auto detect the appropriate prefix for a CSS property.
 * https://gist.github.com/paulirish/523692
 *
 * @param {String} prop
 * @return {String}
 */

function prefix(prop) {
  prop = hyphenate(prop);
  var camel = camelize(prop);
  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);
  if (!testEl) {
    testEl = document.createElement('div');
  }
  var i = prefixes.length;
  var prefixed;
  if (camel !== 'filter' && camel in testEl.style) {
    return {
      kebab: prop,
      camel: camel
    };
  }
  while (i--) {
    prefixed = camelPrefixes[i] + upper;
    if (prefixed in testEl.style) {
      return {
        kebab: prefixes[i] + prop,
        camel: prefixed
      };
    }
  }
}

// xlink
var xlinkNS = 'http://www.w3.org/1999/xlink';
var xlinkRE = /^xlink:/;

// check for attributes that prohibit interpolations
var disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;
// these attributes should also set their corresponding properties
// because they only affect the initial state of the element
var attrWithPropsRE = /^(?:value|checked|selected|muted)$/;
// these attributes expect enumrated values of "true" or "false"
// but are not boolean attributes
var enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;

// these attributes should set a hidden property for
// binding v-model to object values
var modelProps = {
  value: '_value',
  'true-value': '_trueValue',
  'false-value': '_falseValue'
};

var bind$1 = {

  priority: BIND,

  bind: function bind() {
    var attr = this.arg;
    var tag = this.el.tagName;
    // should be deep watch on object mode
    if (!attr) {
      this.deep = true;
    }
    // handle interpolation bindings
    var descriptor = this.descriptor;
    var tokens = descriptor.interp;
    if (tokens) {
      // handle interpolations with one-time tokens
      if (descriptor.hasOneTime) {
        this.expression = tokensToExp(tokens, this._scope || this.vm);
      }

      // only allow binding on native attributes
      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {
        process.env.NODE_ENV !== 'production' && warn(attr + '="' + descriptor.raw + '": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);
        this.el.removeAttribute(attr);
        this.invalid = true;
      }

      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production') {
        var raw = attr + '="' + descriptor.raw + '": ';
        // warn src
        if (attr === 'src') {
          warn(raw + 'interpolation in "src" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);
        }

        // warn style
        if (attr === 'style') {
          warn(raw + 'interpolation in "style" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);
        }
      }
    }
  },

  update: function update(value) {
    if (this.invalid) {
      return;
    }
    var attr = this.arg;
    if (this.arg) {
      this.handleSingle(attr, value);
    } else {
      this.handleObject(value || {});
    }
  },

  // share object handler with v-bind:class
  handleObject: style.handleObject,

  handleSingle: function handleSingle(attr, value) {
    var el = this.el;
    var interp = this.descriptor.interp;
    if (this.modifiers.camel) {
      attr = camelize(attr);
    }
    if (!interp && attrWithPropsRE.test(attr) && attr in el) {
      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to "null" for null...
      ? '' : value : value;

      if (el[attr] !== attrValue) {
        el[attr] = attrValue;
      }
    }
    // set model props
    var modelProp = modelProps[attr];
    if (!interp && modelProp) {
      el[modelProp] = value;
      // update v-model if present
      var model = el.__v_model;
      if (model) {
        model.listener();
      }
    }
    // do not set value attribute for textarea
    if (attr === 'value' && el.tagName === 'TEXTAREA') {
      el.removeAttribute(attr);
      return;
    }
    // update attribute
    if (enumeratedAttrRE.test(attr)) {
      el.setAttribute(attr, value ? 'true' : 'false');
    } else if (value != null && value !== false) {
      if (attr === 'class') {
        // handle edge case #1960:
        // class interpolation should not overwrite Vue transition class
        if (el.__v_trans) {
          value += ' ' + el.__v_trans.id + '-transition';
        }
        setClass(el, value);
      } else if (xlinkRE.test(attr)) {
        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);
      } else {
        el.setAttribute(attr, value === true ? '' : value);
      }
    } else {
      el.removeAttribute(attr);
    }
  }
};

var el = {

  priority: EL,

  bind: function bind() {
    /* istanbul ignore if */
    if (!this.arg) {
      return;
    }
    var id = this.id = camelize(this.arg);
    var refs = (this._scope || this.vm).$els;
    if (hasOwn(refs, id)) {
      refs[id] = this.el;
    } else {
      defineReactive(refs, id, this.el);
    }
  },

  unbind: function unbind() {
    var refs = (this._scope || this.vm).$els;
    if (refs[this.id] === this.el) {
      refs[this.id] = null;
    }
  }
};

var ref = {
  bind: function bind() {
    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);
  }
};

var cloak = {
  bind: function bind() {
    var el = this.el;
    this.vm.$once('pre-hook:compiled', function () {
      el.removeAttribute('v-cloak');
    });
  }
};

// must export plain object
var directives = {
  text: text$1,
  html: html,
  'for': vFor,
  'if': vIf,
  show: show,
  model: model,
  on: on$1,
  bind: bind$1,
  el: el,
  ref: ref,
  cloak: cloak
};

var vClass = {

  deep: true,

  update: function update(value) {
    if (!value) {
      this.cleanup();
    } else if (typeof value === 'string') {
      this.setClass(value.trim().split(/\s+/));
    } else {
      this.setClass(normalize$1(value));
    }
  },

  setClass: function setClass(value) {
    this.cleanup(value);
    for (var i = 0, l = value.length; i < l; i++) {
      var val = value[i];
      if (val) {
        apply(this.el, val, addClass);
      }
    }
    this.prevKeys = value;
  },

  cleanup: function cleanup(value) {
    var prevKeys = this.prevKeys;
    if (!prevKeys) return;
    var i = prevKeys.length;
    while (i--) {
      var key = prevKeys[i];
      if (!value || value.indexOf(key) < 0) {
        apply(this.el, key, removeClass);
      }
    }
  }
};

/**
 * Normalize objects and arrays (potentially containing objects)
 * into array of strings.
 *
 * @param {Object|Array<String|Object>} value
 * @return {Array<String>}
 */

function normalize$1(value) {
  var res = [];
  if (isArray(value)) {
    for (var i = 0, l = value.length; i < l; i++) {
      var _key = value[i];
      if (_key) {
        if (typeof _key === 'string') {
          res.push(_key);
        } else {
          for (var k in _key) {
            if (_key[k]) res.push(k);
          }
        }
      }
    }
  } else if (isObject(value)) {
    for (var key in value) {
      if (value[key]) res.push(key);
    }
  }
  return res;
}

/**
 * Add or remove a class/classes on an element
 *
 * @param {Element} el
 * @param {String} key The class name. This may or may not
 *                     contain a space character, in such a
 *                     case we'll deal with multiple class
 *                     names at once.
 * @param {Function} fn
 */

function apply(el, key, fn) {
  key = key.trim();
  if (key.indexOf(' ') === -1) {
    fn(el, key);
    return;
  }
  // The key contains one or more space characters.
  // Since a class name doesn't accept such characters, we
  // treat it as multiple classes.
  var keys = key.split(/\s+/);
  for (var i = 0, l = keys.length; i < l; i++) {
    fn(el, keys[i]);
  }
}

var component = {

  priority: COMPONENT,

  params: ['keep-alive', 'transition-mode', 'inline-template'],

  /**
   * Setup. Two possible usages:
   *
   * - static:
   *   <comp> or <div v-component="comp">
   *
   * - dynamic:
   *   <component :is="view">
   */

  bind: function bind() {
    if (!this.el.__vue__) {
      // keep-alive cache
      this.keepAlive = this.params.keepAlive;
      if (this.keepAlive) {
        this.cache = {};
      }
      // check inline-template
      if (this.params.inlineTemplate) {
        // extract inline template as a DocumentFragment
        this.inlineTemplate = extractContent(this.el, true);
      }
      // component resolution related state
      this.pendingComponentCb = this.Component = null;
      // transition related state
      this.pendingRemovals = 0;
      this.pendingRemovalCb = null;
      // create a ref anchor
      this.anchor = createAnchor('v-component');
      replace(this.el, this.anchor);
      // remove is attribute.
      // this is removed during compilation, but because compilation is
      // cached, when the component is used elsewhere this attribute
      // will remain at link time.
      this.el.removeAttribute('is');
      this.el.removeAttribute(':is');
      // remove ref, same as above
      if (this.descriptor.ref) {
        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));
      }
      // if static, build right now.
      if (this.literal) {
        this.setComponent(this.expression);
      }
    } else {
      process.env.NODE_ENV !== 'production' && warn('cannot mount component "' + this.expression + '" ' + 'on already mounted element: ' + this.el);
    }
  },

  /**
   * Public update, called by the watcher in the dynamic
   * literal scenario, e.g. <component :is="view">
   */

  update: function update(value) {
    if (!this.literal) {
      this.setComponent(value);
    }
  },

  /**
   * Switch dynamic components. May resolve the component
   * asynchronously, and perform transition based on
   * specified transition mode. Accepts a few additional
   * arguments specifically for vue-router.
   *
   * The callback is called when the full transition is
   * finished.
   *
   * @param {String} value
   * @param {Function} [cb]
   */

  setComponent: function setComponent(value, cb) {
    this.invalidatePending();
    if (!value) {
      // just remove current
      this.unbuild(true);
      this.remove(this.childVM, cb);
      this.childVM = null;
    } else {
      var self = this;
      this.resolveComponent(value, function () {
        self.mountComponent(cb);
      });
    }
  },

  /**
   * Resolve the component constructor to use when creating
   * the child vm.
   *
   * @param {String|Function} value
   * @param {Function} cb
   */

  resolveComponent: function resolveComponent(value, cb) {
    var self = this;
    this.pendingComponentCb = cancellable(function (Component) {
      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);
      self.Component = Component;
      cb();
    });
    this.vm._resolveComponent(value, this.pendingComponentCb);
  },

  /**
   * Create a new instance using the current constructor and
   * replace the existing instance. This method doesn't care
   * whether the new component and the old one are actually
   * the same.
   *
   * @param {Function} [cb]
   */

  mountComponent: function mountComponent(cb) {
    // actual mount
    this.unbuild(true);
    var self = this;
    var activateHooks = this.Component.options.activate;
    var cached = this.getCached();
    var newComponent = this.build();
    if (activateHooks && !cached) {
      this.waitingFor = newComponent;
      callActivateHooks(activateHooks, newComponent, function () {
        if (self.waitingFor !== newComponent) {
          return;
        }
        self.waitingFor = null;
        self.transition(newComponent, cb);
      });
    } else {
      // update ref for kept-alive component
      if (cached) {
        newComponent._updateRef();
      }
      this.transition(newComponent, cb);
    }
  },

  /**
   * When the component changes or unbinds before an async
   * constructor is resolved, we need to invalidate its
   * pending callback.
   */

  invalidatePending: function invalidatePending() {
    if (this.pendingComponentCb) {
      this.pendingComponentCb.cancel();
      this.pendingComponentCb = null;
    }
  },

  /**
   * Instantiate/insert a new child vm.
   * If keep alive and has cached instance, insert that
   * instance; otherwise build a new one and cache it.
   *
   * @param {Object} [extraOptions]
   * @return {Vue} - the created instance
   */

  build: function build(extraOptions) {
    var cached = this.getCached();
    if (cached) {
      return cached;
    }
    if (this.Component) {
      // default options
      var options = {
        name: this.ComponentName,
        el: cloneNode(this.el),
        template: this.inlineTemplate,
        // make sure to add the child with correct parent
        // if this is a transcluded component, its parent
        // should be the transclusion host.
        parent: this._host || this.vm,
        // if no inline-template, then the compiled
        // linker can be cached for better performance.
        _linkerCachable: !this.inlineTemplate,
        _ref: this.descriptor.ref,
        _asComponent: true,
        _isRouterView: this._isRouterView,
        // if this is a transcluded component, context
        // will be the common parent vm of this instance
        // and its host.
        _context: this.vm,
        // if this is inside an inline v-for, the scope
        // will be the intermediate scope created for this
        // repeat fragment. this is used for linking props
        // and container directives.
        _scope: this._scope,
        // pass in the owner fragment of this component.
        // this is necessary so that the fragment can keep
        // track of its contained components in order to
        // call attach/detach hooks for them.
        _frag: this._frag
      };
      // extra options
      // in 1.0.0 this is used by vue-router only
      /* istanbul ignore if */
      if (extraOptions) {
        extend(options, extraOptions);
      }
      var child = new this.Component(options);
      if (this.keepAlive) {
        this.cache[this.Component.cid] = child;
      }
      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {
        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);
      }
      return child;
    }
  },

  /**
   * Try to get a cached instance of the current component.
   *
   * @return {Vue|undefined}
   */

  getCached: function getCached() {
    return this.keepAlive && this.cache[this.Component.cid];
  },

  /**
   * Teardown the current child, but defers cleanup so
   * that we can separate the destroy and removal steps.
   *
   * @param {Boolean} defer
   */

  unbuild: function unbuild(defer) {
    if (this.waitingFor) {
      if (!this.keepAlive) {
        this.waitingFor.$destroy();
      }
      this.waitingFor = null;
    }
    var child = this.childVM;
    if (!child || this.keepAlive) {
      if (child) {
        // remove ref
        child._inactive = true;
        child._updateRef(true);
      }
      return;
    }
    // the sole purpose of `deferCleanup` is so that we can
    // "deactivate" the vm right now and perform DOM removal
    // later.
    child.$destroy(false, defer);
  },

  /**
   * Remove current destroyed child and manually do
   * the cleanup after removal.
   *
   * @param {Function} cb
   */

  remove: function remove(child, cb) {
    var keepAlive = this.keepAlive;
    if (child) {
      // we may have a component switch when a previous
      // component is still being transitioned out.
      // we want to trigger only one lastest insertion cb
      // when the existing transition finishes. (#1119)
      this.pendingRemovals++;
      this.pendingRemovalCb = cb;
      var self = this;
      child.$remove(function () {
        self.pendingRemovals--;
        if (!keepAlive) child._cleanup();
        if (!self.pendingRemovals && self.pendingRemovalCb) {
          self.pendingRemovalCb();
          self.pendingRemovalCb = null;
        }
      });
    } else if (cb) {
      cb();
    }
  },

  /**
   * Actually swap the components, depending on the
   * transition mode. Defaults to simultaneous.
   *
   * @param {Vue} target
   * @param {Function} [cb]
   */

  transition: function transition(target, cb) {
    var self = this;
    var current = this.childVM;
    // for devtool inspection
    if (current) current._inactive = true;
    target._inactive = false;
    this.childVM = target;
    switch (self.params.transitionMode) {
      case 'in-out':
        target.$before(self.anchor, function () {
          self.remove(current, cb);
        });
        break;
      case 'out-in':
        self.remove(current, function () {
          target.$before(self.anchor, cb);
        });
        break;
      default:
        self.remove(current);
        target.$before(self.anchor, cb);
    }
  },

  /**
   * Unbind.
   */

  unbind: function unbind() {
    this.invalidatePending();
    // Do not defer cleanup when unbinding
    this.unbuild();
    // destroy all keep-alive cached instances
    if (this.cache) {
      for (var key in this.cache) {
        this.cache[key].$destroy();
      }
      this.cache = null;
    }
  }
};

/**
 * Call activate hooks in order (asynchronous)
 *
 * @param {Array} hooks
 * @param {Vue} vm
 * @param {Function} cb
 */

function callActivateHooks(hooks, vm, cb) {
  var total = hooks.length;
  var called = 0;
  hooks[0].call(vm, next);
  function next() {
    if (++called >= total) {
      cb();
    } else {
      hooks[called].call(vm, next);
    }
  }
}

var propBindingModes = config._propBindingModes;
var empty = {};

// regexes
var identRE$1 = /^[$_a-zA-Z]+[\w$]*$/;
var settablePathRE = /^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/;

/**
 * Compile props on a root element and return
 * a props link function.
 *
 * @param {Element|DocumentFragment} el
 * @param {Array} propOptions
 * @param {Vue} vm
 * @return {Function} propsLinkFn
 */

function compileProps(el, propOptions, vm) {
  var props = [];
  var names = Object.keys(propOptions);
  var i = names.length;
  var options, name, attr, value, path, parsed, prop;
  while (i--) {
    name = names[i];
    options = propOptions[name] || empty;

    if (process.env.NODE_ENV !== 'production' && name === '$data') {
      warn('Do not use $data as prop.', vm);
      continue;
    }

    // props could contain dashes, which will be
    // interpreted as minus calculations by the parser
    // so we need to camelize the path here
    path = camelize(name);
    if (!identRE$1.test(path)) {
      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: "' + name + '". Prop keys ' + 'must be valid identifiers.', vm);
      continue;
    }

    prop = {
      name: name,
      path: path,
      options: options,
      mode: propBindingModes.ONE_WAY,
      raw: null
    };

    attr = hyphenate(name);
    // first check dynamic version
    if ((value = getBindAttr(el, attr)) === null) {
      if ((value = getBindAttr(el, attr + '.sync')) !== null) {
        prop.mode = propBindingModes.TWO_WAY;
      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {
        prop.mode = propBindingModes.ONE_TIME;
      }
    }
    if (value !== null) {
      // has dynamic binding!
      prop.raw = value;
      parsed = parseDirective(value);
      value = parsed.expression;
      prop.filters = parsed.filters;
      // check binding type
      if (isLiteral(value) && !parsed.filters) {
        // for expressions containing literal numbers and
        // booleans, there's no need to setup a prop binding,
        // so we can optimize them as a one-time set.
        prop.optimizedLiteral = true;
      } else {
        prop.dynamic = true;
        // check non-settable path for two-way bindings
        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {
          prop.mode = propBindingModes.ONE_WAY;
          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);
        }
      }
      prop.parentPath = value;

      // warn required two-way
      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {
        warn('Prop "' + name + '" expects a two-way binding type.', vm);
      }
    } else if ((value = getAttr(el, attr)) !== null) {
      // has literal binding!
      prop.raw = value;
    } else if (process.env.NODE_ENV !== 'production') {
      // check possible camelCase prop usage
      var lowerCaseName = path.toLowerCase();
      value = /[A-Z\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));
      if (value) {
        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);
      } else if (options.required) {
        // warn missing required
        warn('Missing required prop: ' + name, vm);
      }
    }
    // push prop
    props.push(prop);
  }
  return makePropsLinkFn(props);
}

/**
 * Build a function that applies props to a vm.
 *
 * @param {Array} props
 * @return {Function} propsLinkFn
 */

function makePropsLinkFn(props) {
  return function propsLinkFn(vm, scope) {
    // store resolved props info
    vm._props = {};
    var inlineProps = vm.$options.propsData;
    var i = props.length;
    var prop, path, options, value, raw;
    while (i--) {
      prop = props[i];
      raw = prop.raw;
      path = prop.path;
      options = prop.options;
      vm._props[path] = prop;
      if (inlineProps && hasOwn(inlineProps, path)) {
        initProp(vm, prop, inlineProps[path]);
      }if (raw === null) {
        // initialize absent prop
        initProp(vm, prop, undefined);
      } else if (prop.dynamic) {
        // dynamic prop
        if (prop.mode === propBindingModes.ONE_TIME) {
          // one time binding
          value = (scope || vm._context || vm).$get(prop.parentPath);
          initProp(vm, prop, value);
        } else {
          if (vm._context) {
            // dynamic binding
            vm._bindDir({
              name: 'prop',
              def: propDef,
              prop: prop
            }, null, null, scope); // el, host, scope
          } else {
              // root instance
              initProp(vm, prop, vm.$get(prop.parentPath));
            }
        }
      } else if (prop.optimizedLiteral) {
        // optimized literal, cast it and just set once
        var stripped = stripQuotes(raw);
        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;
        initProp(vm, prop, value);
      } else {
        // string literal, but we need to cater for
        // Boolean props with no value, or with same
        // literal value (e.g. disabled="disabled")
        // see https://github.com/vuejs/vue-loader/issues/182
        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;
        initProp(vm, prop, value);
      }
    }
  };
}

/**
 * Process a prop with a rawValue, applying necessary coersions,
 * default values & assertions and call the given callback with
 * processed value.
 *
 * @param {Vue} vm
 * @param {Object} prop
 * @param {*} rawValue
 * @param {Function} fn
 */

function processPropValue(vm, prop, rawValue, fn) {
  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);
  var value = rawValue;
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop);
  }
  value = coerceProp(prop, value, vm);
  var coerced = value !== rawValue;
  if (!assertProp(prop, value, vm)) {
    value = undefined;
  }
  if (isSimple && !coerced) {
    withoutConversion(function () {
      fn(value);
    });
  } else {
    fn(value);
  }
}

/**
 * Set a prop's initial value on a vm and its data object.
 *
 * @param {Vue} vm
 * @param {Object} prop
 * @param {*} value
 */

function initProp(vm, prop, value) {
  processPropValue(vm, prop, value, function (value) {
    defineReactive(vm, prop.path, value);
  });
}

/**
 * Update a prop's value on a vm.
 *
 * @param {Vue} vm
 * @param {Object} prop
 * @param {*} value
 */

function updateProp(vm, prop, value) {
  processPropValue(vm, prop, value, function (value) {
    vm[prop.path] = value;
  });
}

/**
 * Get the default value of a prop.
 *
 * @param {Vue} vm
 * @param {Object} prop
 * @return {*}
 */

function getPropDefaultValue(vm, prop) {
  // no default, return undefined
  var options = prop.options;
  if (!hasOwn(options, 'default')) {
    // absent boolean value defaults to false
    return options.type === Boolean ? false : undefined;
  }
  var def = options['default'];
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop "' + prop.name + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  }
  // call factory function for non-Function types
  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;
}

/**
 * Assert whether a prop is valid.
 *
 * @param {Object} prop
 * @param {*} value
 * @param {Vue} vm
 */

function assertProp(prop, value, vm) {
  if (!prop.options.required && ( // non-required
  prop.raw === null || // abscent
  value == null) // null or undefined
  ) {
      return true;
    }
  var options = prop.options;
  var type = options.type;
  var valid = !type;
  var expectedTypes = [];
  if (type) {
    if (!isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType);
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    if (process.env.NODE_ENV !== 'production') {
      warn('Invalid prop: type check failed for prop "' + prop.name + '".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);
    }
    return false;
  }
  var validator = options.validator;
  if (validator) {
    if (!validator(value)) {
      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop "' + prop.name + '".', vm);
      return false;
    }
  }
  return true;
}

/**
 * Force parsing value with coerce option.
 *
 * @param {*} value
 * @param {Object} options
 * @return {*}
 */

function coerceProp(prop, value, vm) {
  var coerce = prop.options.coerce;
  if (!coerce) {
    return value;
  }
  if (typeof coerce === 'function') {
    return coerce(value);
  } else {
    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop "' + prop.name + '": expected function, got ' + typeof coerce + '.', vm);
    return value;
  }
}

/**
 * Assert the type of a value
 *
 * @param {*} value
 * @param {Function} type
 * @return {Object}
 */

function assertType(value, type) {
  var valid;
  var expectedType;
  if (type === String) {
    expectedType = 'string';
    valid = typeof value === expectedType;
  } else if (type === Number) {
    expectedType = 'number';
    valid = typeof value === expectedType;
  } else if (type === Boolean) {
    expectedType = 'boolean';
    valid = typeof value === expectedType;
  } else if (type === Function) {
    expectedType = 'function';
    valid = typeof value === expectedType;
  } else if (type === Object) {
    expectedType = 'object';
    valid = isPlainObject(value);
  } else if (type === Array) {
    expectedType = 'array';
    valid = isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  };
}

/**
 * Format type for output
 *
 * @param {String} type
 * @return {String}
 */

function formatType(type) {
  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';
}

/**
 * Format value
 *
 * @param {*} value
 * @return {String}
 */

function formatValue(val) {
  return Object.prototype.toString.call(val).slice(8, -1);
}

var bindingModes = config._propBindingModes;

var propDef = {

  bind: function bind() {
    var child = this.vm;
    var parent = child._context;
    // passed in from compiler directly
    var prop = this.descriptor.prop;
    var childKey = prop.path;
    var parentKey = prop.parentPath;
    var twoWay = prop.mode === bindingModes.TWO_WAY;

    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {
      updateProp(child, prop, val);
    }, {
      twoWay: twoWay,
      filters: prop.filters,
      // important: props need to be observed on the
      // v-for scope if present
      scope: this._scope
    });

    // set the child initial value.
    initProp(child, prop, parentWatcher.value);

    // setup two-way binding
    if (twoWay) {
      // important: defer the child watcher creation until
      // the created hook (after data observation)
      var self = this;
      child.$once('pre-hook:created', function () {
        self.childWatcher = new Watcher(child, childKey, function (val) {
          parentWatcher.set(val);
        }, {
          // ensure sync upward before parent sync down.
          // this is necessary in cases e.g. the child
          // mutates a prop array, then replaces it. (#1683)
          sync: true
        });
      });
    }
  },

  unbind: function unbind() {
    this.parentWatcher.teardown();
    if (this.childWatcher) {
      this.childWatcher.teardown();
    }
  }
};

var queue$1 = [];
var queued = false;

/**
 * Push a job into the queue.
 *
 * @param {Function} job
 */

function pushJob(job) {
  queue$1.push(job);
  if (!queued) {
    queued = true;
    nextTick(flush);
  }
}

/**
 * Flush the queue, and do one forced reflow before
 * triggering transitions.
 */

function flush() {
  // Force layout
  var f = document.documentElement.offsetHeight;
  for (var i = 0; i < queue$1.length; i++) {
    queue$1[i]();
  }
  queue$1 = [];
  queued = false;
  // dummy return, so js linters don't complain about
  // unused variable f
  return f;
}

var TYPE_TRANSITION = 'transition';
var TYPE_ANIMATION = 'animation';
var transDurationProp = transitionProp + 'Duration';
var animDurationProp = animationProp + 'Duration';

/**
 * If a just-entered element is applied the
 * leave class while its enter transition hasn't started yet,
 * and the transitioned property has the same value for both
 * enter/leave, then the leave transition will be skipped and
 * the transitionend event never fires. This function ensures
 * its callback to be called after a transition has started
 * by waiting for double raf.
 *
 * It falls back to setTimeout on devices that support CSS
 * transitions but not raf (e.g. Android 4.2 browser) - since
 * these environments are usually slow, we are giving it a
 * relatively large timeout.
 */

var raf = inBrowser && window.requestAnimationFrame;
var waitForTransitionStart = raf
/* istanbul ignore next */
? function (fn) {
  raf(function () {
    raf(fn);
  });
} : function (fn) {
  setTimeout(fn, 50);
};

/**
 * A Transition object that encapsulates the state and logic
 * of the transition.
 *
 * @param {Element} el
 * @param {String} id
 * @param {Object} hooks
 * @param {Vue} vm
 */
function Transition(el, id, hooks, vm) {
  this.id = id;
  this.el = el;
  this.enterClass = hooks && hooks.enterClass || id + '-enter';
  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';
  this.hooks = hooks;
  this.vm = vm;
  // async state
  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;
  this.justEntered = false;
  this.entered = this.left = false;
  this.typeCache = {};
  // check css transition type
  this.type = hooks && hooks.type;
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production') {
    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {
      warn('invalid CSS transition type for transition="' + this.id + '": ' + this.type, vm);
    }
  }
  // bind
  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {
    self[m] = bind(self[m], self);
  });
}

var p$1 = Transition.prototype;

/**
 * Start an entering transition.
 *
 * 1. enter transition triggered
 * 2. call beforeEnter hook
 * 3. add enter class
 * 4. insert/show element
 * 5. call enter hook (with possible explicit js callback)
 * 6. reflow
 * 7. based on transition type:
 *    - transition:
 *        remove class now, wait for transitionend,
 *        then done if there's no explicit js callback.
 *    - animation:
 *        wait for animationend, remove class,
 *        then done if there's no explicit js callback.
 *    - no css transition:
 *        done now if there's no explicit js callback.
 * 8. wait for either done or js callback, then call
 *    afterEnter hook.
 *
 * @param {Function} op - insert/show the element
 * @param {Function} [cb]
 */

p$1.enter = function (op, cb) {
  this.cancelPending();
  this.callHook('beforeEnter');
  this.cb = cb;
  addClass(this.el, this.enterClass);
  op();
  this.entered = false;
  this.callHookWithCb('enter');
  if (this.entered) {
    return; // user called done synchronously.
  }
  this.cancel = this.hooks && this.hooks.enterCancelled;
  pushJob(this.enterNextTick);
};

/**
 * The "nextTick" phase of an entering transition, which is
 * to be pushed into a queue and executed after a reflow so
 * that removing the class can trigger a CSS transition.
 */

p$1.enterNextTick = function () {
  var _this = this;

  // prevent transition skipping
  this.justEntered = true;
  waitForTransitionStart(function () {
    _this.justEntered = false;
  });
  var enterDone = this.enterDone;
  var type = this.getCssTransitionType(this.enterClass);
  if (!this.pendingJsCb) {
    if (type === TYPE_TRANSITION) {
      // trigger transition by removing enter class now
      removeClass(this.el, this.enterClass);
      this.setupCssCb(transitionEndEvent, enterDone);
    } else if (type === TYPE_ANIMATION) {
      this.setupCssCb(animationEndEvent, enterDone);
    } else {
      enterDone();
    }
  } else if (type === TYPE_TRANSITION) {
    removeClass(this.el, this.enterClass);
  }
};

/**
 * The "cleanup" phase of an entering transition.
 */

p$1.enterDone = function () {
  this.entered = true;
  this.cancel = this.pendingJsCb = null;
  removeClass(this.el, this.enterClass);
  this.callHook('afterEnter');
  if (this.cb) this.cb();
};

/**
 * Start a leaving transition.
 *
 * 1. leave transition triggered.
 * 2. call beforeLeave hook
 * 3. add leave class (trigger css transition)
 * 4. call leave hook (with possible explicit js callback)
 * 5. reflow if no explicit js callback is provided
 * 6. based on transition type:
 *    - transition or animation:
 *        wait for end event, remove class, then done if
 *        there's no explicit js callback.
 *    - no css transition:
 *        done if there's no explicit js callback.
 * 7. wait for either done or js callback, then call
 *    afterLeave hook.
 *
 * @param {Function} op - remove/hide the element
 * @param {Function} [cb]
 */

p$1.leave = function (op, cb) {
  this.cancelPending();
  this.callHook('beforeLeave');
  this.op = op;
  this.cb = cb;
  addClass(this.el, this.leaveClass);
  this.left = false;
  this.callHookWithCb('leave');
  if (this.left) {
    return; // user called done synchronously.
  }
  this.cancel = this.hooks && this.hooks.leaveCancelled;
  // only need to handle leaveDone if
  // 1. the transition is already done (synchronously called
  //    by the user, which causes this.op set to null)
  // 2. there's no explicit js callback
  if (this.op && !this.pendingJsCb) {
    // if a CSS transition leaves immediately after enter,
    // the transitionend event never fires. therefore we
    // detect such cases and end the leave immediately.
    if (this.justEntered) {
      this.leaveDone();
    } else {
      pushJob(this.leaveNextTick);
    }
  }
};

/**
 * The "nextTick" phase of a leaving transition.
 */

p$1.leaveNextTick = function () {
  var type = this.getCssTransitionType(this.leaveClass);
  if (type) {
    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;
    this.setupCssCb(event, this.leaveDone);
  } else {
    this.leaveDone();
  }
};

/**
 * The "cleanup" phase of a leaving transition.
 */

p$1.leaveDone = function () {
  this.left = true;
  this.cancel = this.pendingJsCb = null;
  this.op();
  removeClass(this.el, this.leaveClass);
  this.callHook('afterLeave');
  if (this.cb) this.cb();
  this.op = null;
};

/**
 * Cancel any pending callbacks from a previously running
 * but not finished transition.
 */

p$1.cancelPending = function () {
  this.op = this.cb = null;
  var hasPending = false;
  if (this.pendingCssCb) {
    hasPending = true;
    off(this.el, this.pendingCssEvent, this.pendingCssCb);
    this.pendingCssEvent = this.pendingCssCb = null;
  }
  if (this.pendingJsCb) {
    hasPending = true;
    this.pendingJsCb.cancel();
    this.pendingJsCb = null;
  }
  if (hasPending) {
    removeClass(this.el, this.enterClass);
    removeClass(this.el, this.leaveClass);
  }
  if (this.cancel) {
    this.cancel.call(this.vm, this.el);
    this.cancel = null;
  }
};

/**
 * Call a user-provided synchronous hook function.
 *
 * @param {String} type
 */

p$1.callHook = function (type) {
  if (this.hooks && this.hooks[type]) {
    this.hooks[type].call(this.vm, this.el);
  }
};

/**
 * Call a user-provided, potentially-async hook function.
 * We check for the length of arguments to see if the hook
 * expects a `done` callback. If true, the transition's end
 * will be determined by when the user calls that callback;
 * otherwise, the end is determined by the CSS transition or
 * animation.
 *
 * @param {String} type
 */

p$1.callHookWithCb = function (type) {
  var hook = this.hooks && this.hooks[type];
  if (hook) {
    if (hook.length > 1) {
      this.pendingJsCb = cancellable(this[type + 'Done']);
    }
    hook.call(this.vm, this.el, this.pendingJsCb);
  }
};

/**
 * Get an element's transition type based on the
 * calculated styles.
 *
 * @param {String} className
 * @return {Number}
 */

p$1.getCssTransitionType = function (className) {
  /* istanbul ignore if */
  if (!transitionEndEvent ||
  // skip CSS transitions if page is not visible -
  // this solves the issue of transitionend events not
  // firing until the page is visible again.
  // pageVisibility API is supported in IE10+, same as
  // CSS transitions.
  document.hidden ||
  // explicit js-only transition
  this.hooks && this.hooks.css === false ||
  // element is hidden
  isHidden(this.el)) {
    return;
  }
  var type = this.type || this.typeCache[className];
  if (type) return type;
  var inlineStyles = this.el.style;
  var computedStyles = window.getComputedStyle(this.el);
  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];
  if (transDuration && transDuration !== '0s') {
    type = TYPE_TRANSITION;
  } else {
    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];
    if (animDuration && animDuration !== '0s') {
      type = TYPE_ANIMATION;
    }
  }
  if (type) {
    this.typeCache[className] = type;
  }
  return type;
};

/**
 * Setup a CSS transitionend/animationend callback.
 *
 * @param {String} event
 * @param {Function} cb
 */

p$1.setupCssCb = function (event, cb) {
  this.pendingCssEvent = event;
  var self = this;
  var el = this.el;
  var onEnd = this.pendingCssCb = function (e) {
    if (e.target === el) {
      off(el, event, onEnd);
      self.pendingCssEvent = self.pendingCssCb = null;
      if (!self.pendingJsCb && cb) {
        cb();
      }
    }
  };
  on(el, event, onEnd);
};

/**
 * Check if an element is hidden - in that case we can just
 * skip the transition alltogether.
 *
 * @param {Element} el
 * @return {Boolean}
 */

function isHidden(el) {
  if (/svg$/.test(el.namespaceURI)) {
    // SVG elements do not have offset(Width|Height)
    // so we need to check the client rect
    var rect = el.getBoundingClientRect();
    return !(rect.width || rect.height);
  } else {
    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
  }
}

var transition$1 = {

  priority: TRANSITION,

  update: function update(id, oldId) {
    var el = this.el;
    // resolve on owner vm
    var hooks = resolveAsset(this.vm.$options, 'transitions', id);
    id = id || 'v';
    oldId = oldId || 'v';
    el.__v_trans = new Transition(el, id, hooks, this.vm);
    removeClass(el, oldId + '-transition');
    addClass(el, id + '-transition');
  }
};

var internalDirectives = {
  style: style,
  'class': vClass,
  component: component,
  prop: propDef,
  transition: transition$1
};

// special binding prefixes
var bindRE = /^v-bind:|^:/;
var onRE = /^v-on:|^@/;
var dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;
var modifierRE = /\.[^\.]+/g;
var transitionRE = /^(v-bind:|:)?transition$/;

// default directive priority
var DEFAULT_PRIORITY = 1000;
var DEFAULT_TERMINAL_PRIORITY = 2000;

/**
 * Compile a template and return a reusable composite link
 * function, which recursively contains more link functions
 * inside. This top level compile function would normally
 * be called on instance root nodes, but can also be used
 * for partial compilation if the partial argument is true.
 *
 * The returned composite link function, when called, will
 * return an unlink function that tearsdown all directives
 * created during the linking phase.
 *
 * @param {Element|DocumentFragment} el
 * @param {Object} options
 * @param {Boolean} partial
 * @return {Function}
 */

function compile(el, options, partial) {
  // link function for the node itself.
  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;
  // link function for the childNodes
  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;

  /**
   * A composite linker function to be called on a already
   * compiled piece of DOM, which instantiates all directive
   * instances.
   *
   * @param {Vue} vm
   * @param {Element|DocumentFragment} el
   * @param {Vue} [host] - host vm of transcluded content
   * @param {Object} [scope] - v-for scope
   * @param {Fragment} [frag] - link context fragment
   * @return {Function|undefined}
   */

  return function compositeLinkFn(vm, el, host, scope, frag) {
    // cache childNodes before linking parent, fix #657
    var childNodes = toArray(el.childNodes);
    // link
    var dirs = linkAndCapture(function compositeLinkCapturer() {
      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);
      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);
    }, vm);
    return makeUnlinkFn(vm, dirs);
  };
}

/**
 * Apply a linker to a vm/element pair and capture the
 * directives created during the process.
 *
 * @param {Function} linker
 * @param {Vue} vm
 */

function linkAndCapture(linker, vm) {
  /* istanbul ignore if */
  if (process.env.NODE_ENV === 'production') {
    // reset directives before every capture in production
    // mode, so that when unlinking we don't need to splice
    // them out (which turns out to be a perf hit).
    // they are kept in development mode because they are
    // useful for Vue's own tests.
    vm._directives = [];
  }
  var originalDirCount = vm._directives.length;
  linker();
  var dirs = vm._directives.slice(originalDirCount);
  dirs.sort(directiveComparator);
  for (var i = 0, l = dirs.length; i < l; i++) {
    dirs[i]._bind();
  }
  return dirs;
}

/**
 * Directive priority sort comparator
 *
 * @param {Object} a
 * @param {Object} b
 */

function directiveComparator(a, b) {
  a = a.descriptor.def.priority || DEFAULT_PRIORITY;
  b = b.descriptor.def.priority || DEFAULT_PRIORITY;
  return a > b ? -1 : a === b ? 0 : 1;
}

/**
 * Linker functions return an unlink function that
 * tearsdown all directives instances generated during
 * the process.
 *
 * We create unlink functions with only the necessary
 * information to avoid retaining additional closures.
 *
 * @param {Vue} vm
 * @param {Array} dirs
 * @param {Vue} [context]
 * @param {Array} [contextDirs]
 * @return {Function}
 */

function makeUnlinkFn(vm, dirs, context, contextDirs) {
  function unlink(destroying) {
    teardownDirs(vm, dirs, destroying);
    if (context && contextDirs) {
      teardownDirs(context, contextDirs);
    }
  }
  // expose linked directives
  unlink.dirs = dirs;
  return unlink;
}

/**
 * Teardown partial linked directives.
 *
 * @param {Vue} vm
 * @param {Array} dirs
 * @param {Boolean} destroying
 */

function teardownDirs(vm, dirs, destroying) {
  var i = dirs.length;
  while (i--) {
    dirs[i]._teardown();
    if (process.env.NODE_ENV !== 'production' && !destroying) {
      vm._directives.$remove(dirs[i]);
    }
  }
}

/**
 * Compile link props on an instance.
 *
 * @param {Vue} vm
 * @param {Element} el
 * @param {Object} props
 * @param {Object} [scope]
 * @return {Function}
 */

function compileAndLinkProps(vm, el, props, scope) {
  var propsLinkFn = compileProps(el, props, vm);
  var propDirs = linkAndCapture(function () {
    propsLinkFn(vm, scope);
  }, vm);
  return makeUnlinkFn(vm, propDirs);
}

/**
 * Compile the root element of an instance.
 *
 * 1. attrs on context container (context scope)
 * 2. attrs on the component template root node, if
 *    replace:true (child scope)
 *
 * If this is a fragment instance, we only need to compile 1.
 *
 * @param {Element} el
 * @param {Object} options
 * @param {Object} contextOptions
 * @return {Function}
 */

function compileRoot(el, options, contextOptions) {
  var containerAttrs = options._containerAttrs;
  var replacerAttrs = options._replacerAttrs;
  var contextLinkFn, replacerLinkFn;

  // only need to compile other attributes for
  // non-fragment instances
  if (el.nodeType !== 11) {
    // for components, container and replacer need to be
    // compiled separately and linked in different scopes.
    if (options._asComponent) {
      // 2. container attributes
      if (containerAttrs && contextOptions) {
        contextLinkFn = compileDirectives(containerAttrs, contextOptions);
      }
      if (replacerAttrs) {
        // 3. replacer attributes
        replacerLinkFn = compileDirectives(replacerAttrs, options);
      }
    } else {
      // non-component, just compile as a normal element.
      replacerLinkFn = compileDirectives(el.attributes, options);
    }
  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {
    // warn container directives for fragment instances
    var names = containerAttrs.filter(function (attr) {
      // allow vue-loader/vueify scoped css attributes
      return attr.name.indexOf('_v-') < 0 &&
      // allow event listeners
      !onRE.test(attr.name) &&
      // allow slots
      attr.name !== 'slot';
    }).map(function (attr) {
      return '"' + attr.name + '"';
    });
    if (names.length) {
      var plural = names.length > 1;
      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');
    }
  }

  options._containerAttrs = options._replacerAttrs = null;
  return function rootLinkFn(vm, el, scope) {
    // link context scope dirs
    var context = vm._context;
    var contextDirs;
    if (context && contextLinkFn) {
      contextDirs = linkAndCapture(function () {
        contextLinkFn(context, el, null, scope);
      }, context);
    }

    // link self
    var selfDirs = linkAndCapture(function () {
      if (replacerLinkFn) replacerLinkFn(vm, el);
    }, vm);

    // return the unlink function that tearsdown context
    // container directives.
    return makeUnlinkFn(vm, selfDirs, context, contextDirs);
  };
}

/**
 * Compile a node and return a nodeLinkFn based on the
 * node type.
 *
 * @param {Node} node
 * @param {Object} options
 * @return {Function|null}
 */

function compileNode(node, options) {
  var type = node.nodeType;
  if (type === 1 && !isScript(node)) {
    return compileElement(node, options);
  } else if (type === 3 && node.data.trim()) {
    return compileTextNode(node, options);
  } else {
    return null;
  }
}

/**
 * Compile an element and return a nodeLinkFn.
 *
 * @param {Element} el
 * @param {Object} options
 * @return {Function|null}
 */

function compileElement(el, options) {
  // preprocess textareas.
  // textarea treats its text content as the initial value.
  // just bind it as an attr directive for value.
  if (el.tagName === 'TEXTAREA') {
    var tokens = parseText(el.value);
    if (tokens) {
      el.setAttribute(':value', tokensToExp(tokens));
      el.value = '';
    }
  }
  var linkFn;
  var hasAttrs = el.hasAttributes();
  var attrs = hasAttrs && toArray(el.attributes);
  // check terminal directives (for & if)
  if (hasAttrs) {
    linkFn = checkTerminalDirectives(el, attrs, options);
  }
  // check element directives
  if (!linkFn) {
    linkFn = checkElementDirectives(el, options);
  }
  // check component
  if (!linkFn) {
    linkFn = checkComponent(el, options);
  }
  // normal directives
  if (!linkFn && hasAttrs) {
    linkFn = compileDirectives(attrs, options);
  }
  return linkFn;
}

/**
 * Compile a textNode and return a nodeLinkFn.
 *
 * @param {TextNode} node
 * @param {Object} options
 * @return {Function|null} textNodeLinkFn
 */

function compileTextNode(node, options) {
  // skip marked text nodes
  if (node._skip) {
    return removeText;
  }

  var tokens = parseText(node.wholeText);
  if (!tokens) {
    return null;
  }

  // mark adjacent text nodes as skipped,
  // because we are using node.wholeText to compile
  // all adjacent text nodes together. This fixes
  // issues in IE where sometimes it splits up a single
  // text node into multiple ones.
  var next = node.nextSibling;
  while (next && next.nodeType === 3) {
    next._skip = true;
    next = next.nextSibling;
  }

  var frag = document.createDocumentFragment();
  var el, token;
  for (var i = 0, l = tokens.length; i < l; i++) {
    token = tokens[i];
    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);
    frag.appendChild(el);
  }
  return makeTextNodeLinkFn(tokens, frag, options);
}

/**
 * Linker for an skipped text node.
 *
 * @param {Vue} vm
 * @param {Text} node
 */

function removeText(vm, node) {
  remove(node);
}

/**
 * Process a single text token.
 *
 * @param {Object} token
 * @param {Object} options
 * @return {Node}
 */

function processTextToken(token, options) {
  var el;
  if (token.oneTime) {
    el = document.createTextNode(token.value);
  } else {
    if (token.html) {
      el = document.createComment('v-html');
      setTokenType('html');
    } else {
      // IE will clean up empty textNodes during
      // frag.cloneNode(true), so we have to give it
      // something here...
      el = document.createTextNode(' ');
      setTokenType('text');
    }
  }
  function setTokenType(type) {
    if (token.descriptor) return;
    var parsed = parseDirective(token.value);
    token.descriptor = {
      name: type,
      def: directives[type],
      expression: parsed.expression,
      filters: parsed.filters
    };
  }
  return el;
}

/**
 * Build a function that processes a textNode.
 *
 * @param {Array<Object>} tokens
 * @param {DocumentFragment} frag
 */

function makeTextNodeLinkFn(tokens, frag) {
  return function textNodeLinkFn(vm, el, host, scope) {
    var fragClone = frag.cloneNode(true);
    var childNodes = toArray(fragClone.childNodes);
    var token, value, node;
    for (var i = 0, l = tokens.length; i < l; i++) {
      token = tokens[i];
      value = token.value;
      if (token.tag) {
        node = childNodes[i];
        if (token.oneTime) {
          value = (scope || vm).$eval(value);
          if (token.html) {
            replace(node, parseTemplate(value, true));
          } else {
            node.data = _toString(value);
          }
        } else {
          vm._bindDir(token.descriptor, node, host, scope);
        }
      }
    }
    replace(el, fragClone);
  };
}

/**
 * Compile a node list and return a childLinkFn.
 *
 * @param {NodeList} nodeList
 * @param {Object} options
 * @return {Function|undefined}
 */

function compileNodeList(nodeList, options) {
  var linkFns = [];
  var nodeLinkFn, childLinkFn, node;
  for (var i = 0, l = nodeList.length; i < l; i++) {
    node = nodeList[i];
    nodeLinkFn = compileNode(node, options);
    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;
    linkFns.push(nodeLinkFn, childLinkFn);
  }
  return linkFns.length ? makeChildLinkFn(linkFns) : null;
}

/**
 * Make a child link function for a node's childNodes.
 *
 * @param {Array<Function>} linkFns
 * @return {Function} childLinkFn
 */

function makeChildLinkFn(linkFns) {
  return function childLinkFn(vm, nodes, host, scope, frag) {
    var node, nodeLinkFn, childrenLinkFn;
    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {
      node = nodes[n];
      nodeLinkFn = linkFns[i++];
      childrenLinkFn = linkFns[i++];
      // cache childNodes before linking parent, fix #657
      var childNodes = toArray(node.childNodes);
      if (nodeLinkFn) {
        nodeLinkFn(vm, node, host, scope, frag);
      }
      if (childrenLinkFn) {
        childrenLinkFn(vm, childNodes, host, scope, frag);
      }
    }
  };
}

/**
 * Check for element directives (custom elements that should
 * be resovled as terminal directives).
 *
 * @param {Element} el
 * @param {Object} options
 */

function checkElementDirectives(el, options) {
  var tag = el.tagName.toLowerCase();
  if (commonTagRE.test(tag)) {
    return;
  }
  var def = resolveAsset(options, 'elementDirectives', tag);
  if (def) {
    return makeTerminalNodeLinkFn(el, tag, '', options, def);
  }
}

/**
 * Check if an element is a component. If yes, return
 * a component link function.
 *
 * @param {Element} el
 * @param {Object} options
 * @return {Function|undefined}
 */

function checkComponent(el, options) {
  var component = checkComponentAttr(el, options);
  if (component) {
    var ref = findRef(el);
    var descriptor = {
      name: 'component',
      ref: ref,
      expression: component.id,
      def: internalDirectives.component,
      modifiers: {
        literal: !component.dynamic
      }
    };
    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {
      if (ref) {
        defineReactive((scope || vm).$refs, ref, null);
      }
      vm._bindDir(descriptor, el, host, scope, frag);
    };
    componentLinkFn.terminal = true;
    return componentLinkFn;
  }
}

/**
 * Check an element for terminal directives in fixed order.
 * If it finds one, return a terminal link function.
 *
 * @param {Element} el
 * @param {Array} attrs
 * @param {Object} options
 * @return {Function} terminalLinkFn
 */

function checkTerminalDirectives(el, attrs, options) {
  // skip v-pre
  if (getAttr(el, 'v-pre') !== null) {
    return skip;
  }
  // skip v-else block, but only if following v-if
  if (el.hasAttribute('v-else')) {
    var prev = el.previousElementSibling;
    if (prev && prev.hasAttribute('v-if')) {
      return skip;
    }
  }

  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;
  for (var i = 0, j = attrs.length; i < j; i++) {
    attr = attrs[i];
    name = attr.name.replace(modifierRE, '');
    if (matched = name.match(dirAttrRE)) {
      def = resolveAsset(options, 'directives', matched[1]);
      if (def && def.terminal) {
        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {
          termDef = def;
          rawName = attr.name;
          modifiers = parseModifiers(attr.name);
          value = attr.value;
          dirName = matched[1];
          arg = matched[2];
        }
      }
    }
  }

  if (termDef) {
    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);
  }
}

function skip() {}
skip.terminal = true;

/**
 * Build a node link function for a terminal directive.
 * A terminal link function terminates the current
 * compilation recursion and handles compilation of the
 * subtree in the directive.
 *
 * @param {Element} el
 * @param {String} dirName
 * @param {String} value
 * @param {Object} options
 * @param {Object} def
 * @param {String} [rawName]
 * @param {String} [arg]
 * @param {Object} [modifiers]
 * @return {Function} terminalLinkFn
 */

function makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {
  var parsed = parseDirective(value);
  var descriptor = {
    name: dirName,
    arg: arg,
    expression: parsed.expression,
    filters: parsed.filters,
    raw: value,
    attr: rawName,
    modifiers: modifiers,
    def: def
  };
  // check ref for v-for and router-view
  if (dirName === 'for' || dirName === 'router-view') {
    descriptor.ref = findRef(el);
  }
  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {
    if (descriptor.ref) {
      defineReactive((scope || vm).$refs, descriptor.ref, null);
    }
    vm._bindDir(descriptor, el, host, scope, frag);
  };
  fn.terminal = true;
  return fn;
}

/**
 * Compile the directives on an element and return a linker.
 *
 * @param {Array|NamedNodeMap} attrs
 * @param {Object} options
 * @return {Function}
 */

function compileDirectives(attrs, options) {
  var i = attrs.length;
  var dirs = [];
  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;
  while (i--) {
    attr = attrs[i];
    name = rawName = attr.name;
    value = rawValue = attr.value;
    tokens = parseText(value);
    // reset arg
    arg = null;
    // check modifiers
    modifiers = parseModifiers(name);
    name = name.replace(modifierRE, '');

    // attribute interpolations
    if (tokens) {
      value = tokensToExp(tokens);
      arg = name;
      pushDir('bind', directives.bind, tokens);
      // warn against mixing mustaches with v-bind
      if (process.env.NODE_ENV !== 'production') {
        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {
          return attr.name === ':class' || attr.name === 'v-bind:class';
        })) {
          warn('class="' + rawValue + '": Do not mix mustache interpolation ' + 'and v-bind for "class" on the same element. Use one or the other.', options);
        }
      }
    } else

      // special attribute: transition
      if (transitionRE.test(name)) {
        modifiers.literal = !bindRE.test(name);
        pushDir('transition', internalDirectives.transition);
      } else

        // event handlers
        if (onRE.test(name)) {
          arg = name.replace(onRE, '');
          pushDir('on', directives.on);
        } else

          // attribute bindings
          if (bindRE.test(name)) {
            dirName = name.replace(bindRE, '');
            if (dirName === 'style' || dirName === 'class') {
              pushDir(dirName, internalDirectives[dirName]);
            } else {
              arg = dirName;
              pushDir('bind', directives.bind);
            }
          } else

            // normal directives
            if (matched = name.match(dirAttrRE)) {
              dirName = matched[1];
              arg = matched[2];

              // skip v-else (when used with v-show)
              if (dirName === 'else') {
                continue;
              }

              dirDef = resolveAsset(options, 'directives', dirName, true);
              if (dirDef) {
                pushDir(dirName, dirDef);
              }
            }
  }

  /**
   * Push a directive.
   *
   * @param {String} dirName
   * @param {Object|Function} def
   * @param {Array} [interpTokens]
   */

  function pushDir(dirName, def, interpTokens) {
    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);
    var parsed = !hasOneTimeToken && parseDirective(value);
    dirs.push({
      name: dirName,
      attr: rawName,
      raw: rawValue,
      def: def,
      arg: arg,
      modifiers: modifiers,
      // conversion from interpolation strings with one-time token
      // to expression is differed until directive bind time so that we
      // have access to the actual vm context for one-time bindings.
      expression: parsed && parsed.expression,
      filters: parsed && parsed.filters,
      interp: interpTokens,
      hasOneTime: hasOneTimeToken
    });
  }

  if (dirs.length) {
    return makeNodeLinkFn(dirs);
  }
}

/**
 * Parse modifiers from directive attribute name.
 *
 * @param {String} name
 * @return {Object}
 */

function parseModifiers(name) {
  var res = Object.create(null);
  var match = name.match(modifierRE);
  if (match) {
    var i = match.length;
    while (i--) {
      res[match[i].slice(1)] = true;
    }
  }
  return res;
}

/**
 * Build a link function for all directives on a single node.
 *
 * @param {Array} directives
 * @return {Function} directivesLinkFn
 */

function makeNodeLinkFn(directives) {
  return function nodeLinkFn(vm, el, host, scope, frag) {
    // reverse apply because it's sorted low to high
    var i = directives.length;
    while (i--) {
      vm._bindDir(directives[i], el, host, scope, frag);
    }
  };
}

/**
 * Check if an interpolation string contains one-time tokens.
 *
 * @param {Array} tokens
 * @return {Boolean}
 */

function hasOneTime(tokens) {
  var i = tokens.length;
  while (i--) {
    if (tokens[i].oneTime) return true;
  }
}

function isScript(el) {
  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');
}

var specialCharRE = /[^\w\-:\.]/;

/**
 * Process an element or a DocumentFragment based on a
 * instance option object. This allows us to transclude
 * a template node/fragment before the instance is created,
 * so the processed fragment can then be cloned and reused
 * in v-for.
 *
 * @param {Element} el
 * @param {Object} options
 * @return {Element|DocumentFragment}
 */

function transclude(el, options) {
  // extract container attributes to pass them down
  // to compiler, because they need to be compiled in
  // parent scope. we are mutating the options object here
  // assuming the same object will be used for compile
  // right after this.
  if (options) {
    options._containerAttrs = extractAttrs(el);
  }
  // for template tags, what we want is its content as
  // a documentFragment (for fragment instances)
  if (isTemplate(el)) {
    el = parseTemplate(el);
  }
  if (options) {
    if (options._asComponent && !options.template) {
      options.template = '<slot></slot>';
    }
    if (options.template) {
      options._content = extractContent(el);
      el = transcludeTemplate(el, options);
    }
  }
  if (isFragment(el)) {
    // anchors for fragment instance
    // passing in `persist: true` to avoid them being
    // discarded by IE during template cloning
    prepend(createAnchor('v-start', true), el);
    el.appendChild(createAnchor('v-end', true));
  }
  return el;
}

/**
 * Process the template option.
 * If the replace option is true this will swap the $el.
 *
 * @param {Element} el
 * @param {Object} options
 * @return {Element|DocumentFragment}
 */

function transcludeTemplate(el, options) {
  var template = options.template;
  var frag = parseTemplate(template, true);
  if (frag) {
    var replacer = frag.firstChild;
    var tag = replacer.tagName && replacer.tagName.toLowerCase();
    if (options.replace) {
      /* istanbul ignore if */
      if (el === document.body) {
        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');
      }
      // there are many cases where the instance must
      // become a fragment instance: basically anything that
      // can create more than 1 root nodes.
      if (
      // multi-children template
      frag.childNodes.length > 1 ||
      // non-element template
      replacer.nodeType !== 1 ||
      // single nested component
      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||
      // element directive
      resolveAsset(options, 'elementDirectives', tag) ||
      // for block
      replacer.hasAttribute('v-for') ||
      // if block
      replacer.hasAttribute('v-if')) {
        return frag;
      } else {
        options._replacerAttrs = extractAttrs(replacer);
        mergeAttrs(el, replacer);
        return replacer;
      }
    } else {
      el.appendChild(frag);
      return el;
    }
  } else {
    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);
  }
}

/**
 * Helper to extract a component container's attributes
 * into a plain object array.
 *
 * @param {Element} el
 * @return {Array}
 */

function extractAttrs(el) {
  if (el.nodeType === 1 && el.hasAttributes()) {
    return toArray(el.attributes);
  }
}

/**
 * Merge the attributes of two elements, and make sure
 * the class names are merged properly.
 *
 * @param {Element} from
 * @param {Element} to
 */

function mergeAttrs(from, to) {
  var attrs = from.attributes;
  var i = attrs.length;
  var name, value;
  while (i--) {
    name = attrs[i].name;
    value = attrs[i].value;
    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {
      to.setAttribute(name, value);
    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {
      value.split(/\s+/).forEach(function (cls) {
        addClass(to, cls);
      });
    }
  }
}

/**
 * Scan and determine slot content distribution.
 * We do this during transclusion instead at compile time so that
 * the distribution is decoupled from the compilation order of
 * the slots.
 *
 * @param {Element|DocumentFragment} template
 * @param {Element} content
 * @param {Vue} vm
 */

function resolveSlots(vm, content) {
  if (!content) {
    return;
  }
  var contents = vm._slotContents = Object.create(null);
  var el, name;
  for (var i = 0, l = content.children.length; i < l; i++) {
    el = content.children[i];
    /* eslint-disable no-cond-assign */
    if (name = el.getAttribute('slot')) {
      (contents[name] || (contents[name] = [])).push(el);
    }
    /* eslint-enable no-cond-assign */
    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {
      warn('The "slot" attribute must be static.', vm.$parent);
    }
  }
  for (name in contents) {
    contents[name] = extractFragment(contents[name], content);
  }
  if (content.hasChildNodes()) {
    var nodes = content.childNodes;
    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {
      return;
    }
    contents['default'] = extractFragment(content.childNodes, content);
  }
}

/**
 * Extract qualified content nodes from a node list.
 *
 * @param {NodeList} nodes
 * @return {DocumentFragment}
 */

function extractFragment(nodes, parent) {
  var frag = document.createDocumentFragment();
  nodes = toArray(nodes);
  for (var i = 0, l = nodes.length; i < l; i++) {
    var node = nodes[i];
    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {
      parent.removeChild(node);
      node = parseTemplate(node, true);
    }
    frag.appendChild(node);
  }
  return frag;
}



var compiler = Object.freeze({
	compile: compile,
	compileAndLinkProps: compileAndLinkProps,
	compileRoot: compileRoot,
	transclude: transclude,
	resolveSlots: resolveSlots
});

function stateMixin (Vue) {
  /**
   * Accessor for `$data` property, since setting $data
   * requires observing the new object and updating
   * proxied properties.
   */

  Object.defineProperty(Vue.prototype, '$data', {
    get: function get() {
      return this._data;
    },
    set: function set(newData) {
      if (newData !== this._data) {
        this._setData(newData);
      }
    }
  });

  /**
   * Setup the scope of an instance, which contains:
   * - observed data
   * - computed properties
   * - user methods
   * - meta properties
   */

  Vue.prototype._initState = function () {
    this._initProps();
    this._initMeta();
    this._initMethods();
    this._initData();
    this._initComputed();
  };

  /**
   * Initialize props.
   */

  Vue.prototype._initProps = function () {
    var options = this.$options;
    var el = options.el;
    var props = options.props;
    if (props && !el) {
      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);
    }
    // make sure to convert string selectors into element now
    el = options.el = query(el);
    this._propsUnlinkFn = el && el.nodeType === 1 && props
    // props must be linked in proper scope if inside v-for
    ? compileAndLinkProps(this, el, props, this._scope) : null;
  };

  /**
   * Initialize the data.
   */

  Vue.prototype._initData = function () {
    var dataFn = this.$options.data;
    var data = this._data = dataFn ? dataFn() : {};
    if (!isPlainObject(data)) {
      data = {};
      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);
    }
    var props = this._props;
    // proxy data on instance
    var keys = Object.keys(data);
    var i, key;
    i = keys.length;
    while (i--) {
      key = keys[i];
      // there are two scenarios where we can proxy a data key:
      // 1. it's not already defined as a prop
      // 2. it's provided via a instantiation option AND there are no
      //    template prop present
      if (!props || !hasOwn(props, key)) {
        this._proxy(key);
      } else if (process.env.NODE_ENV !== 'production') {
        warn('Data field "' + key + '" is already defined ' + 'as a prop. To provide default value for a prop, use the "default" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the "propsData" option.', this);
      }
    }
    // observe data
    observe(data, this);
  };

  /**
   * Swap the instance's $data. Called in $data's setter.
   *
   * @param {Object} newData
   */

  Vue.prototype._setData = function (newData) {
    newData = newData || {};
    var oldData = this._data;
    this._data = newData;
    var keys, key, i;
    // unproxy keys not present in new data
    keys = Object.keys(oldData);
    i = keys.length;
    while (i--) {
      key = keys[i];
      if (!(key in newData)) {
        this._unproxy(key);
      }
    }
    // proxy keys not already proxied,
    // and trigger change for changed values
    keys = Object.keys(newData);
    i = keys.length;
    while (i--) {
      key = keys[i];
      if (!hasOwn(this, key)) {
        // new property
        this._proxy(key);
      }
    }
    oldData.__ob__.removeVm(this);
    observe(newData, this);
    this._digest();
  };

  /**
   * Proxy a property, so that
   * vm.prop === vm._data.prop
   *
   * @param {String} key
   */

  Vue.prototype._proxy = function (key) {
    if (!isReserved(key)) {
      // need to store ref to self here
      // because these getter/setters might
      // be called by child scopes via
      // prototype inheritance.
      var self = this;
      Object.defineProperty(self, key, {
        configurable: true,
        enumerable: true,
        get: function proxyGetter() {
          return self._data[key];
        },
        set: function proxySetter(val) {
          self._data[key] = val;
        }
      });
    }
  };

  /**
   * Unproxy a property.
   *
   * @param {String} key
   */

  Vue.prototype._unproxy = function (key) {
    if (!isReserved(key)) {
      delete this[key];
    }
  };

  /**
   * Force update on every watcher in scope.
   */

  Vue.prototype._digest = function () {
    for (var i = 0, l = this._watchers.length; i < l; i++) {
      this._watchers[i].update(true); // shallow updates
    }
  };

  /**
   * Setup computed properties. They are essentially
   * special getter/setters
   */

  function noop() {}
  Vue.prototype._initComputed = function () {
    var computed = this.$options.computed;
    if (computed) {
      for (var key in computed) {
        var userDef = computed[key];
        var def = {
          enumerable: true,
          configurable: true
        };
        if (typeof userDef === 'function') {
          def.get = makeComputedGetter(userDef, this);
          def.set = noop;
        } else {
          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;
          def.set = userDef.set ? bind(userDef.set, this) : noop;
        }
        Object.defineProperty(this, key, def);
      }
    }
  };

  function makeComputedGetter(getter, owner) {
    var watcher = new Watcher(owner, getter, null, {
      lazy: true
    });
    return function computedGetter() {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value;
    };
  }

  /**
   * Setup instance methods. Methods must be bound to the
   * instance since they might be passed down as a prop to
   * child components.
   */

  Vue.prototype._initMethods = function () {
    var methods = this.$options.methods;
    if (methods) {
      for (var key in methods) {
        this[key] = bind(methods[key], this);
      }
    }
  };

  /**
   * Initialize meta information like $index, $key & $value.
   */

  Vue.prototype._initMeta = function () {
    var metas = this.$options._meta;
    if (metas) {
      for (var key in metas) {
        defineReactive(this, key, metas[key]);
      }
    }
  };
}

var eventRE = /^v-on:|^@/;

function eventsMixin (Vue) {
  /**
   * Setup the instance's option events & watchers.
   * If the value is a string, we pull it from the
   * instance's methods by name.
   */

  Vue.prototype._initEvents = function () {
    var options = this.$options;
    if (options._asComponent) {
      registerComponentEvents(this, options.el);
    }
    registerCallbacks(this, '$on', options.events);
    registerCallbacks(this, '$watch', options.watch);
  };

  /**
   * Register v-on events on a child component
   *
   * @param {Vue} vm
   * @param {Element} el
   */

  function registerComponentEvents(vm, el) {
    var attrs = el.attributes;
    var name, value, handler;
    for (var i = 0, l = attrs.length; i < l; i++) {
      name = attrs[i].name;
      if (eventRE.test(name)) {
        name = name.replace(eventRE, '');
        // force the expression into a statement so that
        // it always dynamically resolves the method to call (#2670)
        // kinda ugly hack, but does the job.
        value = attrs[i].value;
        if (isSimplePath(value)) {
          value += '.apply(this, $arguments)';
        }
        handler = (vm._scope || vm._context).$eval(value, true);
        handler._fromParent = true;
        vm.$on(name.replace(eventRE), handler);
      }
    }
  }

  /**
   * Register callbacks for option events and watchers.
   *
   * @param {Vue} vm
   * @param {String} action
   * @param {Object} hash
   */

  function registerCallbacks(vm, action, hash) {
    if (!hash) return;
    var handlers, key, i, j;
    for (key in hash) {
      handlers = hash[key];
      if (isArray(handlers)) {
        for (i = 0, j = handlers.length; i < j; i++) {
          register(vm, action, key, handlers[i]);
        }
      } else {
        register(vm, action, key, handlers);
      }
    }
  }

  /**
   * Helper to register an event/watch callback.
   *
   * @param {Vue} vm
   * @param {String} action
   * @param {String} key
   * @param {Function|String|Object} handler
   * @param {Object} [options]
   */

  function register(vm, action, key, handler, options) {
    var type = typeof handler;
    if (type === 'function') {
      vm[action](key, handler, options);
    } else if (type === 'string') {
      var methods = vm.$options.methods;
      var method = methods && methods[handler];
      if (method) {
        vm[action](key, method, options);
      } else {
        process.env.NODE_ENV !== 'production' && warn('Unknown method: "' + handler + '" when ' + 'registering callback for ' + action + ': "' + key + '".', vm);
      }
    } else if (handler && type === 'object') {
      register(vm, action, key, handler.handler, handler);
    }
  }

  /**
   * Setup recursive attached/detached calls
   */

  Vue.prototype._initDOMHooks = function () {
    this.$on('hook:attached', onAttached);
    this.$on('hook:detached', onDetached);
  };

  /**
   * Callback to recursively call attached hook on children
   */

  function onAttached() {
    if (!this._isAttached) {
      this._isAttached = true;
      this.$children.forEach(callAttach);
    }
  }

  /**
   * Iterator to call attached hook
   *
   * @param {Vue} child
   */

  function callAttach(child) {
    if (!child._isAttached && inDoc(child.$el)) {
      child._callHook('attached');
    }
  }

  /**
   * Callback to recursively call detached hook on children
   */

  function onDetached() {
    if (this._isAttached) {
      this._isAttached = false;
      this.$children.forEach(callDetach);
    }
  }

  /**
   * Iterator to call detached hook
   *
   * @param {Vue} child
   */

  function callDetach(child) {
    if (child._isAttached && !inDoc(child.$el)) {
      child._callHook('detached');
    }
  }

  /**
   * Trigger all handlers for a hook
   *
   * @param {String} hook
   */

  Vue.prototype._callHook = function (hook) {
    this.$emit('pre-hook:' + hook);
    var handlers = this.$options[hook];
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        handlers[i].call(this);
      }
    }
    this.$emit('hook:' + hook);
  };
}

function noop$1() {}

/**
 * A directive links a DOM element with a piece of data,
 * which is the result of evaluating an expression.
 * It registers a watcher with the expression and calls
 * the DOM update function when a change is triggered.
 *
 * @param {Object} descriptor
 *                 - {String} name
 *                 - {Object} def
 *                 - {String} expression
 *                 - {Array<Object>} [filters]
 *                 - {Object} [modifiers]
 *                 - {Boolean} literal
 *                 - {String} attr
 *                 - {String} arg
 *                 - {String} raw
 *                 - {String} [ref]
 *                 - {Array<Object>} [interp]
 *                 - {Boolean} [hasOneTime]
 * @param {Vue} vm
 * @param {Node} el
 * @param {Vue} [host] - transclusion host component
 * @param {Object} [scope] - v-for scope
 * @param {Fragment} [frag] - owner fragment
 * @constructor
 */
function Directive(descriptor, vm, el, host, scope, frag) {
  this.vm = vm;
  this.el = el;
  // copy descriptor properties
  this.descriptor = descriptor;
  this.name = descriptor.name;
  this.expression = descriptor.expression;
  this.arg = descriptor.arg;
  this.modifiers = descriptor.modifiers;
  this.filters = descriptor.filters;
  this.literal = this.modifiers && this.modifiers.literal;
  // private
  this._locked = false;
  this._bound = false;
  this._listeners = null;
  // link context
  this._host = host;
  this._scope = scope;
  this._frag = frag;
  // store directives on node in dev mode
  if (process.env.NODE_ENV !== 'production' && this.el) {
    this.el._vue_directives = this.el._vue_directives || [];
    this.el._vue_directives.push(this);
  }
}

/**
 * Initialize the directive, mixin definition properties,
 * setup the watcher, call definition bind() and update()
 * if present.
 */

Directive.prototype._bind = function () {
  var name = this.name;
  var descriptor = this.descriptor;

  // remove attribute
  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {
    var attr = descriptor.attr || 'v-' + name;
    this.el.removeAttribute(attr);
  }

  // copy def properties
  var def = descriptor.def;
  if (typeof def === 'function') {
    this.update = def;
  } else {
    extend(this, def);
  }

  // setup directive params
  this._setupParams();

  // initial bind
  if (this.bind) {
    this.bind();
  }
  this._bound = true;

  if (this.literal) {
    this.update && this.update(descriptor.raw);
  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {
    // wrapped updater for context
    var dir = this;
    if (this.update) {
      this._update = function (val, oldVal) {
        if (!dir._locked) {
          dir.update(val, oldVal);
        }
      };
    } else {
      this._update = noop$1;
    }
    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;
    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;
    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback
    {
      filters: this.filters,
      twoWay: this.twoWay,
      deep: this.deep,
      preProcess: preProcess,
      postProcess: postProcess,
      scope: this._scope
    });
    // v-model with inital inline value need to sync back to
    // model instead of update to DOM on init. They would
    // set the afterBind hook to indicate that.
    if (this.afterBind) {
      this.afterBind();
    } else if (this.update) {
      this.update(watcher.value);
    }
  }
};

/**
 * Setup all param attributes, e.g. track-by,
 * transition-mode, etc...
 */

Directive.prototype._setupParams = function () {
  if (!this.params) {
    return;
  }
  var params = this.params;
  // swap the params array with a fresh object.
  this.params = Object.create(null);
  var i = params.length;
  var key, val, mappedKey;
  while (i--) {
    key = hyphenate(params[i]);
    mappedKey = camelize(key);
    val = getBindAttr(this.el, key);
    if (val != null) {
      // dynamic
      this._setupParamWatcher(mappedKey, val);
    } else {
      // static
      val = getAttr(this.el, key);
      if (val != null) {
        this.params[mappedKey] = val === '' ? true : val;
      }
    }
  }
};

/**
 * Setup a watcher for a dynamic param.
 *
 * @param {String} key
 * @param {String} expression
 */

Directive.prototype._setupParamWatcher = function (key, expression) {
  var self = this;
  var called = false;
  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {
    self.params[key] = val;
    // since we are in immediate mode,
    // only call the param change callbacks if this is not the first update.
    if (called) {
      var cb = self.paramWatchers && self.paramWatchers[key];
      if (cb) {
        cb.call(self, val, oldVal);
      }
    } else {
      called = true;
    }
  }, {
    immediate: true,
    user: false
  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);
};

/**
 * Check if the directive is a function caller
 * and if the expression is a callable one. If both true,
 * we wrap up the expression and use it as the event
 * handler.
 *
 * e.g. on-click="a++"
 *
 * @return {Boolean}
 */

Directive.prototype._checkStatement = function () {
  var expression = this.expression;
  if (expression && this.acceptStatement && !isSimplePath(expression)) {
    var fn = parseExpression(expression).get;
    var scope = this._scope || this.vm;
    var handler = function handler(e) {
      scope.$event = e;
      fn.call(scope, scope);
      scope.$event = null;
    };
    if (this.filters) {
      handler = scope._applyFilters(handler, null, this.filters);
    }
    this.update(handler);
    return true;
  }
};

/**
 * Set the corresponding value with the setter.
 * This should only be used in two-way directives
 * e.g. v-model.
 *
 * @param {*} value
 * @public
 */

Directive.prototype.set = function (value) {
  /* istanbul ignore else */
  if (this.twoWay) {
    this._withLock(function () {
      this._watcher.set(value);
    });
  } else if (process.env.NODE_ENV !== 'production') {
    warn('Directive.set() can only be used inside twoWay' + 'directives.');
  }
};

/**
 * Execute a function while preventing that function from
 * triggering updates on this directive instance.
 *
 * @param {Function} fn
 */

Directive.prototype._withLock = function (fn) {
  var self = this;
  self._locked = true;
  fn.call(self);
  nextTick(function () {
    self._locked = false;
  });
};

/**
 * Convenience method that attaches a DOM event listener
 * to the directive element and autometically tears it down
 * during unbind.
 *
 * @param {String} event
 * @param {Function} handler
 * @param {Boolean} [useCapture]
 */

Directive.prototype.on = function (event, handler, useCapture) {
  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);
};

/**
 * Teardown the watcher and call unbind.
 */

Directive.prototype._teardown = function () {
  if (this._bound) {
    this._bound = false;
    if (this.unbind) {
      this.unbind();
    }
    if (this._watcher) {
      this._watcher.teardown();
    }
    var listeners = this._listeners;
    var i;
    if (listeners) {
      i = listeners.length;
      while (i--) {
        off(this.el, listeners[i][0], listeners[i][1]);
      }
    }
    var unwatchFns = this._paramUnwatchFns;
    if (unwatchFns) {
      i = unwatchFns.length;
      while (i--) {
        unwatchFns[i]();
      }
    }
    if (process.env.NODE_ENV !== 'production' && this.el) {
      this.el._vue_directives.$remove(this);
    }
    this.vm = this.el = this._watcher = this._listeners = null;
  }
};

function lifecycleMixin (Vue) {
  /**
   * Update v-ref for component.
   *
   * @param {Boolean} remove
   */

  Vue.prototype._updateRef = function (remove) {
    var ref = this.$options._ref;
    if (ref) {
      var refs = (this._scope || this._context).$refs;
      if (remove) {
        if (refs[ref] === this) {
          refs[ref] = null;
        }
      } else {
        refs[ref] = this;
      }
    }
  };

  /**
   * Transclude, compile and link element.
   *
   * If a pre-compiled linker is available, that means the
   * passed in element will be pre-transcluded and compiled
   * as well - all we need to do is to call the linker.
   *
   * Otherwise we need to call transclude/compile/link here.
   *
   * @param {Element} el
   */

  Vue.prototype._compile = function (el) {
    var options = this.$options;

    // transclude and init element
    // transclude can potentially replace original
    // so we need to keep reference; this step also injects
    // the template and caches the original attributes
    // on the container node and replacer node.
    var original = el;
    el = transclude(el, options);
    this._initElement(el);

    // handle v-pre on root node (#2026)
    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {
      return;
    }

    // root is always compiled per-instance, because
    // container attrs and props can be different every time.
    var contextOptions = this._context && this._context.$options;
    var rootLinker = compileRoot(el, options, contextOptions);

    // resolve slot distribution
    resolveSlots(this, options._content);

    // compile and link the rest
    var contentLinkFn;
    var ctor = this.constructor;
    // component compilation can be cached
    // as long as it's not using inline-template
    if (options._linkerCachable) {
      contentLinkFn = ctor.linker;
      if (!contentLinkFn) {
        contentLinkFn = ctor.linker = compile(el, options);
      }
    }

    // link phase
    // make sure to link root with prop scope!
    var rootUnlinkFn = rootLinker(this, el, this._scope);
    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);

    // register composite unlink function
    // to be called during instance destruction
    this._unlinkFn = function () {
      rootUnlinkFn();
      // passing destroying: true to avoid searching and
      // splicing the directives
      contentUnlinkFn(true);
    };

    // finally replace original
    if (options.replace) {
      replace(original, el);
    }

    this._isCompiled = true;
    this._callHook('compiled');
  };

  /**
   * Initialize instance element. Called in the public
   * $mount() method.
   *
   * @param {Element} el
   */

  Vue.prototype._initElement = function (el) {
    if (isFragment(el)) {
      this._isFragment = true;
      this.$el = this._fragmentStart = el.firstChild;
      this._fragmentEnd = el.lastChild;
      // set persisted text anchors to empty
      if (this._fragmentStart.nodeType === 3) {
        this._fragmentStart.data = this._fragmentEnd.data = '';
      }
      this._fragment = el;
    } else {
      this.$el = el;
    }
    this.$el.__vue__ = this;
    this._callHook('beforeCompile');
  };

  /**
   * Create and bind a directive to an element.
   *
   * @param {Object} descriptor - parsed directive descriptor
   * @param {Node} node   - target node
   * @param {Vue} [host] - transclusion host component
   * @param {Object} [scope] - v-for scope
   * @param {Fragment} [frag] - owner fragment
   */

  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {
    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));
  };

  /**
   * Teardown an instance, unobserves the data, unbind all the
   * directives, turn off all the event listeners, etc.
   *
   * @param {Boolean} remove - whether to remove the DOM node.
   * @param {Boolean} deferCleanup - if true, defer cleanup to
   *                                 be called later
   */

  Vue.prototype._destroy = function (remove, deferCleanup) {
    if (this._isBeingDestroyed) {
      if (!deferCleanup) {
        this._cleanup();
      }
      return;
    }

    var destroyReady;
    var pendingRemoval;

    var self = this;
    // Cleanup should be called either synchronously or asynchronoysly as
    // callback of this.$remove(), or if remove and deferCleanup are false.
    // In any case it should be called after all other removing, unbinding and
    // turning of is done
    var cleanupIfPossible = function cleanupIfPossible() {
      if (destroyReady && !pendingRemoval && !deferCleanup) {
        self._cleanup();
      }
    };

    // remove DOM element
    if (remove && this.$el) {
      pendingRemoval = true;
      this.$remove(function () {
        pendingRemoval = false;
        cleanupIfPossible();
      });
    }

    this._callHook('beforeDestroy');
    this._isBeingDestroyed = true;
    var i;
    // remove self from parent. only necessary
    // if parent is not being destroyed as well.
    var parent = this.$parent;
    if (parent && !parent._isBeingDestroyed) {
      parent.$children.$remove(this);
      // unregister ref (remove: true)
      this._updateRef(true);
    }
    // destroy all children.
    i = this.$children.length;
    while (i--) {
      this.$children[i].$destroy();
    }
    // teardown props
    if (this._propsUnlinkFn) {
      this._propsUnlinkFn();
    }
    // teardown all directives. this also tearsdown all
    // directive-owned watchers.
    if (this._unlinkFn) {
      this._unlinkFn();
    }
    i = this._watchers.length;
    while (i--) {
      this._watchers[i].teardown();
    }
    // remove reference to self on $el
    if (this.$el) {
      this.$el.__vue__ = null;
    }

    destroyReady = true;
    cleanupIfPossible();
  };

  /**
   * Clean up to ensure garbage collection.
   * This is called after the leave transition if there
   * is any.
   */

  Vue.prototype._cleanup = function () {
    if (this._isDestroyed) {
      return;
    }
    // remove self from owner fragment
    // do it in cleanup so that we can call $destroy with
    // defer right when a fragment is about to be removed.
    if (this._frag) {
      this._frag.children.$remove(this);
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (this._data && this._data.__ob__) {
      this._data.__ob__.removeVm(this);
    }
    // Clean up references to private properties and other
    // instances. preserve reference to _data so that proxy
    // accessors still work. The only potential side effect
    // here is that mutating the instance after it's destroyed
    // may affect the state of other components that are still
    // observing the same object, but that seems to be a
    // reasonable responsibility for the user rather than
    // always throwing an error on them.
    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;
    // call the last hook...
    this._isDestroyed = true;
    this._callHook('destroyed');
    // turn off all instance listeners.
    this.$off();
  };
}

function miscMixin (Vue) {
  /**
   * Apply a list of filter (descriptors) to a value.
   * Using plain for loops here because this will be called in
   * the getter of any watcher with filters so it is very
   * performance sensitive.
   *
   * @param {*} value
   * @param {*} [oldValue]
   * @param {Array} filters
   * @param {Boolean} write
   * @return {*}
   */

  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {
    var filter, fn, args, arg, offset, i, l, j, k;
    for (i = 0, l = filters.length; i < l; i++) {
      filter = filters[write ? l - i - 1 : i];
      fn = resolveAsset(this.$options, 'filters', filter.name, true);
      if (!fn) continue;
      fn = write ? fn.write : fn.read || fn;
      if (typeof fn !== 'function') continue;
      args = write ? [value, oldValue] : [value];
      offset = write ? 2 : 1;
      if (filter.args) {
        for (j = 0, k = filter.args.length; j < k; j++) {
          arg = filter.args[j];
          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;
        }
      }
      value = fn.apply(this, args);
    }
    return value;
  };

  /**
   * Resolve a component, depending on whether the component
   * is defined normally or using an async factory function.
   * Resolves synchronously if already resolved, otherwise
   * resolves asynchronously and caches the resolved
   * constructor on the factory.
   *
   * @param {String|Function} value
   * @param {Function} cb
   */

  Vue.prototype._resolveComponent = function (value, cb) {
    var factory;
    if (typeof value === 'function') {
      factory = value;
    } else {
      factory = resolveAsset(this.$options, 'components', value, true);
    }
    /* istanbul ignore if */
    if (!factory) {
      return;
    }
    // async component factory
    if (!factory.options) {
      if (factory.resolved) {
        // cached
        cb(factory.resolved);
      } else if (factory.requested) {
        // pool callbacks
        factory.pendingCallbacks.push(cb);
      } else {
        factory.requested = true;
        var cbs = factory.pendingCallbacks = [cb];
        factory.call(this, function resolve(res) {
          if (isPlainObject(res)) {
            res = Vue.extend(res);
          }
          // cache resolved
          factory.resolved = res;
          // invoke callbacks
          for (var i = 0, l = cbs.length; i < l; i++) {
            cbs[i](res);
          }
        }, function reject(reason) {
          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\nReason: ' + reason : ''));
        });
      }
    } else {
      // normal component
      cb(factory);
    }
  };
}

var filterRE$1 = /[^|]\|[^|]/;

function dataAPI (Vue) {
  /**
   * Get the value from an expression on this vm.
   *
   * @param {String} exp
   * @param {Boolean} [asStatement]
   * @return {*}
   */

  Vue.prototype.$get = function (exp, asStatement) {
    var res = parseExpression(exp);
    if (res) {
      if (asStatement) {
        var self = this;
        return function statementHandler() {
          self.$arguments = toArray(arguments);
          var result = res.get.call(self, self);
          self.$arguments = null;
          return result;
        };
      } else {
        try {
          return res.get.call(this, this);
        } catch (e) {}
      }
    }
  };

  /**
   * Set the value from an expression on this vm.
   * The expression must be a valid left-hand
   * expression in an assignment.
   *
   * @param {String} exp
   * @param {*} val
   */

  Vue.prototype.$set = function (exp, val) {
    var res = parseExpression(exp, true);
    if (res && res.set) {
      res.set.call(this, this, val);
    }
  };

  /**
   * Delete a property on the VM
   *
   * @param {String} key
   */

  Vue.prototype.$delete = function (key) {
    del(this._data, key);
  };

  /**
   * Watch an expression, trigger callback when its
   * value changes.
   *
   * @param {String|Function} expOrFn
   * @param {Function} cb
   * @param {Object} [options]
   *                 - {Boolean} deep
   *                 - {Boolean} immediate
   * @return {Function} - unwatchFn
   */

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;
    var parsed;
    if (typeof expOrFn === 'string') {
      parsed = parseDirective(expOrFn);
      expOrFn = parsed.expression;
    }
    var watcher = new Watcher(vm, expOrFn, cb, {
      deep: options && options.deep,
      sync: options && options.sync,
      filters: parsed && parsed.filters,
      user: !options || options.user !== false
    });
    if (options && options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn() {
      watcher.teardown();
    };
  };

  /**
   * Evaluate a text directive, including filters.
   *
   * @param {String} text
   * @param {Boolean} [asStatement]
   * @return {String}
   */

  Vue.prototype.$eval = function (text, asStatement) {
    // check for filters.
    if (filterRE$1.test(text)) {
      var dir = parseDirective(text);
      // the filter regex check might give false positive
      // for pipes inside strings, so it's possible that
      // we don't get any filters here
      var val = this.$get(dir.expression, asStatement);
      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;
    } else {
      // no filter
      return this.$get(text, asStatement);
    }
  };

  /**
   * Interpolate a piece of template text.
   *
   * @param {String} text
   * @return {String}
   */

  Vue.prototype.$interpolate = function (text) {
    var tokens = parseText(text);
    var vm = this;
    if (tokens) {
      if (tokens.length === 1) {
        return vm.$eval(tokens[0].value) + '';
      } else {
        return tokens.map(function (token) {
          return token.tag ? vm.$eval(token.value) : token.value;
        }).join('');
      }
    } else {
      return text;
    }
  };

  /**
   * Log instance data as a plain JS object
   * so that it is easier to inspect in console.
   * This method assumes console is available.
   *
   * @param {String} [path]
   */

  Vue.prototype.$log = function (path) {
    var data = path ? getPath(this._data, path) : this._data;
    if (data) {
      data = clean(data);
    }
    // include computed fields
    if (!path) {
      var key;
      for (key in this.$options.computed) {
        data[key] = clean(this[key]);
      }
      if (this._props) {
        for (key in this._props) {
          data[key] = clean(this[key]);
        }
      }
    }
    console.log(data);
  };

  /**
   * "clean" a getter/setter converted object into a plain
   * object copy.
   *
   * @param {Object} - obj
   * @return {Object}
   */

  function clean(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
}

function domAPI (Vue) {
  /**
   * Convenience on-instance nextTick. The callback is
   * auto-bound to the instance, and this avoids component
   * modules having to rely on the global Vue.
   *
   * @param {Function} fn
   */

  Vue.prototype.$nextTick = function (fn) {
    nextTick(fn, this);
  };

  /**
   * Append instance to target
   *
   * @param {Node} target
   * @param {Function} [cb]
   * @param {Boolean} [withTransition] - defaults to true
   */

  Vue.prototype.$appendTo = function (target, cb, withTransition) {
    return insert(this, target, cb, withTransition, append, appendWithTransition);
  };

  /**
   * Prepend instance to target
   *
   * @param {Node} target
   * @param {Function} [cb]
   * @param {Boolean} [withTransition] - defaults to true
   */

  Vue.prototype.$prependTo = function (target, cb, withTransition) {
    target = query(target);
    if (target.hasChildNodes()) {
      this.$before(target.firstChild, cb, withTransition);
    } else {
      this.$appendTo(target, cb, withTransition);
    }
    return this;
  };

  /**
   * Insert instance before target
   *
   * @param {Node} target
   * @param {Function} [cb]
   * @param {Boolean} [withTransition] - defaults to true
   */

  Vue.prototype.$before = function (target, cb, withTransition) {
    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);
  };

  /**
   * Insert instance after target
   *
   * @param {Node} target
   * @param {Function} [cb]
   * @param {Boolean} [withTransition] - defaults to true
   */

  Vue.prototype.$after = function (target, cb, withTransition) {
    target = query(target);
    if (target.nextSibling) {
      this.$before(target.nextSibling, cb, withTransition);
    } else {
      this.$appendTo(target.parentNode, cb, withTransition);
    }
    return this;
  };

  /**
   * Remove instance from DOM
   *
   * @param {Function} [cb]
   * @param {Boolean} [withTransition] - defaults to true
   */

  Vue.prototype.$remove = function (cb, withTransition) {
    if (!this.$el.parentNode) {
      return cb && cb();
    }
    var inDocument = this._isAttached && inDoc(this.$el);
    // if we are not in document, no need to check
    // for transitions
    if (!inDocument) withTransition = false;
    var self = this;
    var realCb = function realCb() {
      if (inDocument) self._callHook('detached');
      if (cb) cb();
    };
    if (this._isFragment) {
      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);
    } else {
      var op = withTransition === false ? removeWithCb : removeWithTransition;
      op(this.$el, this, realCb);
    }
    return this;
  };

  /**
   * Shared DOM insertion function.
   *
   * @param {Vue} vm
   * @param {Element} target
   * @param {Function} [cb]
   * @param {Boolean} [withTransition]
   * @param {Function} op1 - op for non-transition insert
   * @param {Function} op2 - op for transition insert
   * @return vm
   */

  function insert(vm, target, cb, withTransition, op1, op2) {
    target = query(target);
    var targetIsDetached = !inDoc(target);
    var op = withTransition === false || targetIsDetached ? op1 : op2;
    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);
    if (vm._isFragment) {
      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {
        op(node, target, vm);
      });
      cb && cb();
    } else {
      op(vm.$el, target, vm, cb);
    }
    if (shouldCallHook) {
      vm._callHook('attached');
    }
    return vm;
  }

  /**
   * Check for selectors
   *
   * @param {String|Element} el
   */

  function query(el) {
    return typeof el === 'string' ? document.querySelector(el) : el;
  }

  /**
   * Append operation that takes a callback.
   *
   * @param {Node} el
   * @param {Node} target
   * @param {Vue} vm - unused
   * @param {Function} [cb]
   */

  function append(el, target, vm, cb) {
    target.appendChild(el);
    if (cb) cb();
  }

  /**
   * InsertBefore operation that takes a callback.
   *
   * @param {Node} el
   * @param {Node} target
   * @param {Vue} vm - unused
   * @param {Function} [cb]
   */

  function beforeWithCb(el, target, vm, cb) {
    before(el, target);
    if (cb) cb();
  }

  /**
   * Remove operation that takes a callback.
   *
   * @param {Node} el
   * @param {Vue} vm - unused
   * @param {Function} [cb]
   */

  function removeWithCb(el, vm, cb) {
    remove(el);
    if (cb) cb();
  }
}

function eventsAPI (Vue) {
  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   */

  Vue.prototype.$on = function (event, fn) {
    (this._events[event] || (this._events[event] = [])).push(fn);
    modifyListenerCount(this, event, 1);
    return this;
  };

  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   */

  Vue.prototype.$once = function (event, fn) {
    var self = this;
    function on() {
      self.$off(event, on);
      fn.apply(this, arguments);
    }
    on.fn = fn;
    this.$on(event, on);
    return this;
  };

  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   */

  Vue.prototype.$off = function (event, fn) {
    var cbs;
    // all
    if (!arguments.length) {
      if (this.$parent) {
        for (event in this._events) {
          cbs = this._events[event];
          if (cbs) {
            modifyListenerCount(this, event, -cbs.length);
          }
        }
      }
      this._events = {};
      return this;
    }
    // specific event
    cbs = this._events[event];
    if (!cbs) {
      return this;
    }
    if (arguments.length === 1) {
      modifyListenerCount(this, event, -cbs.length);
      this._events[event] = null;
      return this;
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        modifyListenerCount(this, event, -1);
        cbs.splice(i, 1);
        break;
      }
    }
    return this;
  };

  /**
   * Trigger an event on self.
   *
   * @param {String|Object} event
   * @return {Boolean} shouldPropagate
   */

  Vue.prototype.$emit = function (event) {
    var isSource = typeof event === 'string';
    event = isSource ? event : event.name;
    var cbs = this._events[event];
    var shouldPropagate = isSource || !cbs;
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      // this is a somewhat hacky solution to the question raised
      // in #2102: for an inline component listener like <comp @test="doThis">,
      // the propagation handling is somewhat broken. Therefore we
      // need to treat these inline callbacks differently.
      var hasParentCbs = isSource && cbs.some(function (cb) {
        return cb._fromParent;
      });
      if (hasParentCbs) {
        shouldPropagate = false;
      }
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        var cb = cbs[i];
        var res = cb.apply(this, args);
        if (res === true && (!hasParentCbs || cb._fromParent)) {
          shouldPropagate = true;
        }
      }
    }
    return shouldPropagate;
  };

  /**
   * Recursively broadcast an event to all children instances.
   *
   * @param {String|Object} event
   * @param {...*} additional arguments
   */

  Vue.prototype.$broadcast = function (event) {
    var isSource = typeof event === 'string';
    event = isSource ? event : event.name;
    // if no child has registered for this event,
    // then there's no need to broadcast.
    if (!this._eventsCount[event]) return;
    var children = this.$children;
    var args = toArray(arguments);
    if (isSource) {
      // use object event to indicate non-source emit
      // on children
      args[0] = { name: event, source: this };
    }
    for (var i = 0, l = children.length; i < l; i++) {
      var child = children[i];
      var shouldPropagate = child.$emit.apply(child, args);
      if (shouldPropagate) {
        child.$broadcast.apply(child, args);
      }
    }
    return this;
  };

  /**
   * Recursively propagate an event up the parent chain.
   *
   * @param {String} event
   * @param {...*} additional arguments
   */

  Vue.prototype.$dispatch = function (event) {
    var shouldPropagate = this.$emit.apply(this, arguments);
    if (!shouldPropagate) return;
    var parent = this.$parent;
    var args = toArray(arguments);
    // use object event to indicate non-source emit
    // on parents
    args[0] = { name: event, source: this };
    while (parent) {
      shouldPropagate = parent.$emit.apply(parent, args);
      parent = shouldPropagate ? parent.$parent : null;
    }
    return this;
  };

  /**
   * Modify the listener counts on all parents.
   * This bookkeeping allows $broadcast to return early when
   * no child has listened to a certain event.
   *
   * @param {Vue} vm
   * @param {String} event
   * @param {Number} count
   */

  var hookRE = /^hook:/;
  function modifyListenerCount(vm, event, count) {
    var parent = vm.$parent;
    // hooks do not get broadcasted so no need
    // to do bookkeeping for them
    if (!parent || !count || hookRE.test(event)) return;
    while (parent) {
      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;
      parent = parent.$parent;
    }
  }
}

function lifecycleAPI (Vue) {
  /**
   * Set instance target element and kick off the compilation
   * process. The passed in `el` can be a selector string, an
   * existing Element, or a DocumentFragment (for block
   * instances).
   *
   * @param {Element|DocumentFragment|string} el
   * @public
   */

  Vue.prototype.$mount = function (el) {
    if (this._isCompiled) {
      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);
      return;
    }
    el = query(el);
    if (!el) {
      el = document.createElement('div');
    }
    this._compile(el);
    this._initDOMHooks();
    if (inDoc(this.$el)) {
      this._callHook('attached');
      ready.call(this);
    } else {
      this.$once('hook:attached', ready);
    }
    return this;
  };

  /**
   * Mark an instance as ready.
   */

  function ready() {
    this._isAttached = true;
    this._isReady = true;
    this._callHook('ready');
  }

  /**
   * Teardown the instance, simply delegate to the internal
   * _destroy.
   *
   * @param {Boolean} remove
   * @param {Boolean} deferCleanup
   */

  Vue.prototype.$destroy = function (remove, deferCleanup) {
    this._destroy(remove, deferCleanup);
  };

  /**
   * Partially compile a piece of DOM and return a
   * decompile function.
   *
   * @param {Element|DocumentFragment} el
   * @param {Vue} [host]
   * @param {Object} [scope]
   * @param {Fragment} [frag]
   * @return {Function}
   */

  Vue.prototype.$compile = function (el, host, scope, frag) {
    return compile(el, this.$options, true)(this, el, host, scope, frag);
  };
}

/**
 * The exposed Vue constructor.
 *
 * API conventions:
 * - public API methods/properties are prefixed with `$`
 * - internal methods/properties are prefixed with `_`
 * - non-prefixed properties are assumed to be proxied user
 *   data.
 *
 * @constructor
 * @param {Object} [options]
 * @public
 */

function Vue(options) {
  this._init(options);
}

// install internals
initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
miscMixin(Vue);

// install instance APIs
dataAPI(Vue);
domAPI(Vue);
eventsAPI(Vue);
lifecycleAPI(Vue);

var slot = {

  priority: SLOT,
  params: ['name'],

  bind: function bind() {
    // this was resolved during component transclusion
    var name = this.params.name || 'default';
    var content = this.vm._slotContents && this.vm._slotContents[name];
    if (!content || !content.hasChildNodes()) {
      this.fallback();
    } else {
      this.compile(content.cloneNode(true), this.vm._context, this.vm);
    }
  },

  compile: function compile(content, context, host) {
    if (content && context) {
      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {
        // if the inserted slot has v-if
        // inject fallback content as the v-else
        var elseBlock = document.createElement('template');
        elseBlock.setAttribute('v-else', '');
        elseBlock.innerHTML = this.el.innerHTML;
        // the else block should be compiled in child scope
        elseBlock._context = this.vm;
        content.appendChild(elseBlock);
      }
      var scope = host ? host._scope : this._scope;
      this.unlink = context.$compile(content, host, scope, this._frag);
    }
    if (content) {
      replace(this.el, content);
    } else {
      remove(this.el);
    }
  },

  fallback: function fallback() {
    this.compile(extractContent(this.el, true), this.vm);
  },

  unbind: function unbind() {
    if (this.unlink) {
      this.unlink();
    }
  }
};

var partial = {

  priority: PARTIAL,

  params: ['name'],

  // watch changes to name for dynamic partials
  paramWatchers: {
    name: function name(value) {
      vIf.remove.call(this);
      if (value) {
        this.insert(value);
      }
    }
  },

  bind: function bind() {
    this.anchor = createAnchor('v-partial');
    replace(this.el, this.anchor);
    this.insert(this.params.name);
  },

  insert: function insert(id) {
    var partial = resolveAsset(this.vm.$options, 'partials', id, true);
    if (partial) {
      this.factory = new FragmentFactory(this.vm, partial);
      vIf.insert.call(this);
    }
  },

  unbind: function unbind() {
    if (this.frag) {
      this.frag.destroy();
    }
  }
};

var elementDirectives = {
  slot: slot,
  partial: partial
};

var convertArray = vFor._postProcess;

/**
 * Limit filter for arrays
 *
 * @param {Number} n
 * @param {Number} offset (Decimal expected)
 */

function limitBy(arr, n, offset) {
  offset = offset ? parseInt(offset, 10) : 0;
  n = toNumber(n);
  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;
}

/**
 * Filter filter for arrays
 *
 * @param {String} search
 * @param {String} [delimiter]
 * @param {String} ...dataKeys
 */

function filterBy(arr, search, delimiter) {
  arr = convertArray(arr);
  if (search == null) {
    return arr;
  }
  if (typeof search === 'function') {
    return arr.filter(search);
  }
  // cast to lowercase string
  search = ('' + search).toLowerCase();
  // allow optional `in` delimiter
  // because why not
  var n = delimiter === 'in' ? 3 : 2;
  // extract and flatten keys
  var keys = Array.prototype.concat.apply([], toArray(arguments, n));
  var res = [];
  var item, key, val, j;
  for (var i = 0, l = arr.length; i < l; i++) {
    item = arr[i];
    val = item && item.$value || item;
    j = keys.length;
    if (j) {
      while (j--) {
        key = keys[j];
        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {
          res.push(item);
          break;
        }
      }
    } else if (contains(item, search)) {
      res.push(item);
    }
  }
  return res;
}

/**
 * Filter filter for arrays
 *
 * @param {String|Array<String>|Function} ...sortKeys
 * @param {Number} [order]
 */

function orderBy(arr) {
  var comparator = null;
  var sortKeys = undefined;
  arr = convertArray(arr);

  // determine order (last argument)
  var args = toArray(arguments, 1);
  var order = args[args.length - 1];
  if (typeof order === 'number') {
    order = order < 0 ? -1 : 1;
    args = args.length > 1 ? args.slice(0, -1) : args;
  } else {
    order = 1;
  }

  // determine sortKeys & comparator
  var firstArg = args[0];
  if (!firstArg) {
    return arr;
  } else if (typeof firstArg === 'function') {
    // custom comparator
    comparator = function (a, b) {
      return firstArg(a, b) * order;
    };
  } else {
    // string keys. flatten first
    sortKeys = Array.prototype.concat.apply([], args);
    comparator = function (a, b, i) {
      i = i || 0;
      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);
    };
  }

  function baseCompare(a, b, sortKeyIndex) {
    var sortKey = sortKeys[sortKeyIndex];
    if (sortKey) {
      if (sortKey !== '$key') {
        if (isObject(a) && '$value' in a) a = a.$value;
        if (isObject(b) && '$value' in b) b = b.$value;
      }
      a = isObject(a) ? getPath(a, sortKey) : a;
      b = isObject(b) ? getPath(b, sortKey) : b;
    }
    return a === b ? 0 : a > b ? order : -order;
  }

  // sort on a copy to avoid mutating original array
  return arr.slice().sort(comparator);
}

/**
 * String contain helper
 *
 * @param {*} val
 * @param {String} search
 */

function contains(val, search) {
  var i;
  if (isPlainObject(val)) {
    var keys = Object.keys(val);
    i = keys.length;
    while (i--) {
      if (contains(val[keys[i]], search)) {
        return true;
      }
    }
  } else if (isArray(val)) {
    i = val.length;
    while (i--) {
      if (contains(val[i], search)) {
        return true;
      }
    }
  } else if (val != null) {
    return val.toString().toLowerCase().indexOf(search) > -1;
  }
}

var digitsRE = /(\d{3})(?=\d)/g;

// asset collections must be a plain object.
var filters = {

  orderBy: orderBy,
  filterBy: filterBy,
  limitBy: limitBy,

  /**
   * Stringify value.
   *
   * @param {Number} indent
   */

  json: {
    read: function read(value, indent) {
      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);
    },
    write: function write(value) {
      try {
        return JSON.parse(value);
      } catch (e) {
        return value;
      }
    }
  },

  /**
   * 'abc' => 'Abc'
   */

  capitalize: function capitalize(value) {
    if (!value && value !== 0) return '';
    value = value.toString();
    return value.charAt(0).toUpperCase() + value.slice(1);
  },

  /**
   * 'abc' => 'ABC'
   */

  uppercase: function uppercase(value) {
    return value || value === 0 ? value.toString().toUpperCase() : '';
  },

  /**
   * 'AbC' => 'abc'
   */

  lowercase: function lowercase(value) {
    return value || value === 0 ? value.toString().toLowerCase() : '';
  },

  /**
   * 12345 => $12,345.00
   *
   * @param {String} sign
   * @param {Number} decimals Decimal places
   */

  currency: function currency(value, _currency, decimals) {
    value = parseFloat(value);
    if (!isFinite(value) || !value && value !== 0) return '';
    _currency = _currency != null ? _currency : '$';
    decimals = decimals != null ? decimals : 2;
    var stringified = Math.abs(value).toFixed(decimals);
    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;
    var i = _int.length % 3;
    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';
    var _float = decimals ? stringified.slice(-1 - decimals) : '';
    var sign = value < 0 ? '-' : '';
    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;
  },

  /**
   * 'item' => 'items'
   *
   * @params
   *  an array of strings corresponding to
   *  the single, double, triple ... forms of the word to
   *  be pluralized. When the number to be pluralized
   *  exceeds the length of the args, it will use the last
   *  entry in the array.
   *
   *  e.g. ['single', 'double', 'triple', 'multiple']
   */

  pluralize: function pluralize(value) {
    var args = toArray(arguments, 1);
    var length = args.length;
    if (length > 1) {
      var index = value % 10 - 1;
      return index in args ? args[index] : args[length - 1];
    } else {
      return args[0] + (value === 1 ? '' : 's');
    }
  },

  /**
   * Debounce a handler function.
   *
   * @param {Function} handler
   * @param {Number} delay = 300
   * @return {Function}
   */

  debounce: function debounce(handler, delay) {
    if (!handler) return;
    if (!delay) {
      delay = 300;
    }
    return _debounce(handler, delay);
  }
};

function installGlobalAPI (Vue) {
  /**
   * Vue and every constructor that extends Vue has an
   * associated options object, which can be accessed during
   * compilation steps as `this.constructor.options`.
   *
   * These can be seen as the default options of every
   * Vue instance.
   */

  Vue.options = {
    directives: directives,
    elementDirectives: elementDirectives,
    filters: filters,
    transitions: {},
    components: {},
    partials: {},
    replace: true
  };

  /**
   * Expose useful internals
   */

  Vue.util = util;
  Vue.config = config;
  Vue.set = set;
  Vue['delete'] = del;
  Vue.nextTick = nextTick;

  /**
   * The following are exposed for advanced usage / plugins
   */

  Vue.compiler = compiler;
  Vue.FragmentFactory = FragmentFactory;
  Vue.internalDirectives = internalDirectives;
  Vue.parsers = {
    path: path,
    text: text,
    template: template,
    directive: directive,
    expression: expression
  };

  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */

  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   *
   * @param {Object} extendOptions
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var isFirstExtend = Super.cid === 0;
    if (isFirstExtend && extendOptions._Ctor) {
      return extendOptions._Ctor;
    }
    var name = extendOptions.name || Super.options.name;
    if (process.env.NODE_ENV !== 'production') {
      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
        warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');
        name = null;
      }
    }
    var Sub = createClass(name || 'VueComponent');
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super;
    // allow further extension
    Sub.extend = Super.extend;
    // create asset registers, so extended classes
    // can have their private assets too.
    config._assetTypes.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }
    // cache constructor
    if (isFirstExtend) {
      extendOptions._Ctor = Sub;
    }
    return Sub;
  };

  /**
   * A function that returns a sub-class constructor with the
   * given name. This gives us much nicer output when
   * logging instances in the console.
   *
   * @param {String} name
   * @return {Function}
   */

  function createClass(name) {
    /* eslint-disable no-new-func */
    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();
    /* eslint-enable no-new-func */
  }

  /**
   * Plugin system
   *
   * @param {Object} plugin
   */

  Vue.use = function (plugin) {
    /* istanbul ignore if */
    if (plugin.installed) {
      return;
    }
    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else {
      plugin.apply(null, args);
    }
    plugin.installed = true;
    return this;
  };

  /**
   * Apply a global mixin by merging it into the default
   * options.
   */

  Vue.mixin = function (mixin) {
    Vue.options = mergeOptions(Vue.options, mixin);
  };

  /**
   * Create asset registration methods with the following
   * signature:
   *
   * @param {String} id
   * @param {*} definition
   */

  config._assetTypes.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production') {
          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {
            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
          }
        }
        if (type === 'component' && isPlainObject(definition)) {
          if (!definition.name) {
            definition.name = id;
          }
          definition = Vue.extend(definition);
        }
        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });

  // expose internal transition API
  extend(Vue.transition, transition);
}

installGlobalAPI(Vue);

Vue.version = '1.0.26';

// devtools global hook
/* istanbul ignore next */
setTimeout(function () {
  if (config.devtools) {
    if (devtools) {
      devtools.emit('init', Vue);
    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\/\d+/.test(window.navigator.userAgent)) {
      console.log('Download the Vue Devtools for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
    }
  }
}, 0);

module.exports = Vue;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":22}],31:[function(require,module,exports){
var inserted = exports.cache = {}

exports.insert = function (css) {
  if (inserted[css]) return
  inserted[css] = true

  var elem = document.createElement('style')
  elem.setAttribute('type', 'text/css')

  if ('textContent' in elem) {
    elem.textContent = css
  } else {
    elem.styleSheet.cssText = css
  }

  document.getElementsByTagName('head')[0].appendChild(elem)
  return elem
}

},{}],32:[function(require,module,exports){
'use strict';

var _vueResource = require('vue-resource');

var _vueResource2 = _interopRequireDefault(_vueResource);

var _routeConfig = require('./route-config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Vue = require('vue');
var VueRouter = require('vue-router');
var VueValidator = require('vue-validator');
var Keen = require('keen-ui');

Vue.use(_vueResource2.default);
Vue.use(VueRouter);
Vue.use(VueValidator);
Vue.use(Keen);
Vue.use(require('vue-moment'));

Vue.http.headers.common['X-CSRF-TOKEN'] = document.getElementById('token').getAttribute('content');
Vue.validator('email', function (val) {
  return (/^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(val)
  );
});

Vue.validator('url', function (val) {
  return (/^(http\:\/\/|https\:\/\/)(.{4,})$/.test(val)
  );
});

Vue.validator('number', function (val) {
  return (/^[-+]?[0-9]+$/.test(val)
  );
});

// import store from './vuex/store.js';


var router = new VueRouter({
  //history: true,
  //saveScrollPosition: true
});

(0, _routeConfig.configRouter)(router);

router.start({}, '#app');

},{"./route-config":33,"keen-ui":20,"vue":30,"vue-moment":26,"vue-resource":27,"vue-router":28,"vue-validator":29}],33:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
		value: true
});
exports.configRouter = configRouter;
function configRouter(router) {

		// normal routes
		router.map({

				'/accounts': { component: require('./spaces/Web/Account/list.vue') },
				'/accounts/create': { component: require('./spaces/Web/Account/form.vue') },
				'/accounts/:id': { component: require('./spaces/Web/Account/edit.vue') },

				'/bugs': { component: require('./spaces/Web/Bug/list.vue') },
				'/bugs/create': { component: require('./spaces/Web/Bug/form.vue') },
				'/bugs/:id': { component: require('./spaces/Web/Bug/edit.vue') },

				'/clients': { component: require('./spaces/Web/Client/list.vue') },
				'/clients/create': { component: require('./spaces/Web/Client/form.vue') },
				'/clients/:id': { component: require('./spaces/Web/Client/edit.vue') },

				'/companiecateories': { component: require('./spaces/Web/Companiecateory/list.vue') },
				'/companiecateories/create': { component: require('./spaces/Web/Companiecateory/form.vue') },
				'/companiecateories/:id': { component: require('./spaces/Web/Companiecateory/edit.vue') },

				'/companies': { component: require('./spaces/Web/Company/list.vue') },
				'/companies/create': { component: require('./spaces/Web/Company/form.vue') },
				'/companies/:id': { component: require('./spaces/Web/Company/edit.vue') },

				'/contactables': { component: require('./spaces/Web/Contactable/list.vue') },
				'/contactables/create': { component: require('./spaces/Web/Contactable/form.vue') },
				'/contactables/:id': { component: require('./spaces/Web/Contactable/edit.vue') },

				'/contactactivity': { component: require('./spaces/Web/Contactactivity/list.vue') },
				'/contactactivity/create': { component: require('./spaces/Web/Contactactivity/form.vue') },
				'/contactactivity/:id': { component: require('./spaces/Web/Contactactivity/edit.vue') },

				'/contactcompany': { component: require('./spaces/Web/Contactcompany/list.vue') },
				'/contactcompany/create': { component: require('./spaces/Web/Contactcompany/form.vue') },
				'/contactcompany/:id': { component: require('./spaces/Web/Contactcompany/edit.vue') },

				'/contacts': { component: require('./spaces/Web/Contact/list.vue') },
				'/contacts/create': { component: require('./spaces/Web/Contact/form.vue') },
				'/contacts/:id': { component: require('./spaces/Web/Contact/edit.vue') },

				'/contactssociete': { component: require('./spaces/Web/Contactssociete/list.vue') },
				'/contactssociete/create': { component: require('./spaces/Web/Contactssociete/form.vue') },
				'/contactssociete/:id': { component: require('./spaces/Web/Contactssociete/edit.vue') },

				'/contactsuser': { component: require('./spaces/Web/Contactsuser/list.vue') },
				'/contactsuser/create': { component: require('./spaces/Web/Contactsuser/form.vue') },
				'/contactsuser/:id': { component: require('./spaces/Web/Contactsuser/edit.vue') },

				'/currencies': { component: require('./spaces/Web/Currency/list.vue') },
				'/currencies/create': { component: require('./spaces/Web/Currency/form.vue') },
				'/currencies/:id': { component: require('./spaces/Web/Currency/edit.vue') },

				'/dealables': { component: require('./spaces/Web/Dealable/list.vue') },
				'/dealables/create': { component: require('./spaces/Web/Dealable/form.vue') },
				'/dealables/:id': { component: require('./spaces/Web/Dealable/edit.vue') },

				'/deals': { component: require('./spaces/Web/Deal/list.vue') },
				'/deals/create': { component: require('./spaces/Web/Deal/form.vue') },
				'/deals/:id': { component: require('./spaces/Web/Deal/edit.vue') },

				'/dealscategories': { component: require('./spaces/Web/Dealscategory/list.vue') },
				'/dealscategories/create': { component: require('./spaces/Web/Dealscategory/form.vue') },
				'/dealscategories/:id': { component: require('./spaces/Web/Dealscategory/edit.vue') },

				'/dealsfcf': { component: require('./spaces/Web/Dealsfcf/list.vue') },
				'/dealsfcf/create': { component: require('./spaces/Web/Dealsfcf/form.vue') },
				'/dealsfcf/:id': { component: require('./spaces/Web/Dealsfcf/edit.vue') },

				'/dealspartners': { component: require('./spaces/Web/Dealspartner/list.vue') },
				'/dealspartners/create': { component: require('./spaces/Web/Dealspartner/form.vue') },
				'/dealspartners/:id': { component: require('./spaces/Web/Dealspartner/edit.vue') },

				'/dealsstage': { component: require('./spaces/Web/Dealsstage/list.vue') },
				'/dealsstage/create': { component: require('./spaces/Web/Dealsstage/form.vue') },
				'/dealsstage/:id': { component: require('./spaces/Web/Dealsstage/edit.vue') },

				'/dealsstatus': { component: require('./spaces/Web/Dealsstatus/list.vue') },
				'/dealsstatus/create': { component: require('./spaces/Web/Dealsstatus/form.vue') },
				'/dealsstatus/:id': { component: require('./spaces/Web/Dealsstatus/edit.vue') },

				'/dealsterms': { component: require('./spaces/Web/Dealsterm/list.vue') },
				'/dealsterms/create': { component: require('./spaces/Web/Dealsterm/form.vue') },
				'/dealsterms/:id': { component: require('./spaces/Web/Dealsterm/edit.vue') },

				'/dealsuser': { component: require('./spaces/Web/Dealsuser/list.vue') },
				'/dealsuser/create': { component: require('./spaces/Web/Dealsuser/form.vue') },
				'/dealsuser/:id': { component: require('./spaces/Web/Dealsuser/edit.vue') },

				'/dealsyear': { component: require('./spaces/Web/Dealsyear/list.vue') },
				'/dealsyear/create': { component: require('./spaces/Web/Dealsyear/form.vue') },
				'/dealsyear/:id': { component: require('./spaces/Web/Dealsyear/edit.vue') },

				'/dealworker': { component: require('./spaces/Web/Dealworker/list.vue') },
				'/dealworker/create': { component: require('./spaces/Web/Dealworker/form.vue') },
				'/dealworker/:id': { component: require('./spaces/Web/Dealworker/edit.vue') },

				'/documentables': { component: require('./spaces/Web/Documentable/list.vue') },
				'/documentables/create': { component: require('./spaces/Web/Documentable/form.vue') },
				'/documentables/:id': { component: require('./spaces/Web/Documentable/edit.vue') },

				'/documents': { component: require('./spaces/Web/Document/list.vue') },
				'/documents/create': { component: require('./spaces/Web/Document/form.vue') },
				'/documents/:id': { component: require('./spaces/Web/Document/edit.vue') },

				'/families': { component: require('./spaces/Web/Family/list.vue') },
				'/families/create': { component: require('./spaces/Web/Family/form.vue') },
				'/families/:id': { component: require('./spaces/Web/Family/edit.vue') },

				'/fcf': { component: require('./spaces/Web/Fcf/list.vue') },
				'/fcf/create': { component: require('./spaces/Web/Fcf/form.vue') },
				'/fcf/:id': { component: require('./spaces/Web/Fcf/edit.vue') },

				'/fund': { component: require('./spaces/Web/Fund/list.vue') },
				'/fund/create': { component: require('./spaces/Web/Fund/form.vue') },
				'/fund/:id': { component: require('./spaces/Web/Fund/edit.vue') },

				'/meetingables': { component: require('./spaces/Web/Meetingable/list.vue') },
				'/meetingables/create': { component: require('./spaces/Web/Meetingable/form.vue') },
				'/meetingables/:id': { component: require('./spaces/Web/Meetingable/edit.vue') },

				'/meetings': { component: require('./spaces/Web/Meeting/list.vue') },
				'/meetings/create': { component: require('./spaces/Web/Meeting/form.vue') },
				'/meetings/:id': { component: require('./spaces/Web/Meeting/edit.vue') },

				'/meetingstypes': { component: require('./spaces/Web/Meetingstype/list.vue') },
				'/meetingstypes/create': { component: require('./spaces/Web/Meetingstype/form.vue') },
				'/meetingstypes/:id': { component: require('./spaces/Web/Meetingstype/edit.vue') },

				'/migrations': { component: require('./spaces/Web/Migration/list.vue') },
				'/migrations/create': { component: require('./spaces/Web/Migration/form.vue') },
				'/migrations/:id': { component: require('./spaces/Web/Migration/edit.vue') },

				'/operation_types': { component: require('./spaces/Web/OperationType/list.vue') },
				'/operation_types/create': { component: require('./spaces/Web/OperationType/form.vue') },
				'/operation_types/:id': { component: require('./spaces/Web/OperationType/edit.vue') },

				'/operations': { component: require('./spaces/Web/Operation/list.vue') },
				'/operations/create': { component: require('./spaces/Web/Operation/form.vue') },
				'/operations/:id': { component: require('./spaces/Web/Operation/edit.vue') },

				'/partners': { component: require('./spaces/Web/Partner/list.vue') },
				'/partners/create': { component: require('./spaces/Web/Partner/form.vue') },
				'/partners/:id': { component: require('./spaces/Web/Partner/edit.vue') },

				'/password_resets': { component: require('./spaces/Web/PasswordReset/list.vue') },
				'/password_resets/create': { component: require('./spaces/Web/PasswordReset/form.vue') },
				'/password_resets/:id': { component: require('./spaces/Web/PasswordReset/edit.vue') },

				'/performances': { component: require('./spaces/Web/Performance/list.vue') },
				'/performances/create': { component: require('./spaces/Web/Performance/form.vue') },
				'/performances/:id': { component: require('./spaces/Web/Performance/edit.vue') },

				'/permission_role': { component: require('./spaces/Web/Permission_role/list.vue') },
				'/permission_role/create': { component: require('./spaces/Web/Permission_role/form.vue') },
				'/permission_role/:id': { component: require('./spaces/Web/Permission_role/edit.vue') },

				'/permissions': { component: require('./spaces/Web/Permission/list.vue') },
				'/permissions/create': { component: require('./spaces/Web/Permission/form.vue') },
				'/permissions/:id': { component: require('./spaces/Web/Permission/edit.vue') },

				'/profiles': { component: require('./spaces/Web/Profile/list.vue') },
				'/profiles/create': { component: require('./spaces/Web/Profile/form.vue') },
				'/profiles/:id': { component: require('./spaces/Web/Profile/edit.vue') },

				'/providers': { component: require('./spaces/Web/Provider/list.vue') },
				'/providers/create': { component: require('./spaces/Web/Provider/form.vue') },
				'/providers/:id': { component: require('./spaces/Web/Provider/edit.vue') },

				'/regions': { component: require('./spaces/Web/Region/list.vue') },
				'/regions/create': { component: require('./spaces/Web/Region/form.vue') },
				'/regions/:id': { component: require('./spaces/Web/Region/edit.vue') },

				'/role_user': { component: require('./spaces/Web/Role_user/list.vue') },
				'/role_user/create': { component: require('./spaces/Web/Role_user/form.vue') },
				'/role_user/:id': { component: require('./spaces/Web/Role_user/edit.vue') },

				'/roles': { component: require('./spaces/Web/Role/list.vue') },
				'/roles/create': { component: require('./spaces/Web/Role/form.vue') },
				'/roles/:id': { component: require('./spaces/Web/Role/edit.vue') },

				'/share_valuations': { component: require('./spaces/Web/ShareValuation/list.vue') },
				'/share_valuations/create': { component: require('./spaces/Web/ShareValuation/form.vue') },
				'/share_valuations/:id': { component: require('./spaces/Web/ShareValuation/edit.vue') },

				'/shares': { component: require('./spaces/Web/Share/list.vue') },
				'/shares/create': { component: require('./spaces/Web/Share/form.vue') },
				'/shares/:id': { component: require('./spaces/Web/Share/edit.vue') },

				'/subscriptions': { component: require('./spaces/Web/Subscription/list.vue') },
				'/subscriptions/create': { component: require('./spaces/Web/Subscription/form.vue') },
				'/subscriptions/:id': { component: require('./spaces/Web/Subscription/edit.vue') },

				'/taskables': { component: require('./spaces/Web/Taskable/list.vue') },
				'/taskables/create': { component: require('./spaces/Web/Taskable/form.vue') },
				'/taskables/:id': { component: require('./spaces/Web/Taskable/edit.vue') },

				'/tasks': { component: require('./spaces/Web/Task/list.vue') },
				'/tasks/create': { component: require('./spaces/Web/Task/form.vue') },
				'/tasks/:id': { component: require('./spaces/Web/Task/edit.vue') },

				'/team': { component: require('./spaces/Web/Team/list.vue') },
				'/team/create': { component: require('./spaces/Web/Team/form.vue') },
				'/team/:id': { component: require('./spaces/Web/Team/edit.vue') },

				'/teamusers': { component: require('./spaces/Web/Teamuser/list.vue') },
				'/teamusers/create': { component: require('./spaces/Web/Teamuser/form.vue') },
				'/teamusers/:id': { component: require('./spaces/Web/Teamuser/edit.vue') },

				'/tokens': { component: require('./spaces/Web/Token/list.vue') },
				'/tokens/create': { component: require('./spaces/Web/Token/form.vue') },
				'/tokens/:id': { component: require('./spaces/Web/Token/edit.vue') },

				'/updates': { component: require('./spaces/Web/Update/list.vue') },
				'/updates/create': { component: require('./spaces/Web/Update/form.vue') },
				'/updates/:id': { component: require('./spaces/Web/Update/edit.vue') },

				'/userables': { component: require('./spaces/Web/Userable/list.vue') },
				'/userables/create': { component: require('./spaces/Web/Userable/form.vue') },
				'/userables/:id': { component: require('./spaces/Web/Userable/edit.vue') },

				'/users': { component: require('./spaces/Web/User/list.vue') },
				'/users/create': { component: require('./spaces/Web/User/form.vue') },
				'/users/:id': { component: require('./spaces/Web/User/edit.vue') },

				'/vehicles': { component: require('./spaces/Web/Vehicle/list.vue') },
				'/vehicles/create': { component: require('./spaces/Web/Vehicle/form.vue') },
				'/vehicles/:id': { component: require('./spaces/Web/Vehicle/edit.vue') },

				'/vehicles_currencies_allotments': { component: require('./spaces/Web/VehiclesCurrenciesAllotment/list.vue') },
				'/vehicles_currencies_allotments/create': { component: require('./spaces/Web/VehiclesCurrenciesAllotment/form.vue') },
				'/vehicles_currencies_allotments/:id': { component: require('./spaces/Web/VehiclesCurrenciesAllotment/edit.vue') },

				'/vehicles_regions_allotments': { component: require('./spaces/Web/VehiclesRegionsAllotment/list.vue') },
				'/vehicles_regions_allotments/create': { component: require('./spaces/Web/VehiclesRegionsAllotment/form.vue') },
				'/vehicles_regions_allotments/:id': { component: require('./spaces/Web/VehiclesRegionsAllotment/edit.vue') },

				'/vehicles_risks_allotments': { component: require('./spaces/Web/VehiclesRisksAllotment/list.vue') },
				'/vehicles_risks_allotments/create': { component: require('./spaces/Web/VehiclesRisksAllotment/form.vue') },
				'/vehicles_risks_allotments/:id': { component: require('./spaces/Web/VehiclesRisksAllotment/edit.vue') },

				'/vehicle_types': { component: require('./spaces/Web/VehicleType/list.vue') },
				'/vehicle_types/create': { component: require('./spaces/Web/VehicleType/form.vue') },
				'/vehicle_types/:id': { component: require('./spaces/Web/VehicleType/edit.vue') }

		});

		// redirect
		router.redirect({
				'/info': '/about',
				'/hello/:userId': '/user/:userId'
		});

		// global before
		// 3 options:
		// 1. return a boolean
		// 2. return a Promise that resolves to a boolean
		// 3. call transition.next() or transition.abort()
		/*
  router.beforeEach((transition) => {
    if (transition.to.path === '/forbidden') {
      router.app.authenticating = true
      setTimeout(() => {
        router.app.authenticating = false
        alert('this route is forbidden by a global before hook')
        transition.abort()
      }, 3000)
    } else {
      transition.next()
    }
  })
  */
}

},{"./spaces/Web/Account/edit.vue":34,"./spaces/Web/Account/form.vue":35,"./spaces/Web/Account/list.vue":36,"./spaces/Web/Bug/edit.vue":37,"./spaces/Web/Bug/form.vue":38,"./spaces/Web/Bug/list.vue":39,"./spaces/Web/Client/edit.vue":40,"./spaces/Web/Client/form.vue":41,"./spaces/Web/Client/list.vue":42,"./spaces/Web/Companiecateory/edit.vue":43,"./spaces/Web/Companiecateory/form.vue":44,"./spaces/Web/Companiecateory/list.vue":45,"./spaces/Web/Company/edit.vue":46,"./spaces/Web/Company/form.vue":47,"./spaces/Web/Company/list.vue":48,"./spaces/Web/Contact/edit.vue":49,"./spaces/Web/Contact/form.vue":50,"./spaces/Web/Contact/list.vue":51,"./spaces/Web/Contactable/edit.vue":52,"./spaces/Web/Contactable/form.vue":53,"./spaces/Web/Contactable/list.vue":54,"./spaces/Web/Contactactivity/edit.vue":55,"./spaces/Web/Contactactivity/form.vue":56,"./spaces/Web/Contactactivity/list.vue":57,"./spaces/Web/Contactcompany/edit.vue":58,"./spaces/Web/Contactcompany/form.vue":59,"./spaces/Web/Contactcompany/list.vue":60,"./spaces/Web/Contactssociete/edit.vue":61,"./spaces/Web/Contactssociete/form.vue":62,"./spaces/Web/Contactssociete/list.vue":63,"./spaces/Web/Contactsuser/edit.vue":64,"./spaces/Web/Contactsuser/form.vue":65,"./spaces/Web/Contactsuser/list.vue":66,"./spaces/Web/Currency/edit.vue":67,"./spaces/Web/Currency/form.vue":68,"./spaces/Web/Currency/list.vue":69,"./spaces/Web/Deal/edit.vue":70,"./spaces/Web/Deal/form.vue":71,"./spaces/Web/Deal/list.vue":72,"./spaces/Web/Dealable/edit.vue":73,"./spaces/Web/Dealable/form.vue":74,"./spaces/Web/Dealable/list.vue":75,"./spaces/Web/Dealscategory/edit.vue":76,"./spaces/Web/Dealscategory/form.vue":77,"./spaces/Web/Dealscategory/list.vue":78,"./spaces/Web/Dealsfcf/edit.vue":79,"./spaces/Web/Dealsfcf/form.vue":80,"./spaces/Web/Dealsfcf/list.vue":81,"./spaces/Web/Dealspartner/edit.vue":82,"./spaces/Web/Dealspartner/form.vue":83,"./spaces/Web/Dealspartner/list.vue":84,"./spaces/Web/Dealsstage/edit.vue":85,"./spaces/Web/Dealsstage/form.vue":86,"./spaces/Web/Dealsstage/list.vue":87,"./spaces/Web/Dealsstatus/edit.vue":88,"./spaces/Web/Dealsstatus/form.vue":89,"./spaces/Web/Dealsstatus/list.vue":90,"./spaces/Web/Dealsterm/edit.vue":91,"./spaces/Web/Dealsterm/form.vue":92,"./spaces/Web/Dealsterm/list.vue":93,"./spaces/Web/Dealsuser/edit.vue":94,"./spaces/Web/Dealsuser/form.vue":95,"./spaces/Web/Dealsuser/list.vue":96,"./spaces/Web/Dealsyear/edit.vue":97,"./spaces/Web/Dealsyear/form.vue":98,"./spaces/Web/Dealsyear/list.vue":99,"./spaces/Web/Dealworker/edit.vue":100,"./spaces/Web/Dealworker/form.vue":101,"./spaces/Web/Dealworker/list.vue":102,"./spaces/Web/Document/edit.vue":103,"./spaces/Web/Document/form.vue":104,"./spaces/Web/Document/list.vue":105,"./spaces/Web/Documentable/edit.vue":106,"./spaces/Web/Documentable/form.vue":107,"./spaces/Web/Documentable/list.vue":108,"./spaces/Web/Family/edit.vue":109,"./spaces/Web/Family/form.vue":110,"./spaces/Web/Family/list.vue":111,"./spaces/Web/Fcf/edit.vue":112,"./spaces/Web/Fcf/form.vue":113,"./spaces/Web/Fcf/list.vue":114,"./spaces/Web/Fund/edit.vue":115,"./spaces/Web/Fund/form.vue":116,"./spaces/Web/Fund/list.vue":117,"./spaces/Web/Meeting/edit.vue":118,"./spaces/Web/Meeting/form.vue":119,"./spaces/Web/Meeting/list.vue":120,"./spaces/Web/Meetingable/edit.vue":121,"./spaces/Web/Meetingable/form.vue":122,"./spaces/Web/Meetingable/list.vue":123,"./spaces/Web/Meetingstype/edit.vue":124,"./spaces/Web/Meetingstype/form.vue":125,"./spaces/Web/Meetingstype/list.vue":126,"./spaces/Web/Migration/edit.vue":127,"./spaces/Web/Migration/form.vue":128,"./spaces/Web/Migration/list.vue":129,"./spaces/Web/Operation/edit.vue":130,"./spaces/Web/Operation/form.vue":131,"./spaces/Web/Operation/list.vue":132,"./spaces/Web/OperationType/edit.vue":133,"./spaces/Web/OperationType/form.vue":134,"./spaces/Web/OperationType/list.vue":135,"./spaces/Web/Partner/edit.vue":136,"./spaces/Web/Partner/form.vue":137,"./spaces/Web/Partner/list.vue":138,"./spaces/Web/PasswordReset/edit.vue":139,"./spaces/Web/PasswordReset/form.vue":140,"./spaces/Web/PasswordReset/list.vue":141,"./spaces/Web/Performance/edit.vue":142,"./spaces/Web/Performance/form.vue":143,"./spaces/Web/Performance/list.vue":144,"./spaces/Web/Permission/edit.vue":145,"./spaces/Web/Permission/form.vue":146,"./spaces/Web/Permission/list.vue":147,"./spaces/Web/Permission_role/edit.vue":148,"./spaces/Web/Permission_role/form.vue":149,"./spaces/Web/Permission_role/list.vue":150,"./spaces/Web/Profile/edit.vue":151,"./spaces/Web/Profile/form.vue":152,"./spaces/Web/Profile/list.vue":153,"./spaces/Web/Provider/edit.vue":154,"./spaces/Web/Provider/form.vue":155,"./spaces/Web/Provider/list.vue":156,"./spaces/Web/Region/edit.vue":157,"./spaces/Web/Region/form.vue":158,"./spaces/Web/Region/list.vue":159,"./spaces/Web/Role/edit.vue":160,"./spaces/Web/Role/form.vue":161,"./spaces/Web/Role/list.vue":162,"./spaces/Web/Role_user/edit.vue":163,"./spaces/Web/Role_user/form.vue":164,"./spaces/Web/Role_user/list.vue":165,"./spaces/Web/Share/edit.vue":166,"./spaces/Web/Share/form.vue":167,"./spaces/Web/Share/list.vue":168,"./spaces/Web/ShareValuation/edit.vue":169,"./spaces/Web/ShareValuation/form.vue":170,"./spaces/Web/ShareValuation/list.vue":171,"./spaces/Web/Subscription/edit.vue":172,"./spaces/Web/Subscription/form.vue":173,"./spaces/Web/Subscription/list.vue":174,"./spaces/Web/Task/edit.vue":175,"./spaces/Web/Task/form.vue":176,"./spaces/Web/Task/list.vue":177,"./spaces/Web/Taskable/edit.vue":178,"./spaces/Web/Taskable/form.vue":179,"./spaces/Web/Taskable/list.vue":180,"./spaces/Web/Team/edit.vue":181,"./spaces/Web/Team/form.vue":182,"./spaces/Web/Team/list.vue":183,"./spaces/Web/Teamuser/edit.vue":184,"./spaces/Web/Teamuser/form.vue":185,"./spaces/Web/Teamuser/list.vue":186,"./spaces/Web/Token/edit.vue":187,"./spaces/Web/Token/form.vue":188,"./spaces/Web/Token/list.vue":189,"./spaces/Web/Update/edit.vue":190,"./spaces/Web/Update/form.vue":191,"./spaces/Web/Update/list.vue":192,"./spaces/Web/User/edit.vue":193,"./spaces/Web/User/form.vue":194,"./spaces/Web/User/list.vue":195,"./spaces/Web/Userable/edit.vue":196,"./spaces/Web/Userable/form.vue":197,"./spaces/Web/Userable/list.vue":198,"./spaces/Web/Vehicle/edit.vue":201,"./spaces/Web/Vehicle/form.vue":202,"./spaces/Web/Vehicle/list.vue":206,"./spaces/Web/VehicleType/edit.vue":212,"./spaces/Web/VehicleType/form.vue":213,"./spaces/Web/VehicleType/list.vue":214,"./spaces/Web/VehiclesCurrenciesAllotment/edit.vue":215,"./spaces/Web/VehiclesCurrenciesAllotment/form.vue":216,"./spaces/Web/VehiclesCurrenciesAllotment/list.vue":217,"./spaces/Web/VehiclesRegionsAllotment/edit.vue":218,"./spaces/Web/VehiclesRegionsAllotment/form.vue":219,"./spaces/Web/VehiclesRegionsAllotment/list.vue":220,"./spaces/Web/VehiclesRisksAllotment/edit.vue":221,"./spaces/Web/VehiclesRisksAllotment/form.vue":222,"./spaces/Web/VehiclesRisksAllotment/list.vue":223}],34:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Account/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Operation/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        accountForm: _form2.default,
        operationsFromAccount: _list2.default,
        operationsToAccount: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_currency: false,

            createdCurrency: {},

            CurrencyList: [],

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/accounts/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Account Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#operationsFromAccount\" data-toggle=\"tab\">operationsFromAccount</a></li><li class=\"\"><a href=\"#operationsToAccount\" data-toggle=\"tab\">operationsToAccount</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <account-form :created-object.sync=\"createdAccount\"></account-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"operationsFromAccount\">\n                              <operations-from-account :fromid=\"getId()\" :url=\"getUrl('operationsFromAccount')\"></operations-from-account>\n                           </div>\n\n                           <div class=\"tab-pane fade in\" id=\"operationsToAccount\">\n                              <operations-to-account :fromid=\"getId()\" :url=\"getUrl('operationsToAccount')\"></operations-to-account>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-7f4e6291", module.exports)
  } else {
    hotAPI.update("_v-7f4e6291", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Account/form.vue":35,"../Operation/list.vue":132,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],35:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Currency/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../User/form.vue');

var _form4 = _interopRequireDefault(_form3);

var _form5 = require('../Vehicle/form.vue');

var _form6 = _interopRequireDefault(_form5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: { currencyForm: _form2.default,
        userForm: _form4.default,
        vehicleForm: _form6.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchCurrency();
        this.fetchUser();
        this.fetchVehicle();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdCurrency': function createdCurrency(val, oldVal) {
            this.object.currency_id = this.createdCurrency.id;
        },
        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        },
        'createdVehicle': function createdVehicle(val, oldVal) {
            this.object.vehicle_id = this.createdVehicle.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_currency: false,

            createdCurrency: {},

            CurrencyList: [],

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/accounts/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchCurrency: function fetchCurrency() {
            this.$http.get('/api/Middle/currencies').then(function (response) {
                this.CurrencyList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchVehicle: function fetchVehicle() {
            this.$http.get('/api/Middle/vehicles').then(function (response) {
                this.VehicleList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/accounts', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/accounts/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/accounts/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/accounts');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/accounts/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/accounts');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};

// import modal from '../../snippets/modal.vue';
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>Account Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group currency_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"currency_id\" class=\"col-sm-2 control-label\">Currency <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_currency\">\n                        <select v-model=\"object.currency_id\" class=\"form-control\" v-validate:currency_id=\"{required:true}\">\n                            <option v-for=\"Currency in CurrencyList\" :value=\"Currency.id\"> \n                                    {{ Currency.name }} \n                                    {{ Currency.symbol }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.currency_id.required\">Currency is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdCurrency.id\" v-validate:currency_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_currency\" icon=\"add\" @click.prevent=\"showForm_currency= ! showForm_currency, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_currency\" icon=\"remove\" @click.prevent=\"showForm_currency= ! showForm_currency\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_currency\">\n\n                        <div v-if=\"createdCurrency.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdCurrency.name }} \n                                {{ createdCurrency.symbol }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <currency-form force-mode=\"create\" :created-object.sync=\"createdCurrency\"></currency-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group vehicle_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"vehicle_id\" class=\"col-sm-2 control-label\">Vehicle <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_vehicle\">\n                        <select v-model=\"object.vehicle_id\" class=\"form-control\" v-validate:vehicle_id=\"{required:true}\">\n                            <option v-for=\"Vehicle in VehicleList\" :value=\"Vehicle.id\"> \n                                    {{ Vehicle.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.vehicle_id.required\">Vehicle is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdVehicle.id\" v-validate:vehicle_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_vehicle\" icon=\"add\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_vehicle\" icon=\"remove\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_vehicle\">\n\n                        <div v-if=\"createdVehicle.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdVehicle.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <vehicle-form force-mode=\"create\" :created-object.sync=\"createdVehicle\"></vehicle-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group name\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.name.required\">Name is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group type\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"type\" class=\"col-sm-2 control-label\">Type <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.type\" placeholder=\"type\" v-validate:type=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.type.required\">Type is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group owner\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"owner\" class=\"col-sm-2 control-label\">Owner <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.owner\" placeholder=\"owner\" v-validate:owner=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.owner.required\">Owner is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group number\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"number\" class=\"col-sm-2 control-label\">Number <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.number\" placeholder=\"number\" v-validate:number=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.number.required\">Number is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group investment_structure\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"investment_structure\" class=\"col-sm-2 control-label\">Investment structure <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.investment_structure\" placeholder=\"investment_structure\" v-validate:investment_structure=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.investment_structure.required\">Investment structure is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group insurer\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"insurer\" class=\"col-sm-2 control-label\">Insurer <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.insurer\" placeholder=\"insurer\" v-validate:insurer=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.insurer.required\">Insurer is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group insurance_contract\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"insurance_contract\" class=\"col-sm-2 control-label\">Insurance contract <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.insurance_contract\" placeholder=\"insurance_contract\" v-validate:insurance_contract=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.insurance_contract.required\">Insurance contract is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group depositary\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"depositary\" class=\"col-sm-2 control-label\">Depositary <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.depositary\" placeholder=\"depositary\" v-validate:depositary=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.depositary.required\">Depositary is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group notes\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"notes\" class=\"col-sm-2 control-label\">Notes <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.notes\" placeholder=\"notes\" v-validate:notes=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.notes.required\">Notes is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group bank\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"bank\" class=\"col-sm-2 control-label\">Bank <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.bank\" placeholder=\"bank\" v-validate:bank=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.bank.required\">Bank is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         Account <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3c0d144b", module.exports)
  } else {
    hotAPI.update("_v-3c0d144b", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Currency/form.vue":68,"../User/form.vue":194,"../Vehicle/form.vue":202,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],36:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Account/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        accountForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/accounts/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/accounts', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/accounts/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/accounts';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Account  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Currency</th>\n<th>Updated by</th>\n<th>Vehicle</th>\n<th>Name</th>\n<th>Type</th>\n<th>Owner</th>\n<th>Number</th>\n<th>Investment structure</th>\n<th>Insurer</th>\n<th>Insurance contract</th>\n<th>Depositary</th>\n<th>Notes</th>\n<th>Bank</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.currency.name }}\n                                              \n\n                                               {{ data.currency.symbol }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.vehicle.name }}\n                                              \n\n                                               </td> <td>{{data.name}}</td>\n<td>{{data.type}}</td>\n<td>{{data.owner}}</td>\n<td>{{data.number}}</td>\n<td>{{data.investment_structure}}</td>\n<td>{{data.insurer}}</td>\n<td>{{data.insurance_contract}}</td>\n<td>{{data.depositary}}</td>\n<td>{{data.notes}}</td>\n<td>{{data.bank}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <account-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></account-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-70063b25", module.exports)
  } else {
    hotAPI.update("_v-70063b25", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Account/form.vue":35,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],37:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Bug/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        bugForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_client: false,

            createdClient: {},

            ClientList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/bugs/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Bug Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<bug-form :created-object.sync=\"createdBug\"></bug-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-30a5fcaa", module.exports)
  } else {
    hotAPI.update("_v-30a5fcaa", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Bug/form.vue":38,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],38:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Client/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: { clientForm: _form2.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchClient();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdClient': function createdClient(val, oldVal) {
            this.object.client_id = this.createdClient.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_client: false,

            createdClient: {},

            ClientList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/bugs/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchClient: function fetchClient() {
            this.$http.get('/api/Middle/clients').then(function (response) {
                this.ClientList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/bugs', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/bugs/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/bugs');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/bugs/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/bugs');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};

// import modal from '../../snippets/modal.vue';
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>Bug Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group user_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"user_id\" class=\"col-sm-2 control-label\">User <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.user_id\" placeholder=\"user_id\" v-validate:user_id=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.user_id.required\">User is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group title\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"title\" class=\"col-sm-2 control-label\">Title <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.title\" placeholder=\"title\" v-validate:title=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.title.required\">Title is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group content\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"content\" class=\"col-sm-2 control-label\">Content <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.content\" placeholder=\"content\" v-validate:content=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.content.required\">Content is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group status\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"status\" class=\"col-sm-2 control-label\">Status <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.status\" placeholder=\"status\" v-validate:status=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.status.required\">Status is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group client_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"client_id\" class=\"col-sm-2 control-label\">Client <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_client\">\n                        <select v-model=\"object.client_id\" class=\"form-control\" v-validate:client_id=\"{required:true}\">\n                            <option v-for=\"Client in ClientList\" :value=\"Client.id\"> \n                                    {{ Client.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.client_id.required\">Client is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdClient.id\" v-validate:client_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_client\" icon=\"add\" @click.prevent=\"showForm_client= ! showForm_client, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_client\" icon=\"remove\" @click.prevent=\"showForm_client= ! showForm_client\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_client\">\n\n                        <div v-if=\"createdClient.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdClient.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <client-form force-mode=\"create\" :created-object.sync=\"createdClient\"></client-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         Bug <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2536a338", module.exports)
  } else {
    hotAPI.update("_v-2536a338", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Client/form.vue":41,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],39:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Bug/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        bugForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/bugs/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/bugs', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/bugs/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/bugs';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Bug  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>User</th>\n<th>Title</th>\n<th>Content</th>\n<th>Status</th>\n<th>Client</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.user_id}}</td>\n<td>{{data.title}}</td>\n<td>{{data.content}}</td>\n<td>{{data.status}}</td>\n\n                                                <td>\n                                               {{ data.client.name }}\n                                              \n\n                                               </td>\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <bug-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></bug-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-215dd53e", module.exports)
  } else {
    hotAPI.update("_v-215dd53e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Bug/form.vue":38,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],40:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Client/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Bug/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        clientForm: _form2.default,
        bugs: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/clients/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Client Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#bugs\" data-toggle=\"tab\">bugs</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <client-form :created-object.sync=\"createdClient\"></client-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"bugs\">\n                              <bugs :fromid=\"getId()\" :url=\"getUrl('bugs')\"></bugs>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-0eced279", module.exports)
  } else {
    hotAPI.update("_v-0eced279", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Bug/list.vue":39,"../Client/form.vue":41,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],41:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/clients/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/clients', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/clients/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/clients/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/clients');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/clients/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/clients');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Client Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group slug\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"slug\" class=\"col-sm-2 control-label\">Slug <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.slug\" placeholder=\"slug\" v-validate:slug=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.slug.required\">Slug is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group logo_extension\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"logo_extension\" class=\"col-sm-2 control-label\">Logo extension <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.logo_extension\" placeholder=\"logo_extension\" v-validate:logo_extension=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.logo_extension.required\">Logo extension is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group has_crm\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"has_crm\" class=\"col-sm-2 control-label\">Has crm <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <!--\n            <label class=\"radio-inline\">\n                <input v-model=\"object.has_crm\" type=\"radio\" value=\"1\"> Yes\n            </label>\n            <label class=\"radio-inline\">\n                <input v-model=\"object.has_crm\" type=\"radio\" value=\"0\"> No\n            </label>-->\n\n            <ui-switch :value.sync=\"object.has_crm\" label=\"\"></ui-switch>\n                \n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group has_middle\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"has_middle\" class=\"col-sm-2 control-label\">Has middle <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <!--\n            <label class=\"radio-inline\">\n                <input v-model=\"object.has_middle\" type=\"radio\" value=\"1\"> Yes\n            </label>\n            <label class=\"radio-inline\">\n                <input v-model=\"object.has_middle\" type=\"radio\" value=\"0\"> No\n            </label>-->\n\n            <ui-switch :value.sync=\"object.has_middle\" label=\"\"></ui-switch>\n                \n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Client <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-68e4f79a", module.exports)
  } else {
    hotAPI.update("_v-68e4f79a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],42:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Client/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        clientForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/clients/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/clients', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/clients/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/clients';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Client  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Name</th>\n<th>Slug</th>\n<th>Logo extension</th>\n<th>Has crm</th>\n<th>Has middle</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.name}}</td>\n<td>{{data.slug}}</td>\n<td>{{data.logo_extension}}</td>\n<td>{{data.has_crm}}</td>\n<td>{{data.has_middle}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <client-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></client-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-00f2a9e6", module.exports)
  } else {
    hotAPI.update("_v-00f2a9e6", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Client/form.vue":41,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],43:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Companiecateory/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        companiecateoryForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/companiecateories/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Companiecateory Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<companiecateory-form :created-object.sync=\"createdCompaniecateory\"></companiecateory-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2c72114f", module.exports)
  } else {
    hotAPI.update("_v-2c72114f", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Companiecateory/form.vue":44,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],44:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/companiecateories/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/companiecateories', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.idCompanieCateories;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/companiecateories/' + object.idCompanieCateories, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/companiecateories');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/companiecateories/' + object.idCompanieCateories, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/companiecateories');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Companiecateory Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Description\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Description\" class=\"col-sm-2 control-label\">Description <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Description\" placeholder=\"Description\" v-validate:description=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.description.required\">Description is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Companiecateory <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2d9e79ee", module.exports)
  } else {
    hotAPI.update("_v-2d9e79ee", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],45:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Companiecateory/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        companiecateoryForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/companiecateories/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/companiecateories', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/companiecateories/' + data.idCompanieCateories);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/companiecateories';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Companiecateory  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IdCompanieCateories</th>\n<th>Description</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.idCompanieCateories}}</td>\n<td>{{data.Description}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <companiecateory-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></companiecateory-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-1d29e9e3", module.exports)
  } else {
    hotAPI.update("_v-1d29e9e3", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Companiecateory/form.vue":44,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],46:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Company/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        companyForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/companies/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Company Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<company-form :created-object.sync=\"createdCompany\"></company-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-65764a41", module.exports)
  } else {
    hotAPI.update("_v-65764a41", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Company/form.vue":47,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],47:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/companies/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/companies', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/companies/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/companies');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/companies/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/companies');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Company Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group client_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"client_id\" class=\"col-sm-2 control-label\">Client <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.client_id\" placeholder=\"client_id\" v-validate:client_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.client_id.required\">Client is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Societe\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Societe\" class=\"col-sm-2 control-label\">Societe <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Societe\" placeholder=\"Societe\" v-validate:societe=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.societe.required\">Societe is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Adresse1\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Adresse1\" class=\"col-sm-2 control-label\">Adresse1 <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Adresse1\" placeholder=\"Adresse1\" v-validate:adresse1=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.adresse1.required\">Adresse1 is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Adresse2\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Adresse2\" class=\"col-sm-2 control-label\">Adresse2 <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Adresse2\" placeholder=\"Adresse2\" v-validate:adresse2=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.adresse2.required\">Adresse2 is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group CP\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"CP\" class=\"col-sm-2 control-label\">CP <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.CP\" placeholder=\"CP\" v-validate:c_p=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.c_p.required\">CP is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group VILLE\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"VILLE\" class=\"col-sm-2 control-label\">VILLE <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.VILLE\" placeholder=\"VILLE\" v-validate:v_i_l_l_e=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.v_i_l_l_e.required\">VILLE is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group PAYS\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"PAYS\" class=\"col-sm-2 control-label\">PAYS <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.PAYS\" placeholder=\"PAYS\" v-validate:p_a_y_s=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.p_a_y_s.required\">PAYS is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group SiteWeb\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"SiteWeb\" class=\"col-sm-2 control-label\">SiteWeb <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.SiteWeb\" placeholder=\"SiteWeb\" v-validate:site_web=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.site_web.required\">SiteWeb is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Tel1\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Tel1\" class=\"col-sm-2 control-label\">Tel1 <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Tel1\" placeholder=\"Tel1\" v-validate:tel1=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.tel1.required\">Tel1 is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Tel2\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Tel2\" class=\"col-sm-2 control-label\">Tel2 <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Tel2\" placeholder=\"Tel2\" v-validate:tel2=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.tel2.required\">Tel2 is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Fax\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Fax\" class=\"col-sm-2 control-label\">Fax <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Fax\" placeholder=\"Fax\" v-validate:fax=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.fax.required\">Fax is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group tracked\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"tracked\" class=\"col-sm-2 control-label\">Tracked <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <!--\n            <label class=\"radio-inline\">\n                <input v-model=\"object.tracked\" type=\"radio\" value=\"1\"> Yes\n            </label>\n            <label class=\"radio-inline\">\n                <input v-model=\"object.tracked\" type=\"radio\" value=\"0\"> No\n            </label>-->\n\n            <ui-switch :value.sync=\"object.tracked\" label=\"\"></ui-switch>\n                \n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Notes\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Notes\" class=\"col-sm-2 control-label\">Notes <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <textarea class=\"form-control\" v-model=\"object.Notes\" placeholder=\"Notes\" v-validate:notes=\"{required:true}\"></textarea>\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.notes.required\">Notes is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Categorie\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Categorie\" class=\"col-sm-2 control-label\">Categorie <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.Categorie\" placeholder=\"Categorie\" v-validate:categorie=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.categorie.required\">Categorie is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group LastModifiedUser\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"LastModifiedUser\" class=\"col-sm-2 control-label\">LastModifiedUser <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.LastModifiedUser\" placeholder=\"LastModifiedUser\" v-validate:last_modified_user=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.last_modified_user.required\">LastModifiedUser is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Company <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2234fbfb", module.exports)
  } else {
    hotAPI.update("_v-2234fbfb", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],48:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Company/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        companyForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/companies/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/companies', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/companies/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/companies';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Company  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Client</th>\n<th>Societe</th>\n<th>Adresse1</th>\n<th>Adresse2</th>\n<th>CP</th>\n<th>VILLE</th>\n<th>PAYS</th>\n<th>SiteWeb</th>\n<th>Tel1</th>\n<th>Tel2</th>\n<th>Fax</th>\n<th>Tracked</th>\n<th>Notes</th>\n<th>Categorie</th>\n<th>LastModifiedUser</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.client_id}}</td>\n<td>{{data.Societe}}</td>\n<td>{{data.Adresse1}}</td>\n<td>{{data.Adresse2}}</td>\n<td>{{data.CP}}</td>\n<td>{{data.VILLE}}</td>\n<td>{{data.PAYS}}</td>\n<td>{{data.SiteWeb}}</td>\n<td>{{data.Tel1}}</td>\n<td>{{data.Tel2}}</td>\n<td>{{data.Fax}}</td>\n<td>{{data.tracked}}</td>\n<td>{{data.Notes}}</td>\n<td>{{data.Categorie}}</td>\n<td>{{data.LastModifiedUser}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <company-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></company-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-562e22d5", module.exports)
  } else {
    hotAPI.update("_v-562e22d5", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Company/form.vue":47,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],49:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contact/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/contacts/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Contact Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<contact-form :created-object.sync=\"createdContact\"></contact-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-53c56c04", module.exports)
  } else {
    hotAPI.update("_v-53c56c04", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contact/form.vue":50,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],50:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/contacts/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/contacts', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/contacts/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/contacts');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/contacts/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/contacts');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Contact Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group activity_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"activity_id\" class=\"col-sm-2 control-label\">Activity <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.activity_id\" placeholder=\"activity_id\" v-validate:activity_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.activity_id.required\">Activity is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group company_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"company_id\" class=\"col-sm-2 control-label\">Company <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.company_id\" placeholder=\"company_id\" v-validate:company_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.company_id.required\">Company is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group provider_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"provider_id\" class=\"col-sm-2 control-label\">Provider <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.provider_id\" placeholder=\"provider_id\" v-validate:provider_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.provider_id.required\">Provider is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group user_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"user_id\" class=\"col-sm-2 control-label\">User <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.user_id\" placeholder=\"user_id\" v-validate:user_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.user_id.required\">User is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group external_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"external_id\" class=\"col-sm-2 control-label\">External <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <textarea class=\"form-control\" v-model=\"object.external_id\" placeholder=\"external_id\" v-validate:external_id=\"{required:true}\"></textarea>\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.external_id.required\">External is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group fullname\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"fullname\" class=\"col-sm-2 control-label\">Fullname <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.fullname\" placeholder=\"fullname\" v-validate:fullname=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.fullname.required\">Fullname is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group tracked\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"tracked\" class=\"col-sm-2 control-label\">Tracked <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <!--\n            <label class=\"radio-inline\">\n                <input v-model=\"object.tracked\" type=\"radio\" value=\"1\"> Yes\n            </label>\n            <label class=\"radio-inline\">\n                <input v-model=\"object.tracked\" type=\"radio\" value=\"0\"> No\n            </label>-->\n\n            <ui-switch :value.sync=\"object.tracked\" label=\"\"></ui-switch>\n                \n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group img_path\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"img_path\" class=\"col-sm-2 control-label\">Img path <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <textarea class=\"form-control\" v-model=\"object.img_path\" placeholder=\"img_path\" v-validate:img_path=\"{required:true}\"></textarea>\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.img_path.required\">Img path is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Contact <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-da480890", module.exports)
  } else {
    hotAPI.update("_v-da480890", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],51:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contact/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/contacts/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/contacts', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/contacts/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/contacts';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Contact  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Activity</th>\n<th>Company</th>\n<th>Provider</th>\n<th>User</th>\n<th>External</th>\n<th>Fullname</th>\n<th>Tracked</th>\n<th>Img path</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.activity_id}}</td>\n<td>{{data.company_id}}</td>\n<td>{{data.provider_id}}</td>\n<td>{{data.user_id}}</td>\n<td>{{data.external_id}}</td>\n<td>{{data.fullname}}</td>\n<td>{{data.tracked}}</td>\n<td>{{data.img_path}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <contact-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></contact-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-7255badc", module.exports)
  } else {
    hotAPI.update("_v-7255badc", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contact/form.vue":50,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],52:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactableForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/contactables/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Contactable Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<contactable-form :created-object.sync=\"createdContactable\"></contactable-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-75fcbb64", module.exports)
  } else {
    hotAPI.update("_v-75fcbb64", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactable/form.vue":53,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],53:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/contactables/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/contactables', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Contactable Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group contact_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"contact_id\" class=\"col-sm-2 control-label\">Contact <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.contact_id\" placeholder=\"contact_id\" v-validate:contact_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.contact_id.required\">Contact is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group contactable_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"contactable_id\" class=\"col-sm-2 control-label\">Contactable <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.contactable_id\" placeholder=\"contactable_id\" v-validate:contactable_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.contactable_id.required\">Contactable is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group contactable_type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"contactable_type\" class=\"col-sm-2 control-label\">Contactable type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.contactable_type\" placeholder=\"contactable_type\" v-validate:contactable_type=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.contactable_type.required\">Contactable type is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Contactable <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-32bb6d1e", module.exports)
  } else {
    hotAPI.update("_v-32bb6d1e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],54:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactableForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/contactables/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/contactables', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/contactables';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Contactable  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Contact</th>\n<th>Contactable</th>\n<th>Contactable type</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.contact_id}}</td>\n<td>{{data.contactable_id}}</td>\n<td>{{data.contactable_type}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <contactable-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></contactable-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-66b493f8", module.exports)
  } else {
    hotAPI.update("_v-66b493f8", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactable/form.vue":53,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],55:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactactivity/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactactivityForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/contactactivity/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Contactactivity Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<contactactivity-form :created-object.sync=\"createdContactactivity\"></contactactivity-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-07badacf", module.exports)
  } else {
    hotAPI.update("_v-07badacf", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactactivity/form.vue":56,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],56:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/contactactivity/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/contactactivity', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.ID;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/contactactivity/' + object.ID, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/contactactivity');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/contactactivity/' + object.ID, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/contactactivity');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Contactactivity Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group ContactActivityD\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"ContactActivityD\" class=\"col-sm-2 control-label\">ContactActivityD <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.ContactActivityD\" placeholder=\"ContactActivityD\" v-validate:contact_activity_d=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.contact_activity_d.required\">ContactActivityD is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Contactactivity <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-770ce6ee", module.exports)
  } else {
    hotAPI.update("_v-770ce6ee", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],57:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactactivity/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactactivityForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/contactactivity/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/contactactivity', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/contactactivity/' + data.ID);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/contactactivity';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Contactactivity  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>ID</th>\n<th>ContactActivityD</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.ID}}</td>\n<td>{{data.ContactActivityD}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <contactactivity-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></contactactivity-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-0f1a993a", module.exports)
  } else {
    hotAPI.update("_v-0f1a993a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactactivity/form.vue":56,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],58:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactcompany/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactcompanyForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/contactcompany/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Contactcompany Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<contactcompany-form :created-object.sync=\"createdContactcompany\"></contactcompany-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-247359b2", module.exports)
  } else {
    hotAPI.update("_v-247359b2", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactcompany/form.vue":59,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],59:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/contactcompany/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/contactcompany', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.IDcontact;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/contactcompany/' + object.IDcontact, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/contactcompany');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/contactcompany/' + object.IDcontact, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/contactcompany');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Contactcompany Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group IDcontact\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDcontact\" class=\"col-sm-2 control-label\">IDcontact <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDcontact\" placeholder=\"IDcontact\" v-validate:i_dcontact=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_dcontact.required\">IDcontact is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group IDCompany\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDCompany\" class=\"col-sm-2 control-label\">IDCompany <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDCompany\" placeholder=\"IDCompany\" v-validate:i_d_company=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_d_company.required\">IDCompany is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Contactcompany <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-aaf5f63e", module.exports)
  } else {
    hotAPI.update("_v-aaf5f63e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],60:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactcompany/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactcompanyForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/contactcompany/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/contactcompany', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/contactcompany/' + data.IDcontact);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/contactcompany';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Contactcompany  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IDcontact</th>\n<th>IDCompany</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.IDcontact}}</td>\n<td>{{data.IDCompany}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <contactcompany-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></contactcompany-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-4303a88a", module.exports)
  } else {
    hotAPI.update("_v-4303a88a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactcompany/form.vue":59,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],61:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactssociete/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactssocieteForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/contactssociete/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Contactssociete Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<contactssociete-form :created-object.sync=\"createdContactssociete\"></contactssociete-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-6f23c75d", module.exports)
  } else {
    hotAPI.update("_v-6f23c75d", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactssociete/form.vue":62,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],62:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/contactssociete/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/contactssociete', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.IDcontact;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/contactssociete/' + object.IDcontact, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/contactssociete');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/contactssociete/' + object.IDcontact, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/contactssociete');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Contactssociete Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group IDcontact\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDcontact\" class=\"col-sm-2 control-label\">IDcontact <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.IDcontact\" placeholder=\"IDcontact\" v-validate:i_dcontact=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_dcontact.required\">IDcontact is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group IDsociete\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDsociete\" class=\"col-sm-2 control-label\">IDsociete <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDsociete\" placeholder=\"IDsociete\" v-validate:i_dsociete=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_dsociete.required\">IDsociete is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Contactssociete <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2be27917", module.exports)
  } else {
    hotAPI.update("_v-2be27917", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],63:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactssociete/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactssocieteForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/contactssociete/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/contactssociete', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/contactssociete/' + data.IDcontact);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/contactssociete';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Contactssociete  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IDcontact</th>\n<th>IDsociete</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.IDcontact}}</td>\n<td>{{data.IDsociete}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <contactssociete-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></contactssociete-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-5fdb9ff1", module.exports)
  } else {
    hotAPI.update("_v-5fdb9ff1", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactssociete/form.vue":62,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],64:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactsuser/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactsuserForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/contactsuser/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Contactsuser Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<contactsuser-form :created-object.sync=\"createdContactsuser\"></contactsuser-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-0de77ec6", module.exports)
  } else {
    hotAPI.update("_v-0de77ec6", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactsuser/form.vue":65,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],65:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/contactsuser/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/contactsuser', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.IDcontact;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/contactsuser/' + object.IDcontact, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/contactsuser');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/contactsuser/' + object.IDcontact, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/contactsuser');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Contactsuser Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group IDcontact\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDcontact\" class=\"col-sm-2 control-label\">IDcontact <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.IDcontact\" placeholder=\"IDcontact\" v-validate:i_dcontact=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_dcontact.required\">IDcontact is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group IDuser\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDuser\" class=\"col-sm-2 control-label\">IDuser <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDuser\" placeholder=\"IDuser\" v-validate:i_duser=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_duser.required\">IDuser is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Contactsuser <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-6ab39f00", module.exports)
  } else {
    hotAPI.update("_v-6ab39f00", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],66:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Contactsuser/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        contactsuserForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/contactsuser/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/contactsuser', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/contactsuser/' + data.IDcontact);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/contactsuser';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Contactsuser  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IDcontact</th>\n<th>IDuser</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.IDcontact}}</td>\n<td>{{data.IDuser}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <contactsuser-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></contactsuser-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-02c1514c", module.exports)
  } else {
    hotAPI.update("_v-02c1514c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Contactsuser/form.vue":65,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],67:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Currency/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Account/list.vue');

var _list2 = _interopRequireDefault(_list);

var _list3 = require('../VehiclesCurrenciesAllotment/list.vue');

var _list4 = _interopRequireDefault(_list3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        currencyForm: _form2.default,
        accounts: _list2.default,
        vehiclesCurrenciesAllotments: _list4.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/currencies/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Currency Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#accounts\" data-toggle=\"tab\">accounts</a></li><li class=\"\"><a href=\"#vehiclesCurrenciesAllotments\" data-toggle=\"tab\">vehiclesCurrenciesAllotments</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <currency-form :created-object.sync=\"createdCurrency\"></currency-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"accounts\">\n                              <accounts :fromid=\"getId()\" :url=\"getUrl('accounts')\"></accounts>\n                           </div>\n\n                           <div class=\"tab-pane fade in\" id=\"vehiclesCurrenciesAllotments\">\n                              <vehicles-currencies-allotments :fromid=\"getId()\" :url=\"getUrl('vehiclesCurrenciesAllotments')\"></vehicles-currencies-allotments>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-a56d679a", module.exports)
  } else {
    hotAPI.update("_v-a56d679a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Account/list.vue":36,"../Currency/form.vue":68,"../VehiclesCurrenciesAllotment/list.vue":217,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],68:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../User/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: { userForm: _form2.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchUser();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/currencies/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/currencies', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/currencies/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/currencies/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/currencies');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/currencies/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/currencies');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};

// import modal from '../../snippets/modal.vue';
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Currency Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group code\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"code\" class=\"col-sm-2 control-label\">Code <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.code\" placeholder=\"code\" v-validate:code=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.code.required\">Code is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group symbol\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"symbol\" class=\"col-sm-2 control-label\">Symbol <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.symbol\" placeholder=\"symbol\" v-validate:symbol=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.symbol.required\">Symbol is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group order\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"order\" class=\"col-sm-2 control-label\">Order <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.order\" placeholder=\"order\" v-validate:order=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.order.required\">Order is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Currency <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-6a07fded", module.exports)
  } else {
    hotAPI.update("_v-6a07fded", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../User/form.vue":194,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],69:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Currency/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        currencyForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/currencies/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/currencies', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/currencies/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/currencies';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Currency  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Updated by</th>\n<th>Code</th>\n<th>Name</th>\n<th>Symbol</th>\n<th>Order</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td> <td>{{data.code}}</td>\n<td>{{data.name}}</td>\n<td>{{data.symbol}}</td>\n<td>{{data.order}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <currency-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></currency-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-c3fdb672", module.exports)
  } else {
    hotAPI.update("_v-c3fdb672", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Currency/form.vue":68,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],70:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Deal/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/deals/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Deal Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<deal-form :created-object.sync=\"createdDeal\"></deal-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-081017b8", module.exports)
  } else {
    hotAPI.update("_v-081017b8", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Deal/form.vue":71,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],71:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/deals/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/deals', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/deals/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/deals');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/deals/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/deals');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>Deal Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group client_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"client_id\" class=\"col-sm-2 control-label\">Client <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.client_id\" placeholder=\"client_id\" v-validate:client_id=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.client_id.required\">Client is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group DealsType\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"DealsType\" class=\"col-sm-2 control-label\">DealsType <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.DealsType\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.DealsType\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.DealsType\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Country\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Country\" class=\"col-sm-2 control-label\">Country <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Country\" placeholder=\"Country\" v-validate:country=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.country.required\">Country is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Companies_IDCompani\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Companies_IDCompani\" class=\"col-sm-2 control-label\">Companies IDCompani <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Companies_IDCompani\" placeholder=\"Companies_IDCompani\" v-validate:companies__i_d_compani=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.companies__i_d_compani.required\">Companies IDCompani is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group ProjectName\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"ProjectName\" class=\"col-sm-2 control-label\">ProjectName <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.ProjectName\" placeholder=\"ProjectName\" v-validate:project_name=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.project_name.required\">ProjectName is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Activities\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Activities\" class=\"col-sm-2 control-label\">Activities <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Activities\" placeholder=\"Activities\" v-validate:activities=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.activities.required\">Activities is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group AssetName\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"AssetName\" class=\"col-sm-2 control-label\">AssetName <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.AssetName\" placeholder=\"AssetName\" v-validate:asset_name=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.asset_name.required\">AssetName is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Categories\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Categories\" class=\"col-sm-2 control-label\">Categories <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Categories\" placeholder=\"Categories\" v-validate:categories=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.categories.required\">Categories is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Stage\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Stage\" class=\"col-sm-2 control-label\">Stage <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Stage\" placeholder=\"Stage\" v-validate:stage=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.stage.required\">Stage is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Shareholders\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Shareholders\" class=\"col-sm-2 control-label\">Shareholders <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Shareholders\" placeholder=\"Shareholders\" v-validate:shareholders=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.shareholders.required\">Shareholders is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group LeadInvestor\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"LeadInvestor\" class=\"col-sm-2 control-label\">LeadInvestor <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.LeadInvestor\" placeholder=\"LeadInvestor\" v-validate:lead_investor=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.lead_investor.required\">LeadInvestor is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Sourcing\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Sourcing\" class=\"col-sm-2 control-label\">Sourcing <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Sourcing\" placeholder=\"Sourcing\" v-validate:sourcing=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.sourcing.required\">Sourcing is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Sourcingindividual\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Sourcingindividual\" class=\"col-sm-2 control-label\">Sourcingindividual <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Sourcingindividual\" placeholder=\"Sourcingindividual\" v-validate:sourcingindividual=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.sourcingindividual.required\">Sourcingindividual is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Term\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Term\" class=\"col-sm-2 control-label\">Term <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Term\" placeholder=\"Term\" v-validate:term=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.term.required\">Term is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Next_Steps\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Next_Steps\" class=\"col-sm-2 control-label\">Next Steps <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.Next_Steps\" placeholder=\"Next_Steps\" v-validate:next__steps=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.next__steps.required\">Next Steps is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Process\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Process\" class=\"col-sm-2 control-label\">Process <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Process\" placeholder=\"Process\" v-validate:process=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.process.required\">Process is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Why_turn_down\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Why_turn_down\" class=\"col-sm-2 control-label\">Why turn down <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Why_turn_down\" placeholder=\"Why_turn_down\" v-validate:why_turn_down=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.why_turn_down.required\">Why turn down is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Work_done\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Work_done\" class=\"col-sm-2 control-label\">Work done <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Work_done\" placeholder=\"Work_done\" v-validate:work_done=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.work_done.required\">Work done is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Due_diligence\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Due_diligence\" class=\"col-sm-2 control-label\">Due diligence <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Due_diligence\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Due_diligence\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.Due_diligence\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group PPM\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"PPM\" class=\"col-sm-2 control-label\">PPM <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.PPM\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.PPM\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.PPM\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Meeting_with_sellor\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Meeting_with_sellor\" class=\"col-sm-2 control-label\">Meeting with sellor <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Meeting_with_sellor\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Meeting_with_sellor\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.Meeting_with_sellor\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Meetings_with_management\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Meetings_with_management\" class=\"col-sm-2 control-label\">Meetings with management <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Meetings_with_management\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Meetings_with_management\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.Meetings_with_management\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Meetings_with_banks\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Meetings_with_banks\" class=\"col-sm-2 control-label\">Meetings with banks <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Meetings_with_banks\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Meetings_with_banks\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.Meetings_with_banks\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Letter_of_intend\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Letter_of_intend\" class=\"col-sm-2 control-label\">Letter of intend <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Letter_of_intend\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Letter_of_intend\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.Letter_of_intend\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group reference_calls\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"reference_calls\" class=\"col-sm-2 control-label\">Reference calls <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.reference_calls\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.reference_calls\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.reference_calls\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Others\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Others\" class=\"col-sm-2 control-label\">Others <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Others\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Others\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.Others\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Meeting_with_Partners\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Meeting_with_Partners\" class=\"col-sm-2 control-label\">Meeting with Partners <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Meeting_with_Partners\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.Meeting_with_Partners\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.Meeting_with_Partners\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group ReferenceCalls\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"ReferenceCalls\" class=\"col-sm-2 control-label\">ReferenceCalls <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.ReferenceCalls\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.ReferenceCalls\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.ReferenceCalls\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Status\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Status\" class=\"col-sm-2 control-label\">Status <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Status\" placeholder=\"Status\" v-validate:status=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.status.required\">Status is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group PriceEV\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"PriceEV\" class=\"col-sm-2 control-label\">PriceEV <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.PriceEV\" placeholder=\"PriceEV\" v-validate:price_e_v=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.price_e_v.required\">PriceEV is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Equity\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Equity\" class=\"col-sm-2 control-label\">Equity <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Equity\" placeholder=\"Equity\" v-validate:equity=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.equity.required\">Equity is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group EquityInvestor\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"EquityInvestor\" class=\"col-sm-2 control-label\">EquityInvestor <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.EquityInvestor\" placeholder=\"EquityInvestor\" v-validate:equity_investor=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.equity_investor.required\">EquityInvestor is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group TotalDebt\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"TotalDebt\" class=\"col-sm-2 control-label\">TotalDebt <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.TotalDebt\" placeholder=\"TotalDebt\" v-validate:total_debt=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.total_debt.required\">TotalDebt is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group SeniorA\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"SeniorA\" class=\"col-sm-2 control-label\">SeniorA <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.SeniorA\" placeholder=\"SeniorA\" v-validate:senior_a=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.senior_a.required\">SeniorA is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group SeniorB\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"SeniorB\" class=\"col-sm-2 control-label\">SeniorB <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.SeniorB\" placeholder=\"SeniorB\" v-validate:senior_b=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.senior_b.required\">SeniorB is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group SeniorC\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"SeniorC\" class=\"col-sm-2 control-label\">SeniorC <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.SeniorC\" placeholder=\"SeniorC\" v-validate:senior_c=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.senior_c.required\">SeniorC is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group HighYield\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"HighYield\" class=\"col-sm-2 control-label\">HighYield <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.HighYield\" placeholder=\"HighYield\" v-validate:high_yield=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.high_yield.required\">HighYield is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group InvestorTranche\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"InvestorTranche\" class=\"col-sm-2 control-label\">InvestorTranche <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.InvestorTranche\" placeholder=\"InvestorTranche\" v-validate:investor_tranche=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.investor_tranche.required\">InvestorTranche is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group InvestorAmount\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"InvestorAmount\" class=\"col-sm-2 control-label\">InvestorAmount <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.InvestorAmount\" placeholder=\"InvestorAmount\" v-validate:investor_amount=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.investor_amount.required\">InvestorAmount is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Grossyield\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Grossyield\" class=\"col-sm-2 control-label\">Grossyield <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Grossyield\" placeholder=\"Grossyield\" v-validate:grossyield=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.grossyield.required\">Grossyield is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group NetYield\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"NetYield\" class=\"col-sm-2 control-label\">NetYield <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.NetYield\" placeholder=\"NetYield\" v-validate:net_yield=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.net_yield.required\">NetYield is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Surface\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Surface\" class=\"col-sm-2 control-label\">Surface <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.Surface\" placeholder=\"Surface\" v-validate:surface=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.surface.required\">Surface is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group GeneralPartner\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"GeneralPartner\" class=\"col-sm-2 control-label\">GeneralPartner <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.GeneralPartner\" placeholder=\"GeneralPartner\" v-validate:general_partner=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.general_partner.required\">GeneralPartner is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Fund\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Fund\" class=\"col-sm-2 control-label\">Fund <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Fund\" placeholder=\"Fund\" v-validate:fund=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.fund.required\">Fund is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group TargetRegion\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"TargetRegion\" class=\"col-sm-2 control-label\">TargetRegion <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.TargetRegion\" placeholder=\"TargetRegion\" v-validate:target_region=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.target_region.required\">TargetRegion is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group LegalForm\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"LegalForm\" class=\"col-sm-2 control-label\">LegalForm <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.LegalForm\" placeholder=\"LegalForm\" v-validate:legal_form=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.legal_form.required\">LegalForm is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Countryofresidence\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Countryofresidence\" class=\"col-sm-2 control-label\">Countryofresidence <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Countryofresidence\" placeholder=\"Countryofresidence\" v-validate:countryofresidence=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.countryofresidence.required\">Countryofresidence is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Typesofshares\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Typesofshares\" class=\"col-sm-2 control-label\">Typesofshares <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Typesofshares\" placeholder=\"Typesofshares\" v-validate:typesofshares=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.typesofshares.required\">Typesofshares is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Currency\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Currency\" class=\"col-sm-2 control-label\">Currency <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Currency\" placeholder=\"Currency\" v-validate:currency=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.currency.required\">Currency is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Fees\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Fees\" class=\"col-sm-2 control-label\">Fees <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Fees\" placeholder=\"Fees\" v-validate:fees=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.fees.required\">Fees is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Carried\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Carried\" class=\"col-sm-2 control-label\">Carried <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Carried\" placeholder=\"Carried\" v-validate:carried=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.carried.required\">Carried is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Hurlde\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Hurlde\" class=\"col-sm-2 control-label\">Hurlde <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.Hurlde\" placeholder=\"Hurlde\" v-validate:hurlde=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.hurlde.required\">Hurlde is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group RestofTeam\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"RestofTeam\" class=\"col-sm-2 control-label\">RestofTeam <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.RestofTeam\" placeholder=\"RestofTeam\" v-validate:restof_team=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.restof_team.required\">RestofTeam is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group CommentsRestofteam\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"CommentsRestofteam\" class=\"col-sm-2 control-label\">CommentsRestofteam <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.CommentsRestofteam\" placeholder=\"CommentsRestofteam\" v-validate:comments_restofteam=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.comments_restofteam.required\">CommentsRestofteam is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group TargetSize\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"TargetSize\" class=\"col-sm-2 control-label\">TargetSize <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.TargetSize\" placeholder=\"TargetSize\" v-validate:target_size=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.target_size.required\">TargetSize is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group fstClosingTarget\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"fstClosingTarget\" class=\"col-sm-2 control-label\">FstClosingTarget <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.fstClosingTarget\" placeholder=\"fstClosingTarget\" v-validate:fst_closing_target=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.fst_closing_target.required\">FstClosingTarget is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group fstClosingDate\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"fstClosingDate\" class=\"col-sm-2 control-label\">FstClosingDate <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.fstClosingDate\" placeholder=\"fstClosingDate\" v-validate:fst_closing_date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.fst_closing_date.required\">FstClosingDate is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group fstClosingDone\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"fstClosingDone\" class=\"col-sm-2 control-label\">FstClosingDone <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.fstClosingDone\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.fstClosingDone\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.fstClosingDone\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group sstClosingTarget\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"sstClosingTarget\" class=\"col-sm-2 control-label\">SstClosingTarget <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.sstClosingTarget\" placeholder=\"sstClosingTarget\" v-validate:sst_closing_target=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.sst_closing_target.required\">SstClosingTarget is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group sstClosingDate\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"sstClosingDate\" class=\"col-sm-2 control-label\">SstClosingDate <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.sstClosingDate\" placeholder=\"sstClosingDate\" v-validate:sst_closing_date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.sst_closing_date.required\">SstClosingDate is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group sstClosingDone\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"sstClosingDone\" class=\"col-sm-2 control-label\">SstClosingDone <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.sstClosingDone\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.sstClosingDone\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.sstClosingDone\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group HardCap\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"HardCap\" class=\"col-sm-2 control-label\">HardCap <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.HardCap\" placeholder=\"HardCap\" v-validate:hard_cap=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.hard_cap.required\">HardCap is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group AmountRaised\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"AmountRaised\" class=\"col-sm-2 control-label\">AmountRaised <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.AmountRaised\" placeholder=\"AmountRaised\" v-validate:amount_raised=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.amount_raised.required\">AmountRaised is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group DateOfAmountRaised\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"DateOfAmountRaised\" class=\"col-sm-2 control-label\">DateOfAmountRaised <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.DateOfAmountRaised\" placeholder=\"DateOfAmountRaised\" v-validate:date_of_amount_raised=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.date_of_amount_raised.required\">DateOfAmountRaised is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group KeyLPS\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"KeyLPS\" class=\"col-sm-2 control-label\">KeyLPS <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.KeyLPS\" placeholder=\"KeyLPS\" v-validate:key_l_p_s=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.key_l_p_s.required\">KeyLPS is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group InvestorShare\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"InvestorShare\" class=\"col-sm-2 control-label\">InvestorShare <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.InvestorShare\" placeholder=\"InvestorShare\" v-validate:investor_share=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.investor_share.required\">InvestorShare is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group TargetIRR\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"TargetIRR\" class=\"col-sm-2 control-label\">TargetIRR <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.TargetIRR\" placeholder=\"TargetIRR\" v-validate:target_i_r_r=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.target_i_r_r.required\">TargetIRR is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group TargetMoM\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"TargetMoM\" class=\"col-sm-2 control-label\">TargetMoM <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.TargetMoM\" placeholder=\"TargetMoM\" v-validate:target_mo_m=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.target_mo_m.required\">TargetMoM is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group InvestmentPeriod\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"InvestmentPeriod\" class=\"col-sm-2 control-label\">InvestmentPeriod <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.InvestmentPeriod\" placeholder=\"InvestmentPeriod\" v-validate:investment_period=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.investment_period.required\">InvestmentPeriod is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group TotalLife\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"TotalLife\" class=\"col-sm-2 control-label\">TotalLife <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.TotalLife\" placeholder=\"TotalLife\" v-validate:total_life=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.total_life.required\">TotalLife is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Presentations\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Presentations\" class=\"col-sm-2 control-label\">Presentations <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.Presentations\" placeholder=\"Presentations\" v-validate:presentations=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.presentations.required\">Presentations is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Notes\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Notes\" class=\"col-sm-2 control-label\">Notes <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.Notes\" placeholder=\"Notes\" v-validate:notes=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.notes.required\">Notes is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group IM\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"IM\" class=\"col-sm-2 control-label\">IM <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.IM\" placeholder=\"IM\" v-validate:i_m=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.i_m.required\">IM is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group LOIDoc\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"LOIDoc\" class=\"col-sm-2 control-label\">LOIDoc <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.LOIDoc\" placeholder=\"LOIDoc\" v-validate:l_o_i_doc=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.l_o_i_doc.required\">LOIDoc is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group VDD\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"VDD\" class=\"col-sm-2 control-label\">VDD <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.VDD\" placeholder=\"VDD\" v-validate:v_d_d=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.v_d_d.required\">VDD is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Other\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Other\" class=\"col-sm-2 control-label\">Other <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.Other\" placeholder=\"Other\" v-validate:other=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.other.required\">Other is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group Memo\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"Memo\" class=\"col-sm-2 control-label\">Memo <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.Memo\" placeholder=\"Memo\" v-validate:memo=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.memo.required\">Memo is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group dealdone\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"dealdone\" class=\"col-sm-2 control-label\">Dealdone <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.dealdone\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.dealdone\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.dealdone\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group dealdoneby\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"dealdoneby\" class=\"col-sm-2 control-label\">Dealdoneby <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.dealdoneby\" placeholder=\"dealdoneby\" v-validate:dealdoneby=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.dealdoneby.required\">Dealdoneby is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group LastModifiedUser\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"LastModifiedUser\" class=\"col-sm-2 control-label\">LastModifiedUser <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.LastModifiedUser\" placeholder=\"LastModifiedUser\" v-validate:last_modified_user=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.last_modified_user.required\">LastModifiedUser is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group SeniorARate\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"SeniorARate\" class=\"col-sm-2 control-label\">SeniorARate <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.SeniorARate\" placeholder=\"SeniorARate\" v-validate:senior_a_rate=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.senior_a_rate.required\">SeniorARate is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group SeniorBRate\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"SeniorBRate\" class=\"col-sm-2 control-label\">SeniorBRate <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.SeniorBRate\" placeholder=\"SeniorBRate\" v-validate:senior_b_rate=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.senior_b_rate.required\">SeniorBRate is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group SeniorCRate\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"SeniorCRate\" class=\"col-sm-2 control-label\">SeniorCRate <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.SeniorCRate\" placeholder=\"SeniorCRate\" v-validate:senior_c_rate=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.senior_c_rate.required\">SeniorCRate is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         Deal <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-76626d1c", module.exports)
  } else {
    hotAPI.update("_v-76626d1c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],72:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Deal/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/deals/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/deals', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/deals/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/deals';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Deal  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Client</th>\n<th>DealsType</th>\n<th>Country</th>\n<th>Companies IDCompani</th>\n<th>ProjectName</th>\n<th>Activities</th>\n<th>AssetName</th>\n<th>Categories</th>\n<th>Stage</th>\n<th>Shareholders</th>\n<th>LeadInvestor</th>\n<th>Sourcing</th>\n<th>Sourcingindividual</th>\n<th>Term</th>\n<th>Next Steps</th>\n<th>Process</th>\n<th>Why turn down</th>\n<th>Work done</th>\n<th>Due diligence</th>\n<th>PPM</th>\n<th>Meeting with sellor</th>\n<th>Meetings with management</th>\n<th>Meetings with banks</th>\n<th>Letter of intend</th>\n<th>Reference calls</th>\n<th>Others</th>\n<th>Meeting with Partners</th>\n<th>ReferenceCalls</th>\n<th>Status</th>\n<th>PriceEV</th>\n<th>Equity</th>\n<th>EquityInvestor</th>\n<th>TotalDebt</th>\n<th>SeniorA</th>\n<th>SeniorB</th>\n<th>SeniorC</th>\n<th>HighYield</th>\n<th>InvestorTranche</th>\n<th>InvestorAmount</th>\n<th>Grossyield</th>\n<th>NetYield</th>\n<th>Surface</th>\n<th>GeneralPartner</th>\n<th>Fund</th>\n<th>TargetRegion</th>\n<th>LegalForm</th>\n<th>Countryofresidence</th>\n<th>Typesofshares</th>\n<th>Currency</th>\n<th>Fees</th>\n<th>Carried</th>\n<th>Hurlde</th>\n<th>RestofTeam</th>\n<th>CommentsRestofteam</th>\n<th>TargetSize</th>\n<th>FstClosingTarget</th>\n<th>FstClosingDate</th>\n<th>FstClosingDone</th>\n<th>SstClosingTarget</th>\n<th>SstClosingDate</th>\n<th>SstClosingDone</th>\n<th>HardCap</th>\n<th>AmountRaised</th>\n<th>DateOfAmountRaised</th>\n<th>KeyLPS</th>\n<th>InvestorShare</th>\n<th>TargetIRR</th>\n<th>TargetMoM</th>\n<th>InvestmentPeriod</th>\n<th>TotalLife</th>\n<th>Presentations</th>\n<th>Notes</th>\n<th>IM</th>\n<th>LOIDoc</th>\n<th>VDD</th>\n<th>Other</th>\n<th>Memo</th>\n<th>Dealdone</th>\n<th>Dealdoneby</th>\n<th>LastModifiedUser</th>\n<th>SeniorARate</th>\n<th>SeniorBRate</th>\n<th>SeniorCRate</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.client_id}}</td>\n<td>{{data.DealsType}}</td>\n<td>{{data.Country}}</td>\n<td>{{data.Companies_IDCompani}}</td>\n<td>{{data.ProjectName}}</td>\n<td>{{data.Activities}}</td>\n<td>{{data.AssetName}}</td>\n<td>{{data.Categories}}</td>\n<td>{{data.Stage}}</td>\n<td>{{data.Shareholders}}</td>\n<td>{{data.LeadInvestor}}</td>\n<td>{{data.Sourcing}}</td>\n<td>{{data.Sourcingindividual}}</td>\n<td>{{data.Term}}</td>\n<td>{{data.Next_Steps}}</td>\n<td>{{data.Process}}</td>\n<td>{{data.Why_turn_down}}</td>\n<td>{{data.Work_done}}</td>\n<td>{{data.Due_diligence}}</td>\n<td>{{data.PPM}}</td>\n<td>{{data.Meeting_with_sellor}}</td>\n<td>{{data.Meetings_with_management}}</td>\n<td>{{data.Meetings_with_banks}}</td>\n<td>{{data.Letter_of_intend}}</td>\n<td>{{data.reference_calls}}</td>\n<td>{{data.Others}}</td>\n<td>{{data.Meeting_with_Partners}}</td>\n<td>{{data.ReferenceCalls}}</td>\n<td>{{data.Status}}</td>\n<td>{{data.PriceEV}}</td>\n<td>{{data.Equity}}</td>\n<td>{{data.EquityInvestor}}</td>\n<td>{{data.TotalDebt}}</td>\n<td>{{data.SeniorA}}</td>\n<td>{{data.SeniorB}}</td>\n<td>{{data.SeniorC}}</td>\n<td>{{data.HighYield}}</td>\n<td>{{data.InvestorTranche}}</td>\n<td>{{data.InvestorAmount}}</td>\n<td>{{data.Grossyield}}</td>\n<td>{{data.NetYield}}</td>\n<td>{{data.Surface}}</td>\n<td>{{data.GeneralPartner}}</td>\n<td>{{data.Fund}}</td>\n<td>{{data.TargetRegion}}</td>\n<td>{{data.LegalForm}}</td>\n<td>{{data.Countryofresidence}}</td>\n<td>{{data.Typesofshares}}</td>\n<td>{{data.Currency}}</td>\n<td>{{data.Fees}}</td>\n<td>{{data.Carried}}</td>\n<td>{{data.Hurlde}}</td>\n<td>{{data.RestofTeam}}</td>\n<td>{{data.CommentsRestofteam}}</td>\n<td>{{data.TargetSize}}</td>\n<td>{{data.fstClosingTarget}}</td>\n<td>{{data.fstClosingDate}}</td>\n<td>{{data.fstClosingDone}}</td>\n<td>{{data.sstClosingTarget}}</td>\n<td>{{data.sstClosingDate}}</td>\n<td>{{data.sstClosingDone}}</td>\n<td>{{data.HardCap}}</td>\n<td>{{data.AmountRaised}}</td>\n<td>{{data.DateOfAmountRaised}}</td>\n<td>{{data.KeyLPS}}</td>\n<td>{{data.InvestorShare}}</td>\n<td>{{data.TargetIRR}}</td>\n<td>{{data.TargetMoM}}</td>\n<td>{{data.InvestmentPeriod}}</td>\n<td>{{data.TotalLife}}</td>\n<td>{{data.Presentations}}</td>\n<td>{{data.Notes}}</td>\n<td>{{data.IM}}</td>\n<td>{{data.LOIDoc}}</td>\n<td>{{data.VDD}}</td>\n<td>{{data.Other}}</td>\n<td>{{data.Memo}}</td>\n<td>{{data.dealdone}}</td>\n<td>{{data.dealdoneby}}</td>\n<td>{{data.LastModifiedUser}}</td>\n<td>{{data.SeniorARate}}</td>\n<td>{{data.SeniorBRate}}</td>\n<td>{{data.SeniorCRate}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <deal-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></deal-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-0e701f68", module.exports)
  } else {
    hotAPI.update("_v-0e701f68", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Deal/form.vue":71,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],73:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealableForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealables/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Dealable Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<dealable-form :created-object.sync=\"createdDealable\"></dealable-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-9c03c7c4", module.exports)
  } else {
    hotAPI.update("_v-9c03c7c4", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealable/form.vue":74,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],74:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealables/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealables', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealable Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group deals_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"deals_id\" class=\"col-sm-2 control-label\">Deals <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.deals_id\" placeholder=\"deals_id\" v-validate:deals_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.deals_id.required\">Deals is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group dealable_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"dealable_id\" class=\"col-sm-2 control-label\">Dealable <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.dealable_id\" placeholder=\"dealable_id\" v-validate:dealable_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.dealable_id.required\">Dealable is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group dealable_type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"dealable_type\" class=\"col-sm-2 control-label\">Dealable type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.dealable_type\" placeholder=\"dealable_type\" v-validate:dealable_type=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.dealable_type.required\">Dealable type is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealable <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-6ebccdd8", module.exports)
  } else {
    hotAPI.update("_v-6ebccdd8", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],75:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealableForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealables/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealables', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealables';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealable  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Deals</th>\n<th>Dealable</th>\n<th>Dealable type</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.deals_id}}</td>\n<td>{{data.dealable_id}}</td>\n<td>{{data.dealable_type}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealable-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealable-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-ba94169c", module.exports)
  } else {
    hotAPI.update("_v-ba94169c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealable/form.vue":74,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],76:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealscategory/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Vehicle/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealscategoryForm: _form2.default,
        vehicles: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealscategories/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Dealscategory Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#vehicles\" data-toggle=\"tab\">vehicles</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <dealscategory-form :created-object.sync=\"createdDealscategory\"></dealscategory-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"vehicles\">\n                              <vehicles :fromid=\"getId()\" :url=\"getUrl('vehicles')\"></vehicles>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-c536ab0e", module.exports)
  } else {
    hotAPI.update("_v-c536ab0e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealscategory/form.vue":77,"../Vehicle/list.vue":206,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],77:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealscategories/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealscategories', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.idDealsCategories;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/dealscategories/' + object.idDealsCategories);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/dealscategories/' + object.idDealsCategories, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/dealscategories');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/dealscategories/' + object.idDealsCategories, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/dealscategories');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealscategory Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Description\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Description\" class=\"col-sm-2 control-label\">Description <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Description\" placeholder=\"Description\" v-validate:description=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.description.required\">Description is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealscategory <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-5a235c33", module.exports)
  } else {
    hotAPI.update("_v-5a235c33", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],78:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealscategory/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealscategoryForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealscategories/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealscategories', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/dealscategories/' + data.idDealsCategories);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealscategories';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealscategory  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IdDealsCategories</th>\n<th>Description</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.idDealsCategories}}</td>\n<td>{{data.Description}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealscategory-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealscategory-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-e3c6f9e6", module.exports)
  } else {
    hotAPI.update("_v-e3c6f9e6", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealscategory/form.vue":77,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],79:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsfcf/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsfcfForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealsfcf/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Dealsfcf Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<dealsfcf-form :created-object.sync=\"createdDealsfcf\"></dealsfcf-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-4e3a4f02", module.exports)
  } else {
    hotAPI.update("_v-4e3a4f02", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsfcf/form.vue":80,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],80:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealsfcf/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealsfcf', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealsfcf Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Deals_idDeals\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Deals_idDeals\" class=\"col-sm-2 control-label\">Deals idDeals <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.Deals_idDeals\" placeholder=\"Deals_idDeals\" v-validate:deals_id_deals=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.deals_id_deals.required\">Deals idDeals is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group FCF_idFCF\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"FCF_idFCF\" class=\"col-sm-2 control-label\">FCF idFCF <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.FCF_idFCF\" placeholder=\"FCF_idFCF\" v-validate:f_c_f_id_f_c_f=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.f_c_f_id_f_c_f.required\">FCF idFCF is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealsfcf <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-0af900bc", module.exports)
  } else {
    hotAPI.update("_v-0af900bc", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],81:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsfcf/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsfcfForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealsfcf/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealsfcf', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealsfcf';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealsfcf  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Deals idDeals</th>\n<th>FCF idFCF</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.Deals_idDeals}}</td>\n<td>{{data.FCF_idFCF}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealsfcf-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealsfcf-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3ef22796", module.exports)
  } else {
    hotAPI.update("_v-3ef22796", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsfcf/form.vue":80,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],82:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealspartner/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealspartnerForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealspartners/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Dealspartner Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<dealspartner-form :created-object.sync=\"createdDealspartner\"></dealspartner-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-13a0013a", module.exports)
  } else {
    hotAPI.update("_v-13a0013a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealspartner/form.vue":83,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],83:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealspartners/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealspartners', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealspartner Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Deals_idDeals\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Deals_idDeals\" class=\"col-sm-2 control-label\">Deals idDeals <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.Deals_idDeals\" placeholder=\"Deals_idDeals\" v-validate:deals_id_deals=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.deals_id_deals.required\">Deals idDeals is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Partners_idPartners\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Partners_idPartners\" class=\"col-sm-2 control-label\">Partners idPartners <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.Partners_idPartners\" placeholder=\"Partners_idPartners\" v-validate:partners_id_partners=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.partners_id_partners.required\">Partners idPartners is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealspartner <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-9a229dc6", module.exports)
  } else {
    hotAPI.update("_v-9a229dc6", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],84:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealspartner/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealspartnerForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealspartners/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealspartners', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealspartners';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealspartner  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Deals idDeals</th>\n<th>Partners idPartners</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.Deals_idDeals}}</td>\n<td>{{data.Partners_idPartners}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealspartner-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealspartner-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-32305012", module.exports)
  } else {
    hotAPI.update("_v-32305012", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealspartner/form.vue":83,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],85:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsstage/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Vehicle/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsstageForm: _form2.default,
        vehicles: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealsstage/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Dealsstage Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#vehicles\" data-toggle=\"tab\">vehicles</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <dealsstage-form :created-object.sync=\"createdDealsstage\"></dealsstage-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"vehicles\">\n                              <vehicles :fromid=\"getId()\" :url=\"getUrl('vehicles')\"></vehicles>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-27c6846d", module.exports)
  } else {
    hotAPI.update("_v-27c6846d", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsstage/form.vue":86,"../Vehicle/list.vue":206,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],86:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealsstage/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealsstage', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.idDealsStage;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/dealsstage/' + object.idDealsStage);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/dealsstage/' + object.idDealsStage, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/dealsstage');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/dealsstage/' + object.idDealsStage, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/dealsstage');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealsstage Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Description\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Description\" class=\"col-sm-2 control-label\">Description <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Description\" placeholder=\"Description\" v-validate:description=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.description.required\">Description is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealsstage <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-36f593b2", module.exports)
  } else {
    hotAPI.update("_v-36f593b2", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],87:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsstage/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsstageForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealsstage/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealsstage', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/dealsstage/' + data.idDealsStage);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealsstage';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealsstage  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IdDealsStage</th>\n<th>Description</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.idDealsStage}}</td>\n<td>{{data.Description}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealsstage-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealsstage-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-187e5d01", module.exports)
  } else {
    hotAPI.update("_v-187e5d01", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsstage/form.vue":86,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],88:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsstatus/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsstatusForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealsstatus/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Dealsstatus Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<dealsstatus-form :created-object.sync=\"createdDealsstatus\"></dealsstatus-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-70c3ab85", module.exports)
  } else {
    hotAPI.update("_v-70c3ab85", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsstatus/form.vue":89,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],89:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealsstatus/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealsstatus', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.idDealsStatus;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/dealsstatus/' + object.idDealsStatus, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/dealsstatus');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/dealsstatus/' + object.idDealsStatus, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/dealsstatus');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealsstatus Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Status\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Status\" class=\"col-sm-2 control-label\">Status <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Status\" placeholder=\"Status\" v-validate:status=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.status.required\">Status is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealsstatus <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2d825d3f", module.exports)
  } else {
    hotAPI.update("_v-2d825d3f", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],90:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsstatus/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsstatusForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealsstatus/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealsstatus', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/dealsstatus/' + data.idDealsStatus);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealsstatus';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealsstatus  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IdDealsStatus</th>\n<th>Status</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.idDealsStatus}}</td>\n<td>{{data.Status}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealsstatus-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealsstatus-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-617b8419", module.exports)
  } else {
    hotAPI.update("_v-617b8419", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsstatus/form.vue":89,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],91:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsterm/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Vehicle/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealstermForm: _form2.default,
        vehicles: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealsterms/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Dealsterm Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#vehicles\" data-toggle=\"tab\">vehicles</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <dealsterm-form :created-object.sync=\"createdDealsterm\"></dealsterm-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"vehicles\">\n                              <vehicles :fromid=\"getId()\" :url=\"getUrl('vehicles')\"></vehicles>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-7bf3fc6a", module.exports)
  } else {
    hotAPI.update("_v-7bf3fc6a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsterm/form.vue":92,"../Vehicle/list.vue":206,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],92:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealsterms/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealsterms', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.idDealsTerm;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/dealsterms/' + object.idDealsTerm);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/dealsterms/' + object.idDealsTerm, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/dealsterms');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/dealsterms/' + object.idDealsTerm, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/dealsterms');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealsterm Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Description\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Description\" class=\"col-sm-2 control-label\">Description <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Description\" placeholder=\"Description\" v-validate:description=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.description.required\">Description is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Type\" class=\"col-sm-2 control-label\">Type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <!--\n            <label class=\"radio-inline\">\n                <input v-model=\"object.Type\" type=\"radio\" value=\"1\"> Yes\n            </label>\n            <label class=\"radio-inline\">\n                <input v-model=\"object.Type\" type=\"radio\" value=\"0\"> No\n            </label>-->\n\n            <ui-switch :value.sync=\"object.Type\" label=\"\"></ui-switch>\n                \n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealsterm <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-7ec4b385", module.exports)
  } else {
    hotAPI.update("_v-7ec4b385", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],93:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsterm/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealstermForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealsterms/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealsterms', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/dealsterms/' + data.idDealsTerm);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealsterms';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealsterm  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IdDealsTerm</th>\n<th>Description</th>\n<th>Type</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.idDealsTerm}}</td>\n<td>{{data.Description}}</td>\n<td>{{data.Type}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealsterm-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealsterm-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-9a844b42", module.exports)
  } else {
    hotAPI.update("_v-9a844b42", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsterm/form.vue":92,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],94:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsuser/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsuserForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealsuser/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Dealsuser Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<dealsuser-form :created-object.sync=\"createdDealsuser\"></dealsuser-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-5212354c", module.exports)
  } else {
    hotAPI.update("_v-5212354c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsuser/form.vue":95,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],95:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealsuser/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealsuser', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.IDdeal;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/dealsuser/' + object.IDdeal, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/dealsuser');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/dealsuser/' + object.IDdeal, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/dealsuser');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealsuser Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group IDdeal\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDdeal\" class=\"col-sm-2 control-label\">IDdeal <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDdeal\" placeholder=\"IDdeal\" v-validate:i_ddeal=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_ddeal.required\">IDdeal is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group IDUser\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDUser\" class=\"col-sm-2 control-label\">IDUser <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDUser\" placeholder=\"IDUser\" v-validate:i_d_user=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_d_user.required\">IDUser is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealsuser <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-0ed0e706", module.exports)
  } else {
    hotAPI.update("_v-0ed0e706", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],96:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsuser/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsuserForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealsuser/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealsuser', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/dealsuser/' + data.IDdeal);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealsuser';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealsuser  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IDdeal</th>\n<th>IDUser</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.IDdeal}}</td>\n<td>{{data.IDUser}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealsuser-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealsuser-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-42ca0de0", module.exports)
  } else {
    hotAPI.update("_v-42ca0de0", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsuser/form.vue":95,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],97:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsyear/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsyearForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealsyear/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Dealsyear Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<dealsyear-form :created-object.sync=\"createdDealsyear\"></dealsyear-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-4cd4791a", module.exports)
  } else {
    hotAPI.update("_v-4cd4791a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsyear/form.vue":98,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],98:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealsyear/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealsyear', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealsyear Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Deals_idDeals\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Deals_idDeals\" class=\"col-sm-2 control-label\">Deals idDeals <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.Deals_idDeals\" placeholder=\"Deals_idDeals\" v-validate:deals_id_deals=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.deals_id_deals.required\">Deals idDeals is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group year\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"year\" class=\"col-sm-2 control-label\">Year <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.year\" placeholder=\"year\" v-validate:year=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.year.required\">Year is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group sales\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"sales\" class=\"col-sm-2 control-label\">Sales <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.sales\" placeholder=\"sales\" v-validate:sales=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.sales.required\">Sales is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Grossrents\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Grossrents\" class=\"col-sm-2 control-label\">Grossrents <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.Grossrents\" placeholder=\"Grossrents\" v-validate:grossrents=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.grossrents.required\">Grossrents is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group EBITDA\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"EBITDA\" class=\"col-sm-2 control-label\">EBITDA <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.EBITDA\" placeholder=\"EBITDA\" v-validate:e_b_i_t_d_a=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.e_b_i_t_d_a.required\">EBITDA is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Netrents\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Netrents\" class=\"col-sm-2 control-label\">Netrents <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.Netrents\" placeholder=\"Netrents\" v-validate:netrents=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.netrents.required\">Netrents is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group EBIT\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"EBIT\" class=\"col-sm-2 control-label\">EBIT <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.EBIT\" placeholder=\"EBIT\" v-validate:e_b_i_t=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.e_b_i_t.required\">EBIT is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealsyear <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-09932ad4", module.exports)
  } else {
    hotAPI.update("_v-09932ad4", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],99:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealsyear/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealsyearForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealsyear/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealsyear', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealsyear';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealsyear  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Deals idDeals</th>\n<th>Year</th>\n<th>Sales</th>\n<th>Grossrents</th>\n<th>EBITDA</th>\n<th>Netrents</th>\n<th>EBIT</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.Deals_idDeals}}</td>\n<td>{{data.year}}</td>\n<td>{{data.sales}}</td>\n<td>{{data.Grossrents}}</td>\n<td>{{data.EBITDA}}</td>\n<td>{{data.Netrents}}</td>\n<td>{{data.EBIT}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealsyear-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealsyear-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3d8c51ae", module.exports)
  } else {
    hotAPI.update("_v-3d8c51ae", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealsyear/form.vue":98,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],100:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealworker/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealworkerForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/dealworker/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Dealworker Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<dealworker-form :created-object.sync=\"createdDealworker\"></dealworker-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-94ce6e8c", module.exports)
  } else {
    hotAPI.update("_v-94ce6e8c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealworker/form.vue":101,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],101:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/dealworker/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/dealworker', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.ID;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/dealworker/' + object.ID, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/dealworker');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/dealworker/' + object.ID, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/dealworker');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Dealworker Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group IDDeal\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDDeal\" class=\"col-sm-2 control-label\">IDDeal <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDDeal\" placeholder=\"IDDeal\" v-validate:i_d_deal=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_d_deal.required\">IDDeal is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Type\" class=\"col-sm-2 control-label\">Type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Type\" placeholder=\"Type\" v-validate:type=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.type.required\">Type is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Name\" placeholder=\"Name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Background\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Background\" class=\"col-sm-2 control-label\">Background <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <textarea class=\"form-control\" v-model=\"object.Background\" placeholder=\"Background\" v-validate:background=\"{required:true}\"></textarea>\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.background.required\">Background is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Dealworker <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-72577a74", module.exports)
  } else {
    hotAPI.update("_v-72577a74", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],102:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Dealworker/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        dealworkerForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/dealworker/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/dealworker', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/dealworker/' + data.ID);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/dealworker';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Dealworker  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>ID</th>\n<th>IDDeal</th>\n<th>Type</th>\n<th>Name</th>\n<th>Background</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.ID}}</td>\n<td>{{data.IDDeal}}</td>\n<td>{{data.Type}}</td>\n<td>{{data.Name}}</td>\n<td>{{data.Background}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <dealworker-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></dealworker-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-b35ebd64", module.exports)
  } else {
    hotAPI.update("_v-b35ebd64", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealworker/form.vue":101,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],103:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Document/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        documentForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/documents/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Document Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<document-form :created-object.sync=\"createdDocument\"></document-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-34f8132e", module.exports)
  } else {
    hotAPI.update("_v-34f8132e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Document/form.vue":104,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],104:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/documents/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/documents', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/documents/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/documents');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/documents/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/documents');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Document Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group path\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"path\" class=\"col-sm-2 control-label\">Path <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.path\" placeholder=\"path\" v-validate:path=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.path.required\">Path is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group extension\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"extension\" class=\"col-sm-2 control-label\">Extension <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.extension\" placeholder=\"extension\" v-validate:extension=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.extension.required\">Extension is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Document <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-bb7aafba", module.exports)
  } else {
    hotAPI.update("_v-bb7aafba", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],105:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Document/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        documentForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/documents/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/documents', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/documents/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/documents';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Document  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Path</th>\n<th>Name</th>\n<th>Extension</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.path}}</td>\n<td>{{data.name}}</td>\n<td>{{data.extension}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <document-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></document-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-53886206", module.exports)
  } else {
    hotAPI.update("_v-53886206", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Document/form.vue":104,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],106:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Documentable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        documentableForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/documentables/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Documentable Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<documentable-form :created-object.sync=\"createdDocumentable\"></documentable-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3fdd8b62", module.exports)
  } else {
    hotAPI.update("_v-3fdd8b62", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Documentable/form.vue":107,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],107:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/documentables/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/documentables', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Documentable Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group document_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"document_id\" class=\"col-sm-2 control-label\">Document <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.document_id\" placeholder=\"document_id\" v-validate:document_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.document_id.required\">Document is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group documentable_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"documentable_id\" class=\"col-sm-2 control-label\">Documentable <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.documentable_id\" placeholder=\"documentable_id\" v-validate:documentable_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.documentable_id.required\">Documentable is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group documentable_type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"documentable_type\" class=\"col-sm-2 control-label\">Documentable type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.documentable_type\" placeholder=\"documentable_type\" v-validate:documentable_type=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.documentable_type.required\">Documentable type is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Documentable <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-c66027ee", module.exports)
  } else {
    hotAPI.update("_v-c66027ee", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],108:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Documentable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        documentableForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/documentables/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/documentables', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/documentables';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Documentable  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Document</th>\n<th>Documentable</th>\n<th>Documentable type</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.document_id}}</td>\n<td>{{data.documentable_id}}</td>\n<td>{{data.documentable_type}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <documentable-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></documentable-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-5e6dda3a", module.exports)
  } else {
    hotAPI.update("_v-5e6dda3a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Documentable/form.vue":107,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],109:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Family/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Vehicle/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        familyForm: _form2.default,
        vehicles: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/families/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Family Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#vehicles\" data-toggle=\"tab\">vehicles</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <family-form :created-object.sync=\"createdFamily\"></family-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"vehicles\">\n                              <vehicles :fromid=\"getId()\" :url=\"getUrl('vehicles')\"></vehicles>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-475c3200", module.exports)
  } else {
    hotAPI.update("_v-475c3200", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Family/form.vue":110,"../Vehicle/list.vue":206,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],110:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../User/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: { userForm: _form2.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchUser();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/families/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/families', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/families/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/families/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/families');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/families/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/families');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};

// import modal from '../../snippets/modal.vue';
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Family Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Family <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-cddece8c", module.exports)
  } else {
    hotAPI.update("_v-cddece8c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../User/form.vue":194,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],111:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Family/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        familyForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/families/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/families', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/families/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/families';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Family  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Updated by</th>\n<th>Name</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td> <td>{{data.name}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <family-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></family-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-65ec80d8", module.exports)
  } else {
    hotAPI.update("_v-65ec80d8", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Family/form.vue":110,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],112:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Fcf/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        fcfForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/fcf/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Fcf Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<fcf-form :created-object.sync=\"createdFcf\"></fcf-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-39e2e116", module.exports)
  } else {
    hotAPI.update("_v-39e2e116", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Fcf/form.vue":113,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],113:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/fcf/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/fcf', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.idFCF;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/fcf/' + object.idFCF, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/fcf');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/fcf/' + object.idFCF, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/fcf');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Fcf Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group year\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"year\" class=\"col-sm-2 control-label\">Year <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.year\" placeholder=\"year\" v-validate:year=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.year.required\">Year is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group FCF\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"FCF\" class=\"col-sm-2 control-label\">FCF <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.FCF\" placeholder=\"FCF\" v-validate:f_c_f=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.f_c_f.required\">FCF is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Fcf <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-c0657da2", module.exports)
  } else {
    hotAPI.update("_v-c0657da2", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],114:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Fcf/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        fcfForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/fcf/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/fcf', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/fcf/' + data.idFCF);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/fcf';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Fcf  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IdFCF</th>\n<th>Year</th>\n<th>FCF</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.idFCF}}</td>\n<td>{{data.year}}</td>\n<td>{{data.FCF}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <fcf-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></fcf-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-58732fee", module.exports)
  } else {
    hotAPI.update("_v-58732fee", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Fcf/form.vue":113,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],115:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Fund/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        fundForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/fund/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Fund Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<fund-form :created-object.sync=\"createdFund\"></fund-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-4d82057f", module.exports)
  } else {
    hotAPI.update("_v-4d82057f", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Fund/form.vue":116,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],116:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/fund/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/fund', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.idFund;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/fund/' + object.idFund, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/fund');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/fund/' + object.idFund, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/fund');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Fund Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group IDDeal\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDDeal\" class=\"col-sm-2 control-label\">IDDeal <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDDeal\" placeholder=\"IDDeal\" v-validate:i_d_deal=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_d_deal.required\">IDDeal is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Name\" placeholder=\"Name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Vintage\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Vintage\" class=\"col-sm-2 control-label\">Vintage <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.Vintage\" placeholder=\"Vintage\" v-validate:vintage=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.vintage.required\">Vintage is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group DPI\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"DPI\" class=\"col-sm-2 control-label\">DPI <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.DPI\" placeholder=\"DPI\" v-validate:d_p_i=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.d_p_i.required\">DPI is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group TVPI\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"TVPI\" class=\"col-sm-2 control-label\">TVPI <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.TVPI\" placeholder=\"TVPI\" v-validate:t_v_p_i=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.t_v_p_i.required\">TVPI is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group TargetIRR\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"TargetIRR\" class=\"col-sm-2 control-label\">TargetIRR <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.TargetIRR\" placeholder=\"TargetIRR\" v-validate:target_i_r_r=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.target_i_r_r.required\">TargetIRR is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group TargetMOM\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"TargetMOM\" class=\"col-sm-2 control-label\">TargetMOM <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.TargetMOM\" placeholder=\"TargetMOM\" v-validate:target_m_o_m=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.target_m_o_m.required\">TargetMOM is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Comments\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Comments\" class=\"col-sm-2 control-label\">Comments <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <textarea class=\"form-control\" v-model=\"object.Comments\" placeholder=\"Comments\" v-validate:comments=\"{required:true}\"></textarea>\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.comments.required\">Comments is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Fund <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-0a40b739", module.exports)
  } else {
    hotAPI.update("_v-0a40b739", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],117:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Fund/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        fundForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/fund/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/fund', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/fund/' + data.idFund);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/fund';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Fund  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IdFund</th>\n<th>IDDeal</th>\n<th>Name</th>\n<th>Vintage</th>\n<th>DPI</th>\n<th>TVPI</th>\n<th>TargetIRR</th>\n<th>TargetMOM</th>\n<th>Comments</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.idFund}}</td>\n<td>{{data.IDDeal}}</td>\n<td>{{data.Name}}</td>\n<td>{{data.Vintage}}</td>\n<td>{{data.DPI}}</td>\n<td>{{data.TVPI}}</td>\n<td>{{data.TargetIRR}}</td>\n<td>{{data.TargetMOM}}</td>\n<td>{{data.Comments}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <fund-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></fund-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3e39de13", module.exports)
  } else {
    hotAPI.update("_v-3e39de13", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Fund/form.vue":116,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],118:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Meeting/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        meetingForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/meetings/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Meeting Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<meeting-form :created-object.sync=\"createdMeeting\"></meeting-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-6e17d243", module.exports)
  } else {
    hotAPI.update("_v-6e17d243", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Meeting/form.vue":119,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],119:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/meetings/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/meetings', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/meetings/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/meetings');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/meetings/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/meetings');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Meeting Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group provider_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"provider_id\" class=\"col-sm-2 control-label\">Provider <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.provider_id\" placeholder=\"provider_id\" v-validate:provider_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.provider_id.required\">Provider is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group user_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"user_id\" class=\"col-sm-2 control-label\">User <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.user_id\" placeholder=\"user_id\" v-validate:user_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.user_id.required\">User is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group external_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"external_id\" class=\"col-sm-2 control-label\">External <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <textarea class=\"form-control\" v-model=\"object.external_id\" placeholder=\"external_id\" v-validate:external_id=\"{required:true}\"></textarea>\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.external_id.required\">External is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Type\" class=\"col-sm-2 control-label\">Type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.Type\" placeholder=\"Type\" v-validate:type=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.type.required\">Type is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Meeting <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2ad683fd", module.exports)
  } else {
    hotAPI.update("_v-2ad683fd", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],120:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Meeting/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        meetingForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/meetings/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/meetings', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/meetings/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/meetings';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Meeting  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Provider</th>\n<th>User</th>\n<th>External</th>\n<th>Type</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.provider_id}}</td>\n<td>{{data.user_id}}</td>\n<td>{{data.external_id}}</td>\n<td>{{data.Type}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <meeting-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></meeting-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-5ecfaad7", module.exports)
  } else {
    hotAPI.update("_v-5ecfaad7", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Meeting/form.vue":119,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],121:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Meetingable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        meetingableForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/meetingables/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Meetingable Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<meetingable-form :created-object.sync=\"createdMeetingable\"></meetingable-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-013f9929", module.exports)
  } else {
    hotAPI.update("_v-013f9929", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Meetingable/form.vue":122,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],122:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/meetingables/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/meetingables', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Meetingable Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group meeting_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"meeting_id\" class=\"col-sm-2 control-label\">Meeting <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.meeting_id\" placeholder=\"meeting_id\" v-validate:meeting_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.meeting_id.required\">Meeting is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group meetingable_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"meetingable_id\" class=\"col-sm-2 control-label\">Meetingable <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.meetingable_id\" placeholder=\"meetingable_id\" v-validate:meetingable_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.meetingable_id.required\">Meetingable is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group meetingable_type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"meetingable_type\" class=\"col-sm-2 control-label\">Meetingable type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.meetingable_type\" placeholder=\"meetingable_type\" v-validate:meetingable_type=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.meetingable_type.required\">Meetingable type is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Meetingable <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-84036a3a", module.exports)
  } else {
    hotAPI.update("_v-84036a3a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],123:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Meetingable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        meetingableForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/meetingables/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/meetingables', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/meetingables';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Meetingable  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Meeting</th>\n<th>Meetingable</th>\n<th>Meetingable type</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.meeting_id}}</td>\n<td>{{data.meetingable_id}}</td>\n<td>{{data.meetingable_type}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <meetingable-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></meetingable-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-1c111c86", module.exports)
  } else {
    hotAPI.update("_v-1c111c86", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Meetingable/form.vue":122,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],124:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Meetingstype/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        meetingstypeForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/meetingstypes/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Meetingstype Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<meetingstype-form :created-object.sync=\"createdMeetingstype\"></meetingstype-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-28c02312", module.exports)
  } else {
    hotAPI.update("_v-28c02312", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Meetingstype/form.vue":125,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],125:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/meetingstypes/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/meetingstypes', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.idMeetingsTypes;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/meetingstypes/' + object.idMeetingsTypes, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/meetingstypes');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/meetingstypes/' + object.idMeetingsTypes, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/meetingstypes');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Meetingstype Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Description\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Description\" class=\"col-sm-2 control-label\">Description <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Description\" placeholder=\"Description\" v-validate:description=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.description.required\">Description is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Meetingstype <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-35025668", module.exports)
  } else {
    hotAPI.update("_v-35025668", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],126:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Meetingstype/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        meetingstypeForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/meetingstypes/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/meetingstypes', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/meetingstypes/' + data.idMeetingsTypes);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/meetingstypes';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Meetingstype  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IdMeetingsTypes</th>\n<th>Description</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.idMeetingsTypes}}</td>\n<td>{{data.Description}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <meetingstype-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></meetingstype-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-1977fba6", module.exports)
  } else {
    hotAPI.update("_v-1977fba6", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Meetingstype/form.vue":125,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],127:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Migration/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        migrationForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/migrations/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Migration Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<migration-form :created-object.sync=\"createdMigration\"></migration-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-75b04260", module.exports)
  } else {
    hotAPI.update("_v-75b04260", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Migration/form.vue":128,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],128:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/migrations/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/migrations', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Migration Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group migration\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"migration\" class=\"col-sm-2 control-label\">Migration <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.migration\" placeholder=\"migration\" v-validate:migration=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.migration.required\">Migration is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group batch\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"batch\" class=\"col-sm-2 control-label\">Batch <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.batch\" placeholder=\"batch\" v-validate:batch=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.batch.required\">Batch is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Migration <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-fc32deec", module.exports)
  } else {
    hotAPI.update("_v-fc32deec", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],129:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Migration/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        migrationForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/migrations/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/migrations', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/migrations';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Migration  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Migration</th>\n<th>Batch</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.migration}}</td>\n<td>{{data.batch}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <migration-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></migration-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-94409138", module.exports)
  } else {
    hotAPI.update("_v-94409138", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Migration/form.vue":128,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],130:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Operation/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        operationForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_currency: false,

            createdCurrency: {},

            CurrencyList: [],

            showForm_account: false,

            createdAccount: {},

            AccountList: [],

            showForm_share: false,

            createdShare: {},

            ShareList: [],

            showForm_operationType: false,

            createdOperationType: {},

            OperationTypeList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/operations/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Operation Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<operation-form :created-object.sync=\"createdOperation\"></operation-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-80660d52", module.exports)
  } else {
    hotAPI.update("_v-80660d52", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Operation/form.vue":131,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],131:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _methods;

// import modal from '../../snippets/modal.vue'; 


var _form = require('../User/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../Currency/form.vue');

var _form4 = _interopRequireDefault(_form3);

var _form5 = require('../Account/form.vue');

var _form6 = _interopRequireDefault(_form5);

var _form7 = require('../Share/form.vue');

var _form8 = _interopRequireDefault(_form7);

var _form9 = require('../OperationType/form.vue');

var _form10 = _interopRequireDefault(_form9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: { userForm: _form2.default,
        currencyForm: _form4.default,
        accountForm: _form6.default,
        shareForm: _form8.default,
        operationTypeForm: _form10.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchUser();
        this.fetchCurrency();
        this.fetchAccount();
        this.fetchShare();
        this.fetchOperationType();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdUser': function createdUser(val, oldVal) {
            this.object.created_by = this.createdUser.id;
        },
        'createdCurrency': function createdCurrency(val, oldVal) {
            this.object.currency_id = this.createdCurrency.id;
        },
        'createdAccount': function createdAccount(val, oldVal) {
            this.object.from_account_id = this.createdAccount.id;
        },
        'createdShare': function createdShare(val, oldVal) {
            this.object.from_share_id = this.createdShare.id;
        },
        'createdOperationType': function createdOperationType(val, oldVal) {
            this.object.type_id = this.createdOperationType.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_currency: false,

            createdCurrency: {},

            CurrencyList: [],

            showForm_account: false,

            createdAccount: {},

            AccountList: [],

            showForm_share: false,

            createdShare: {},

            ShareList: [],

            showForm_operationType: false,

            createdOperationType: {},

            OperationTypeList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: (_methods = {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/operations/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchCurrency: function fetchCurrency() {
            this.$http.get('/api/Middle/currencies').then(function (response) {
                this.CurrencyList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchAccount: function fetchAccount() {
            this.$http.get('/api/Middle/accounts').then(function (response) {
                this.AccountList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchShare: function fetchShare() {
            this.$http.get('/api/Middle/shares').then(function (response) {
                this.ShareList = response.data.data;
            }, function (response) {
                // error callback
            });
        }
    }, (0, _defineProperty3.default)(_methods, 'fetchUser', function fetchUser() {
        this.$http.get('/api/Middle/users').then(function (response) {
            this.UserList = response.data.data;
        }, function (response) {
            // error callback
        });
    }), (0, _defineProperty3.default)(_methods, 'fetchAccount', function fetchAccount() {
        this.$http.get('/api/Middle/accounts').then(function (response) {
            this.AccountList = response.data.data;
        }, function (response) {
            // error callback
        });
    }), (0, _defineProperty3.default)(_methods, 'fetchShare', function fetchShare() {
        this.$http.get('/api/Middle/shares').then(function (response) {
            this.ShareList = response.data.data;
        }, function (response) {
            // error callback
        });
    }), (0, _defineProperty3.default)(_methods, 'fetchOperationType', function fetchOperationType() {
        this.$http.get('/api/Middle/operation_types').then(function (response) {
            this.OperationTypeList = response.data.data;
        }, function (response) {
            // error callback
        });
    }), (0, _defineProperty3.default)(_methods, 'fetchUser', function fetchUser() {
        this.$http.get('/api/Middle/users').then(function (response) {
            this.UserList = response.data.data;
        }, function (response) {
            // error callback
        });
    }), (0, _defineProperty3.default)(_methods, 'fetchUser', function fetchUser() {
        this.$http.get('/api/Middle/users').then(function (response) {
            this.UserList = response.data.data;
        }, function (response) {
            // error callback
        });
    }), (0, _defineProperty3.default)(_methods, 'submit', function submit(object) {
        this.sending = true;

        if (this.mode == 'create') {
            this.$http.post('/api/Middle/operations', object).then(function (response) {
                this.sending = false;
                this.object = response.data.data;

                this.createdId = response.data.data.id;
                this.createdObject = response.data.data;

                if (!this.forceMode) {

                    this.$route.router.go(window.history.back());
                }
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        } // endif mode create
        else if (this.mode == 'update') {

                this.$http.put('/api/Middle/operations/' + object.id, object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdObject = response.data.data;
                    this.$route.router.go('/operations');
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } //endif mode update

    }), (0, _defineProperty3.default)(_methods, 'cancel', function cancel() {
        this.$route.router.go(window.history.back());
    }), (0, _defineProperty3.default)(_methods, 'deleteObject', function deleteObject(object) {

        this.$http.delete('/api/Middle/operations/' + object.id, object).then(function (response) {
            this.sending = false;

            this.$route.router.go('/operations');
        }, function (response) {
            alert('erreur');
            setTimeout(function () {
                debugger;
            }, 10000);
            throw new Error("Something went badly wrong!");
        });
    }), _methods)

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>Operation Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group created_by\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"created_by\" class=\"col-sm-2 control-label\">Created by <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_user\">\n                        <select v-model=\"object.created_by\" class=\"form-control\" v-validate:created_by=\"{required:true}\">\n                            <option v-for=\"User in UserList\" :value=\"User.id\"> \n                                    {{ User.surname }} \n                                    {{ User.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.created_by.required\">Created by is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdUser.id\" v-validate:created_by=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_user\" icon=\"add\" @click.prevent=\"showForm_user= ! showForm_user, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_user\" icon=\"remove\" @click.prevent=\"showForm_user= ! showForm_user\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_user\">\n\n                        <div v-if=\"createdUser.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdUser.surname }} \n                                {{ createdUser.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <user-form force-mode=\"create\" :created-object.sync=\"createdUser\"></user-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group currency_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"currency_id\" class=\"col-sm-2 control-label\">Currency <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_currency\">\n                        <select v-model=\"object.currency_id\" class=\"form-control\" v-validate:currency_id=\"{required:true}\">\n                            <option v-for=\"Currency in CurrencyList\" :value=\"Currency.id\"> \n                                    {{ Currency.name }} \n                                    {{ Currency.symbol }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.currency_id.required\">Currency is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdCurrency.id\" v-validate:currency_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_currency\" icon=\"add\" @click.prevent=\"showForm_currency= ! showForm_currency, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_currency\" icon=\"remove\" @click.prevent=\"showForm_currency= ! showForm_currency\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_currency\">\n\n                        <div v-if=\"createdCurrency.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdCurrency.name }} \n                                {{ createdCurrency.symbol }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <currency-form force-mode=\"create\" :created-object.sync=\"createdCurrency\"></currency-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group from_account_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"from_account_id\" class=\"col-sm-2 control-label\">From account <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_account\">\n                        <select v-model=\"object.from_account_id\" class=\"form-control\" v-validate:from_account_id=\"{required:true}\">\n                            <option v-for=\"Account in AccountList\" :value=\"Account.id\"> \n                                    {{ Account.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.from_account_id.required\">From account is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdAccount.id\" v-validate:from_account_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_account\" icon=\"add\" @click.prevent=\"showForm_account= ! showForm_account, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_account\" icon=\"remove\" @click.prevent=\"showForm_account= ! showForm_account\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_account\">\n\n                        <div v-if=\"createdAccount.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdAccount.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <account-form force-mode=\"create\" :created-object.sync=\"createdAccount\"></account-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group from_share_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"from_share_id\" class=\"col-sm-2 control-label\">From share <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_share\">\n                        <select v-model=\"object.from_share_id\" class=\"form-control\" v-validate:from_share_id=\"{required:true}\">\n                            <option v-for=\"Share in ShareList\" :value=\"Share.id\"> \n                                    {{ Share.name }} \n                                    {{ Share.type }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.from_share_id.required\">From share is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdShare.id\" v-validate:from_share_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_share\" icon=\"add\" @click.prevent=\"showForm_share= ! showForm_share, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_share\" icon=\"remove\" @click.prevent=\"showForm_share= ! showForm_share\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_share\">\n\n                        <div v-if=\"createdShare.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdShare.name }} \n                                {{ createdShare.type }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <share-form force-mode=\"create\" :created-object.sync=\"createdShare\"></share-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group reconciled_by\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"reconciled_by\" class=\"col-sm-2 control-label\">Reconciled by <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_user\">\n                        <select v-model=\"object.reconciled_by\" class=\"form-control\" v-validate:reconciled_by=\"{required:true}\">\n                            <option v-for=\"User in UserList\" :value=\"User.id\"> \n                                    {{ User.surname }} \n                                    {{ User.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.reconciled_by.required\">Reconciled by is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdUser.id\" v-validate:reconciled_by=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_user\" icon=\"add\" @click.prevent=\"showForm_user= ! showForm_user, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_user\" icon=\"remove\" @click.prevent=\"showForm_user= ! showForm_user\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_user\">\n\n                        <div v-if=\"createdUser.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdUser.surname }} \n                                {{ createdUser.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <user-form force-mode=\"create\" :created-object.sync=\"createdUser\"></user-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group to_account_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"to_account_id\" class=\"col-sm-2 control-label\">To account <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_account\">\n                        <select v-model=\"object.to_account_id\" class=\"form-control\" v-validate:to_account_id=\"{required:true}\">\n                            <option v-for=\"Account in AccountList\" :value=\"Account.id\"> \n                                    {{ Account.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.to_account_id.required\">To account is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdAccount.id\" v-validate:to_account_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_account\" icon=\"add\" @click.prevent=\"showForm_account= ! showForm_account, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_account\" icon=\"remove\" @click.prevent=\"showForm_account= ! showForm_account\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_account\">\n\n                        <div v-if=\"createdAccount.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdAccount.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <account-form force-mode=\"create\" :created-object.sync=\"createdAccount\"></account-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group to_share_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"to_share_id\" class=\"col-sm-2 control-label\">To share <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_share\">\n                        <select v-model=\"object.to_share_id\" class=\"form-control\" v-validate:to_share_id=\"{required:true}\">\n                            <option v-for=\"Share in ShareList\" :value=\"Share.id\"> \n                                    {{ Share.name }} \n                                    {{ Share.type }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.to_share_id.required\">To share is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdShare.id\" v-validate:to_share_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_share\" icon=\"add\" @click.prevent=\"showForm_share= ! showForm_share, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_share\" icon=\"remove\" @click.prevent=\"showForm_share= ! showForm_share\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_share\">\n\n                        <div v-if=\"createdShare.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdShare.name }} \n                                {{ createdShare.type }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <share-form force-mode=\"create\" :created-object.sync=\"createdShare\"></share-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group type_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"type_id\" class=\"col-sm-2 control-label\">Type <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_operationType\">\n                        <select v-model=\"object.type_id\" class=\"form-control\" v-validate:type_id=\"{required:true}\">\n                            <option v-for=\"OperationType in OperationTypeList\" :value=\"OperationType.id\"> \n                                    {{ OperationType.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.type_id.required\">Type is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdOperationType.id\" v-validate:type_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_operationType\" icon=\"add\" @click.prevent=\"showForm_operationType= ! showForm_operationType, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_operationType\" icon=\"remove\" @click.prevent=\"showForm_operationType= ! showForm_operationType\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_operationType\">\n\n                        <div v-if=\"createdOperationType.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdOperationType.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <operation-type-form force-mode=\"create\" :created-object.sync=\"createdOperationType\"></operation-type-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group validated_by\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"validated_by\" class=\"col-sm-2 control-label\">Validated by <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_user\">\n                        <select v-model=\"object.validated_by\" class=\"form-control\" v-validate:validated_by=\"{required:true}\">\n                            <option v-for=\"User in UserList\" :value=\"User.id\"> \n                                    {{ User.surname }} \n                                    {{ User.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.validated_by.required\">Validated by is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdUser.id\" v-validate:validated_by=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_user\" icon=\"add\" @click.prevent=\"showForm_user= ! showForm_user, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_user\" icon=\"remove\" @click.prevent=\"showForm_user= ! showForm_user\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_user\">\n\n                        <div v-if=\"createdUser.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdUser.surname }} \n                                {{ createdUser.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <user-form force-mode=\"create\" :created-object.sync=\"createdUser\"></user-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"date\" class=\"col-sm-2 control-label\">Date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.date\" placeholder=\"date\" v-validate:date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.date.required\">Date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group number_of_shares\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"number_of_shares\" class=\"col-sm-2 control-label\">Number of shares <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.number_of_shares\" placeholder=\"number_of_shares\" v-validate:number_of_shares=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.number_of_shares.required\">Number of shares is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group commitment\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"commitment\" class=\"col-sm-2 control-label\">Commitment <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.commitment\" placeholder=\"commitment\" v-validate:commitment=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.commitment.required\">Commitment is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group cash_transfert\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"cash_transfert\" class=\"col-sm-2 control-label\">Cash transfert <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.cash_transfert\" placeholder=\"cash_transfert\" v-validate:cash_transfert=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.cash_transfert.required\">Cash transfert is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group spot_currency\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"spot_currency\" class=\"col-sm-2 control-label\">Spot currency <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.spot_currency\" placeholder=\"spot_currency\" v-validate:spot_currency=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.spot_currency.required\">Spot currency is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group title\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"title\" class=\"col-sm-2 control-label\">Title <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.title\" placeholder=\"title\" v-validate:title=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.title.required\">Title is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group class\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"class\" class=\"col-sm-2 control-label\">Class <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.class\" placeholder=\"class\" v-validate:class=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.class.required\">Class is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group call_sent_to_client\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"call_sent_to_client\" class=\"col-sm-2 control-label\">Call sent to client <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.call_sent_to_client\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.call_sent_to_client\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.call_sent_to_client\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group call_sent_to_client_on\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"call_sent_to_client_on\" class=\"col-sm-2 control-label\">Call sent to client on <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.call_sent_to_client_on\" placeholder=\"call_sent_to_client_on\" v-validate:call_sent_to_client_on=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.call_sent_to_client_on.required\">Call sent to client on is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group is_complete\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"is_complete\" class=\"col-sm-2 control-label\">Is complete <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.is_complete\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.is_complete\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.is_complete\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group is_valid\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"is_valid\" class=\"col-sm-2 control-label\">Is valid <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.is_valid\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.is_valid\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.is_valid\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group validated_date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"validated_date\" class=\"col-sm-2 control-label\">Validated date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.validated_date\" placeholder=\"validated_date\" v-validate:validated_date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.validated_date.required\">Validated date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group is_reconciled\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"is_reconciled\" class=\"col-sm-2 control-label\">Is reconciled <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.is_reconciled\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.is_reconciled\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.is_reconciled\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group reconciled_date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"reconciled_date\" class=\"col-sm-2 control-label\">Reconciled date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.reconciled_date\" placeholder=\"reconciled_date\" v-validate:reconciled_date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.reconciled_date.required\">Reconciled date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group notes\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"notes\" class=\"col-sm-2 control-label\">Notes <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.notes\" placeholder=\"notes\" v-validate:notes=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.notes.required\">Notes is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         Operation <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-7c8bab11", module.exports)
  } else {
    hotAPI.update("_v-7c8bab11", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Account/form.vue":35,"../Currency/form.vue":68,"../OperationType/form.vue":134,"../Share/form.vue":167,"../User/form.vue":194,"babel-runtime/helpers/defineProperty":2,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],132:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Operation/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        operationForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/operations/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/operations', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/operations/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/operations';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Operation  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Created by</th>\n<th>Currency</th>\n<th>From account</th>\n<th>From share</th>\n<th>Reconciled by</th>\n<th>To account</th>\n<th>To share</th>\n<th>Type</th>\n<th>Updated by</th>\n<th>Validated by</th>\n<th>Date</th>\n<th>Number of shares</th>\n<th>Commitment</th>\n<th>Cash transfert</th>\n<th>Spot currency</th>\n<th>Title</th>\n<th>Class</th>\n<th>Call sent to client</th>\n<th>Call sent to client on</th>\n<th>Is complete</th>\n<th>Is valid</th>\n<th>Validated date</th>\n<th>Is reconciled</th>\n<th>Reconciled date</th>\n<th>Notes</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.created_by.surname }}\n                                              \n\n                                               {{ data.created_by.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.currency.name }}\n                                              \n\n                                               {{ data.currency.symbol }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.from_account_id.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.from_share_id.name }}\n                                              \n\n                                               {{ data.from_share_id.type }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.reconciled_by.surname }}\n                                              \n\n                                               {{ data.reconciled_by.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.to_account_id.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.to_share_id.name }}\n                                              \n\n                                               {{ data.to_share_id.type }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.type_id.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.validated_by.surname }}\n                                              \n\n                                               {{ data.validated_by.name }}\n                                              \n\n                                               </td> <td>{{data.date}}</td>\n<td>{{data.number_of_shares}}</td>\n<td>{{data.commitment}}</td>\n<td>{{data.cash_transfert}}</td>\n<td>{{data.spot_currency}}</td>\n<td>{{data.title}}</td>\n<td>{{data.class}}</td>\n<td>{{data.call_sent_to_client}}</td>\n<td>{{data.call_sent_to_client_on}}</td>\n<td>{{data.is_complete}}</td>\n<td>{{data.is_valid}}</td>\n<td>{{data.validated_date}}</td>\n<td>{{data.is_reconciled}}</td>\n<td>{{data.reconciled_date}}</td>\n<td>{{data.notes}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <operation-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></operation-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-9ef65c2a", module.exports)
  } else {
    hotAPI.update("_v-9ef65c2a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Operation/form.vue":131,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],133:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../OperationType/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Operation/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        operationTypeForm: _form2.default,
        operationsType: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/operation_types/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>OperationType Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#operationsType\" data-toggle=\"tab\">operationsType</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <operation-type-form :created-object.sync=\"createdOperationType\"></operation-type-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"operationsType\">\n                              <operations-type :fromid=\"getId()\" :url=\"getUrl('operationsType')\"></operations-type>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-7f04683d", module.exports)
  } else {
    hotAPI.update("_v-7f04683d", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Operation/list.vue":132,"../OperationType/form.vue":134,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],134:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/operation_types/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/operation_types', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/operation_types/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/operation_types/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/operation_types');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/operation_types/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/operation_types');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>OperationType Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 OperationType <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3bc319f7", module.exports)
  } else {
    hotAPI.update("_v-3bc319f7", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],135:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../OperationType/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        operationTypeForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/operation_types/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/operation_types', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/operation_types/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/operation_types';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>OperationType  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Name</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.name}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <operation-type-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></operation-type-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-6fbc40d1", module.exports)
  } else {
    hotAPI.update("_v-6fbc40d1", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../OperationType/form.vue":134,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],136:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Partner/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        partnerForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/partners/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Partner Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<partner-form :created-object.sync=\"createdPartner\"></partner-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-e58e6354", module.exports)
  } else {
    hotAPI.update("_v-e58e6354", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Partner/form.vue":137,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],137:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/partners/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/partners', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.idPartners;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/partners/' + object.idPartners, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/partners');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/partners/' + object.idPartners, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/partners');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Partner Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group deals_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"deals_id\" class=\"col-sm-2 control-label\">Deals <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.deals_id\" placeholder=\"deals_id\" v-validate:deals_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.deals_id.required\">Deals is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group Partner\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Partner\" class=\"col-sm-2 control-label\">Partner <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Partner\" placeholder=\"Partner\" v-validate:partner=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.partner.required\">Partner is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Partner <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-49f78010", module.exports)
  } else {
    hotAPI.update("_v-49f78010", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],138:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Partner/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        partnerForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/partners/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/partners', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/partners/' + data.idPartners);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/partners';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Partner  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Deals</th>\n<th>IdPartners</th>\n<th>Partner</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.deals_id}}</td>\n<td>{{data.idPartners}}</td>\n<td>{{data.Partner}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <partner-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></partner-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-7df0a6ea", module.exports)
  } else {
    hotAPI.update("_v-7df0a6ea", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Partner/form.vue":137,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],139:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../PasswordReset/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        passwordResetForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/password_resets/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>PasswordReset Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<password-reset-form :created-object.sync=\"createdPasswordReset\"></password-reset-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-02c4a36a", module.exports)
  } else {
    hotAPI.update("_v-02c4a36a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../PasswordReset/form.vue":140,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],140:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/password_resets/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/password_resets', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>PasswordReset Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group email\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"email\" class=\"col-sm-2 control-label\">Email <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.email\" placeholder=\"email\" v-validate:email=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.email.required\">Email is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group token\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"token\" class=\"col-sm-2 control-label\">Token <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.token\" placeholder=\"token\" v-validate:token=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.token.required\">Token is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 PasswordReset <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-80f955b8", module.exports)
  } else {
    hotAPI.update("_v-80f955b8", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],141:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../PasswordReset/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        passwordResetForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/password_resets/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/password_resets', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/password_resets';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>PasswordReset  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Email</th>\n<th>Token</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.email}}</td>\n<td>{{data.token}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <password-reset-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></password-reset-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-19070804", module.exports)
  } else {
    hotAPI.update("_v-19070804", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../PasswordReset/form.vue":140,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],142:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Performance/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        performanceForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_update: false,

            createdUpdate: {},

            UpdateList: [],

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/performances/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Performance Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<performance-form :created-object.sync=\"createdPerformance\"></performance-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-6698816e", module.exports)
  } else {
    hotAPI.update("_v-6698816e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Performance/form.vue":143,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],143:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Update/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../User/form.vue');

var _form4 = _interopRequireDefault(_form3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import modal from '../../snippets/modal.vue'; 
exports.default = {
    components: { updateForm: _form2.default,
        userForm: _form4.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchUpdate();
        this.fetchUser();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdUpdate': function createdUpdate(val, oldVal) {
            this.object.update_id = this.createdUpdate.id;
        },
        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_update: false,

            createdUpdate: {},

            UpdateList: [],

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/performances/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUpdate: function fetchUpdate() {
            this.$http.get('/api/Middle/updates').then(function (response) {
                this.UpdateList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/performances', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/performances/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/performances');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/performances/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/performances');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>Performance Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group gross_irr\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"gross_irr\" class=\"col-sm-2 control-label\">Gross irr <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.gross_irr\" placeholder=\"gross_irr\" v-validate:gross_irr=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.gross_irr.required\">Gross irr is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group net_multiple\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"net_multiple\" class=\"col-sm-2 control-label\">Net multiple <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.net_multiple\" placeholder=\"net_multiple\" v-validate:net_multiple=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.net_multiple.required\">Net multiple is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group net_irr\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"net_irr\" class=\"col-sm-2 control-label\">Net irr <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.net_irr\" placeholder=\"net_irr\" v-validate:net_irr=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.net_irr.required\">Net irr is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group discount\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"discount\" class=\"col-sm-2 control-label\">Discount <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.discount\" placeholder=\"discount\" v-validate:discount=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.discount.required\">Discount is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group comments\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"comments\" class=\"col-sm-2 control-label\">Comments <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.comments\" placeholder=\"comments\" v-validate:comments=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.comments.required\">Comments is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group source\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"source\" class=\"col-sm-2 control-label\">Source <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.source\" placeholder=\"source\" v-validate:source=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.source.required\">Source is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group cash_flow\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"cash_flow\" class=\"col-sm-2 control-label\">Cash flow <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.cash_flow\" placeholder=\"cash_flow\" v-validate:cash_flow=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.cash_flow.required\">Cash flow is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group notes\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"notes\" class=\"col-sm-2 control-label\">Notes <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.notes\" placeholder=\"notes\" v-validate:notes=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.notes.required\">Notes is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group update_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"update_id\" class=\"col-sm-2 control-label\">Update <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_update\">\n                        <select v-model=\"object.update_id\" class=\"form-control\" v-validate:update_id=\"{required:true}\">\n                            <option v-for=\"Update in UpdateList\" :value=\"Update.id\"> \n                                    {{ Update.title }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.update_id.required\">Update is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdUpdate.id\" v-validate:update_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_update\" icon=\"add\" @click.prevent=\"showForm_update= ! showForm_update, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_update\" icon=\"remove\" @click.prevent=\"showForm_update= ! showForm_update\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_update\">\n\n                        <div v-if=\"createdUpdate.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdUpdate.title }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <update-form force-mode=\"create\" :created-object.sync=\"createdUpdate\"></update-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group cash_flow_date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"cash_flow_date\" class=\"col-sm-2 control-label\">Cash flow date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.cash_flow_date\" placeholder=\"cash_flow_date\" v-validate:cash_flow_date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.cash_flow_date.required\">Cash flow date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group gross_multiple\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"gross_multiple\" class=\"col-sm-2 control-label\">Gross multiple <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.gross_multiple\" placeholder=\"gross_multiple\" v-validate:gross_multiple=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.gross_multiple.required\">Gross multiple is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         Performance <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-23573328", module.exports)
  } else {
    hotAPI.update("_v-23573328", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Update/form.vue":191,"../User/form.vue":194,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],144:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Performance/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        performanceForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/performances/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/performances', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/performances/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/performances';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Performance  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Gross irr</th>\n<th>Net multiple</th>\n<th>Net irr</th>\n<th>Discount</th>\n<th>Comments</th>\n<th>Source</th>\n<th>Cash flow</th>\n<th>Notes</th>\n<th>Id</th>\n<th>Update</th>\n<th>Updated by</th>\n<th>Cash flow date</th>\n<th>Gross multiple</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.gross_irr}}</td>\n<td>{{data.net_multiple}}</td>\n<td>{{data.net_irr}}</td>\n<td>{{data.discount}}</td>\n<td>{{data.comments}}</td>\n<td>{{data.source}}</td>\n<td>{{data.cash_flow}}</td>\n<td>{{data.notes}}</td>\n<td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.updat.title }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td> <td>{{data.cash_flow_date}}</td>\n<td>{{data.gross_multiple}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <performance-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></performance-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-57505a02", module.exports)
  } else {
    hotAPI.update("_v-57505a02", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Performance/form.vue":143,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],145:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Permission/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        permissionForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/permissions/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Permission Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<permission-form :created-object.sync=\"createdPermission\"></permission-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-12cf4375", module.exports)
  } else {
    hotAPI.update("_v-12cf4375", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Permission/form.vue":146,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],146:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/permissions/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/permissions', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/permissions/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/permissions');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/permissions/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/permissions');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Permission Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group label\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"label\" class=\"col-sm-2 control-label\">Label <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.label\" placeholder=\"label\" v-validate:label=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.label.required\">Label is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Permission <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-60e415a2", module.exports)
  } else {
    hotAPI.update("_v-60e415a2", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],147:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Permission/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        permissionForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/permissions/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/permissions', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/permissions/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/permissions';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Permission  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Name</th>\n<th>Label</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.name}}</td>\n<td>{{data.label}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <permission-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></permission-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-03871c09", module.exports)
  } else {
    hotAPI.update("_v-03871c09", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Permission/form.vue":146,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],148:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Permission_role/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        permissionRoleForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/permission_role/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Permission_role Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<permission-role-form :created-object.sync=\"createdPermission_role\"></permission-role-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3706da10", module.exports)
  } else {
    hotAPI.update("_v-3706da10", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Permission_role/form.vue":149,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],149:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/permission_role/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/permission_role', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.permission_id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/permission_role/' + object.permission_id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/permission_role');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/permission_role/' + object.permission_id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/permission_role');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Permission_role Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group permission_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"permission_id\" class=\"col-sm-2 control-label\">Permission <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.permission_id\" placeholder=\"permission_id\" v-validate:permission_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.permission_id.required\">Permission is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group role_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"role_id\" class=\"col-sm-2 control-label\">Role <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.role_id\" placeholder=\"role_id\" v-validate:role_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.role_id.required\">Role is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Permission_role <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-bd89769c", module.exports)
  } else {
    hotAPI.update("_v-bd89769c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],150:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Permission_role/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        permissionRoleForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/permission_role/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/permission_role', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/permission_role/' + data.permission_id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/permission_role';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Permission_role  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Permission</th>\n<th>Role</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.permission_id}}</td>\n<td>{{data.role_id}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <permission-role-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></permission-role-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-559728e8", module.exports)
  } else {
    hotAPI.update("_v-559728e8", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Permission_role/form.vue":149,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],151:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Profile/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        profileForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_update: false,

            createdUpdate: {},

            UpdateList: [],

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/profiles/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Profile Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<profile-form :created-object.sync=\"createdProfile\"></profile-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-58150e95", module.exports)
  } else {
    hotAPI.update("_v-58150e95", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Profile/form.vue":152,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],152:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Update/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../User/form.vue');

var _form4 = _interopRequireDefault(_form3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import modal from '../../snippets/modal.vue'; 
exports.default = {
    components: { updateForm: _form2.default,
        userForm: _form4.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchUpdate();
        this.fetchUser();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdUpdate': function createdUpdate(val, oldVal) {
            this.object.update_id = this.createdUpdate.id;
        },
        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_update: false,

            createdUpdate: {},

            UpdateList: [],

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/profiles/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUpdate: function fetchUpdate() {
            this.$http.get('/api/Middle/updates').then(function (response) {
                this.UpdateList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/profiles', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/profiles/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/profiles');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/profiles/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/profiles');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>Profile Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group update_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"update_id\" class=\"col-sm-2 control-label\">Update <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_update\">\n                        <select v-model=\"object.update_id\" class=\"form-control\" v-validate:update_id=\"{required:true}\">\n                            <option v-for=\"Update in UpdateList\" :value=\"Update.id\"> \n                                    {{ Update.title }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.update_id.required\">Update is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdUpdate.id\" v-validate:update_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_update\" icon=\"add\" @click.prevent=\"showForm_update= ! showForm_update, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_update\" icon=\"remove\" @click.prevent=\"showForm_update= ! showForm_update\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_update\">\n\n                        <div v-if=\"createdUpdate.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdUpdate.title }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <update-form force-mode=\"create\" :created-object.sync=\"createdUpdate\"></update-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group cash_flow_date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"cash_flow_date\" class=\"col-sm-2 control-label\">Cash flow date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.cash_flow_date\" placeholder=\"cash_flow_date\" v-validate:cash_flow_date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.cash_flow_date.required\">Cash flow date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group type\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"type\" class=\"col-sm-2 control-label\">Type <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.type\" placeholder=\"type\" v-validate:type=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.type.required\">Type is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group cash_flow\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"cash_flow\" class=\"col-sm-2 control-label\">Cash flow <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.cash_flow\" placeholder=\"cash_flow\" v-validate:cash_flow=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.cash_flow.required\">Cash flow is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group notes\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"notes\" class=\"col-sm-2 control-label\">Notes <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.notes\" placeholder=\"notes\" v-validate:notes=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.notes.required\">Notes is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         Profile <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-14d3c04f", module.exports)
  } else {
    hotAPI.update("_v-14d3c04f", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Update/form.vue":191,"../User/form.vue":194,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],153:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Profile/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        profileForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/profiles/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/profiles', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/profiles/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/profiles';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Profile  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Update</th>\n<th>Updated by</th>\n<th>Cash flow date</th>\n<th>Type</th>\n<th>Cash flow</th>\n<th>Notes</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.updat.title }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td> <td>{{data.cash_flow_date}}</td>\n<td>{{data.type}}</td>\n<td>{{data.cash_flow}}</td>\n<td>{{data.notes}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <profile-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></profile-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-48cce729", module.exports)
  } else {
    hotAPI.update("_v-48cce729", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Profile/form.vue":152,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],154:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Provider/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        providerForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/providers/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Provider Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<provider-form :created-object.sync=\"createdProvider\"></provider-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-f8085b5a", module.exports)
  } else {
    hotAPI.update("_v-f8085b5a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Provider/form.vue":155,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],155:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/providers/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/providers', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/providers/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/providers');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/providers/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/providers');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Provider Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group is_task_manager\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"is_task_manager\" class=\"col-sm-2 control-label\">Is task manager <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <!--\n            <label class=\"radio-inline\">\n                <input v-model=\"object.is_task_manager\" type=\"radio\" value=\"1\"> Yes\n            </label>\n            <label class=\"radio-inline\">\n                <input v-model=\"object.is_task_manager\" type=\"radio\" value=\"0\"> No\n            </label>-->\n\n            <ui-switch :value.sync=\"object.is_task_manager\" label=\"\"></ui-switch>\n                \n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group is_contact_manager\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"is_contact_manager\" class=\"col-sm-2 control-label\">Is contact manager <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <!--\n            <label class=\"radio-inline\">\n                <input v-model=\"object.is_contact_manager\" type=\"radio\" value=\"1\"> Yes\n            </label>\n            <label class=\"radio-inline\">\n                <input v-model=\"object.is_contact_manager\" type=\"radio\" value=\"0\"> No\n            </label>-->\n\n            <ui-switch :value.sync=\"object.is_contact_manager\" label=\"\"></ui-switch>\n                \n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group is_mail_manager\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"is_mail_manager\" class=\"col-sm-2 control-label\">Is mail manager <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <!--\n            <label class=\"radio-inline\">\n                <input v-model=\"object.is_mail_manager\" type=\"radio\" value=\"1\"> Yes\n            </label>\n            <label class=\"radio-inline\">\n                <input v-model=\"object.is_mail_manager\" type=\"radio\" value=\"0\"> No\n            </label>-->\n\n            <ui-switch :value.sync=\"object.is_mail_manager\" label=\"\"></ui-switch>\n                \n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group is_calendar_manager\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"is_calendar_manager\" class=\"col-sm-2 control-label\">Is calendar manager <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <!--\n            <label class=\"radio-inline\">\n                <input v-model=\"object.is_calendar_manager\" type=\"radio\" value=\"1\"> Yes\n            </label>\n            <label class=\"radio-inline\">\n                <input v-model=\"object.is_calendar_manager\" type=\"radio\" value=\"0\"> No\n            </label>-->\n\n            <ui-switch :value.sync=\"object.is_calendar_manager\" label=\"\"></ui-switch>\n                \n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Provider <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-40ba840d", module.exports)
  } else {
    hotAPI.update("_v-40ba840d", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],156:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Provider/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        providerForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/providers/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/providers', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/providers/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/providers';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Provider  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Name</th>\n<th>Is task manager</th>\n<th>Is contact manager</th>\n<th>Is mail manager</th>\n<th>Is calendar manager</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.name}}</td>\n<td>{{data.is_task_manager}}</td>\n<td>{{data.is_contact_manager}}</td>\n<td>{{data.is_mail_manager}}</td>\n<td>{{data.is_calendar_manager}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <provider-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></provider-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-74b3aae7", module.exports)
  } else {
    hotAPI.update("_v-74b3aae7", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Provider/form.vue":155,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],157:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Region/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../VehiclesRegionsAllotment/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        regionForm: _form2.default,
        vehiclesRegionsAllotments: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/regions/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Region Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#vehiclesRegionsAllotments\" data-toggle=\"tab\">vehiclesRegionsAllotments</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <region-form :created-object.sync=\"createdRegion\"></region-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"vehiclesRegionsAllotments\">\n                              <vehicles-regions-allotments :fromid=\"getId()\" :url=\"getUrl('vehiclesRegionsAllotments')\"></vehicles-regions-allotments>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-42861d70", module.exports)
  } else {
    hotAPI.update("_v-42861d70", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Region/form.vue":158,"../VehiclesRegionsAllotment/list.vue":220,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],158:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/regions/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/regions', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/regions/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/regions/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/regions');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/regions/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/regions');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Region Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Region <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-017661ac", module.exports)
  } else {
    hotAPI.update("_v-017661ac", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],159:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Region/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        regionForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/regions/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/regions', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/regions/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/regions';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Region  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Updated by</th>\n<th>Name</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.updated_by}}</td>\n<td>{{data.name}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <region-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></region-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-333df604", module.exports)
  } else {
    hotAPI.update("_v-333df604", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Region/form.vue":158,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],160:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Role/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        roleForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/roles/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Role Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<role-form :created-object.sync=\"createdRole\"></role-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-17fc7eee", module.exports)
  } else {
    hotAPI.update("_v-17fc7eee", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Role/form.vue":161,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],161:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/roles/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/roles', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/roles/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/roles');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/roles/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/roles');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Role Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group label\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"label\" class=\"col-sm-2 control-label\">Label <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.label\" placeholder=\"label\" v-validate:label=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.label.required\">Label is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Role <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-56899eb0", module.exports)
  } else {
    hotAPI.update("_v-56899eb0", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],162:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Role/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        roleForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/roles/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/roles', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/roles/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/roles';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Role  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Name</th>\n<th>Label</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.name}}</td>\n<td>{{data.label}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <role-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></role-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-08b45782", module.exports)
  } else {
    hotAPI.update("_v-08b45782", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Role/form.vue":161,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],163:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Role_user/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        roleUserForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/role_user/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Role_user Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<role-user-form :created-object.sync=\"createdRole_user\"></role-user-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-60bfc12c", module.exports)
  } else {
    hotAPI.update("_v-60bfc12c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Role_user/form.vue":164,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],164:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/role_user/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/role_user', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.user_id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/role_user/' + object.user_id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/role_user');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/role_user/' + object.user_id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/role_user');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Role_user Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group user_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"user_id\" class=\"col-sm-2 control-label\">User <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.user_id\" placeholder=\"user_id\" v-validate:user_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.user_id.required\">User is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group role_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"role_id\" class=\"col-sm-2 control-label\">Role <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.role_id\" placeholder=\"role_id\" v-validate:role_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.role_id.required\">Role is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Role_user <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-e7425db8", module.exports)
  } else {
    hotAPI.update("_v-e7425db8", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],165:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Role_user/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        roleUserForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/role_user/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/role_user', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/role_user/' + data.user_id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/role_user';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Role_user  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>User</th>\n<th>Role</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.user_id}}</td>\n<td>{{data.role_id}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <role-user-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></role-user-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-7f501004", module.exports)
  } else {
    hotAPI.update("_v-7f501004", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Role_user/form.vue":164,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],166:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Share/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Operation/list.vue');

var _list2 = _interopRequireDefault(_list);

var _list3 = require('../ShareValuation/list.vue');

var _list4 = _interopRequireDefault(_list3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        shareForm: _form2.default,
        operationsFromShare: _list2.default,
        shareValuations: _list4.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: [],

            showForm_currency: false,

            createdCurrency: {},

            CurrencyList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/shares/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Share Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#operationsFromShare\" data-toggle=\"tab\">operationsFromShare</a></li><li class=\"\"><a href=\"#shareValuations\" data-toggle=\"tab\">shareValuations</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <share-form :created-object.sync=\"createdShare\"></share-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"operationsFromShare\">\n                              <operations-from-share :fromid=\"getId()\" :url=\"getUrl('operationsFromShare')\"></operations-from-share>\n                           </div>\n\n                           <div class=\"tab-pane fade in\" id=\"shareValuations\">\n                              <share-valuations :fromid=\"getId()\" :url=\"getUrl('shareValuations')\"></share-valuations>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-103bd45f", module.exports)
  } else {
    hotAPI.update("_v-103bd45f", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Operation/list.vue":132,"../Share/form.vue":167,"../ShareValuation/list.vue":171,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],167:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../User/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../Vehicle/form.vue');

var _form4 = _interopRequireDefault(_form3);

var _form5 = require('../Currency/form.vue');

var _form6 = _interopRequireDefault(_form5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: { userForm: _form2.default,
        vehicleForm: _form4.default,
        currencyForm: _form6.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchUser();
        this.fetchVehicle();
        this.fetchCurrency();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        },
        'createdVehicle': function createdVehicle(val, oldVal) {
            this.object.vehicle_id = this.createdVehicle.id;
        },
        'createdCurrency': function createdCurrency(val, oldVal) {
            this.object.currency_id = this.createdCurrency.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: [],

            showForm_currency: false,

            createdCurrency: {},

            CurrencyList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/shares/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchVehicle: function fetchVehicle() {
            this.$http.get('/api/Middle/vehicles').then(function (response) {
                this.VehicleList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchCurrency: function fetchCurrency() {
            this.$http.get('/api/Middle/currencies').then(function (response) {
                this.CurrencyList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/shares', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/shares/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/shares/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/shares');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/shares/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/shares');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};

// import modal from '../../snippets/modal.vue';
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>Share Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group vehicle_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"vehicle_id\" class=\"col-sm-2 control-label\">Vehicle <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_vehicle\">\n                        <select v-model=\"object.vehicle_id\" class=\"form-control\" v-validate:vehicle_id=\"{required:true}\">\n                            <option v-for=\"Vehicle in VehicleList\" :value=\"Vehicle.id\"> \n                                    {{ Vehicle.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.vehicle_id.required\">Vehicle is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdVehicle.id\" v-validate:vehicle_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_vehicle\" icon=\"add\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_vehicle\" icon=\"remove\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_vehicle\">\n\n                        <div v-if=\"createdVehicle.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdVehicle.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <vehicle-form force-mode=\"create\" :created-object.sync=\"createdVehicle\"></vehicle-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group name\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.name.required\">Name is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group type\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"type\" class=\"col-sm-2 control-label\">Type <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.type\" placeholder=\"type\" v-validate:type=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.type.required\">Type is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group nominal_value\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"nominal_value\" class=\"col-sm-2 control-label\">Nominal value <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.nominal_value\" placeholder=\"nominal_value\" v-validate:nominal_value=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.nominal_value.required\">Nominal value is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group total_shares_number\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"total_shares_number\" class=\"col-sm-2 control-label\">Total shares number <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.total_shares_number\" placeholder=\"total_shares_number\" v-validate:total_shares_number=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.total_shares_number.required\">Total shares number is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group notes\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"notes\" class=\"col-sm-2 control-label\">Notes <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.notes\" placeholder=\"notes\" v-validate:notes=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.notes.required\">Notes is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group reporting_notes\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"reporting_notes\" class=\"col-sm-2 control-label\">Reporting notes <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.reporting_notes\" placeholder=\"reporting_notes\" v-validate:reporting_notes=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.reporting_notes.required\">Reporting notes is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group fees\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"fees\" class=\"col-sm-2 control-label\">Fees <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.fees\" placeholder=\"fees\" v-validate:fees=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.fees.required\">Fees is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group carried\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"carried\" class=\"col-sm-2 control-label\">Carried <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.carried\" placeholder=\"carried\" v-validate:carried=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.carried.required\">Carried is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group currency_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"currency_id\" class=\"col-sm-2 control-label\">Currency <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_currency\">\n                        <select v-model=\"object.currency_id\" class=\"form-control\" v-validate:currency_id=\"{required:true}\">\n                            <option v-for=\"Currency in CurrencyList\" :value=\"Currency.id\"> \n                                    {{ Currency.name }} \n                                    {{ Currency.symbol }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.currency_id.required\">Currency is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdCurrency.id\" v-validate:currency_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_currency\" icon=\"add\" @click.prevent=\"showForm_currency= ! showForm_currency, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_currency\" icon=\"remove\" @click.prevent=\"showForm_currency= ! showForm_currency\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_currency\">\n\n                        <div v-if=\"createdCurrency.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdCurrency.name }} \n                                {{ createdCurrency.symbol }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <currency-form force-mode=\"create\" :created-object.sync=\"createdCurrency\"></currency-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         Share <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-660af3ce", module.exports)
  } else {
    hotAPI.update("_v-660af3ce", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Currency/form.vue":68,"../User/form.vue":194,"../Vehicle/form.vue":202,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],168:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Share/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        shareForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/shares/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/shares', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/shares/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/shares';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Share  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Updated by</th>\n<th>Vehicle</th>\n<th>Name</th>\n<th>Type</th>\n<th>Nominal value</th>\n<th>Total shares number</th>\n<th>Notes</th>\n<th>Reporting notes</th>\n<th>Fees</th>\n<th>Carried</th>\n<th>Currency</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.vehicle.name }}\n                                              \n\n                                               </td> <td>{{data.name}}</td>\n<td>{{data.type}}</td>\n<td>{{data.nominal_value}}</td>\n<td>{{data.total_shares_number}}</td>\n<td>{{data.notes}}</td>\n<td>{{data.reporting_notes}}</td>\n<td>{{data.fees}}</td>\n<td>{{data.carried}}</td>\n\n                                                <td>\n                                               {{ data.currency.name }}\n                                              \n\n                                               {{ data.currency.symbol }}\n                                              \n\n                                               </td>\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <share-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></share-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-00f3acf3", module.exports)
  } else {
    hotAPI.update("_v-00f3acf3", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Share/form.vue":167,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],169:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../ShareValuation/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        shareValuationForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_share: false,

            createdShare: {},

            ShareList: [],

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/share_valuations/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>ShareValuation Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<share-valuation-form :created-object.sync=\"createdShareValuation\"></share-valuation-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2f0b2c42", module.exports)
  } else {
    hotAPI.update("_v-2f0b2c42", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../ShareValuation/form.vue":170,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],170:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Share/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../User/form.vue');

var _form4 = _interopRequireDefault(_form3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import modal from '../../snippets/modal.vue'; 
exports.default = {
    components: { shareForm: _form2.default,
        userForm: _form4.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchShare();
        this.fetchUser();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdShare': function createdShare(val, oldVal) {
            this.object.share_id = this.createdShare.id;
        },
        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_share: false,

            createdShare: {},

            ShareList: [],

            showForm_user: false,

            createdUser: {},

            UserList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/share_valuations/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchShare: function fetchShare() {
            this.$http.get('/api/Middle/shares').then(function (response) {
                this.ShareList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/share_valuations', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/share_valuations/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/share_valuations');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/share_valuations/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/share_valuations');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>ShareValuation Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group share_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"share_id\" class=\"col-sm-2 control-label\">Share <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_share\">\n                        <select v-model=\"object.share_id\" class=\"form-control\" v-validate:share_id=\"{required:true}\">\n                            <option v-for=\"Share in ShareList\" :value=\"Share.id\"> \n                                    {{ Share.name }} \n                                    {{ Share.type }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.share_id.required\">Share is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdShare.id\" v-validate:share_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_share\" icon=\"add\" @click.prevent=\"showForm_share= ! showForm_share, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_share\" icon=\"remove\" @click.prevent=\"showForm_share= ! showForm_share\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_share\">\n\n                        <div v-if=\"createdShare.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdShare.name }} \n                                {{ createdShare.type }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <share-form force-mode=\"create\" :created-object.sync=\"createdShare\"></share-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group date_received\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"date_received\" class=\"col-sm-2 control-label\">Date received <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.date_received\" placeholder=\"date_received\" v-validate:date_received=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.date_received.required\">Date received is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group dateval\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"dateval\" class=\"col-sm-2 control-label\">Dateval <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.dateval\" placeholder=\"dateval\" v-validate:dateval=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.dateval.required\">Dateval is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group value\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"value\" class=\"col-sm-2 control-label\">Value <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.value\" placeholder=\"value\" v-validate:value=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.value.required\">Value is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group currency\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"currency\" class=\"col-sm-2 control-label\">Currency <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.currency\" placeholder=\"currency\" v-validate:currency=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.currency.required\">Currency is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         ShareValuation <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-286c4408", module.exports)
  } else {
    hotAPI.update("_v-286c4408", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Share/form.vue":167,"../User/form.vue":194,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],171:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../ShareValuation/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        shareValuationForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/share_valuations/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/share_valuations', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/share_valuations/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/share_valuations';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>ShareValuation  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Share</th>\n<th>Updated by</th>\n<th>Date received</th>\n<th>Dateval</th>\n<th>Value</th>\n<th>Currency</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.share.name }}\n                                              \n\n                                               {{ data.share.type }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td> <td>{{data.date_received}}</td>\n<td>{{data.dateval}}</td>\n<td>{{data.value}}</td>\n<td>{{data.currency}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <share-valuation-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></share-valuation-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-1fc304d6", module.exports)
  } else {
    hotAPI.update("_v-1fc304d6", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../ShareValuation/form.vue":170,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],172:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Subscription/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        subscriptionForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/subscriptions/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Subscription Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<subscription-form :created-object.sync=\"createdSubscription\"></subscription-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-103c21b2", module.exports)
  } else {
    hotAPI.update("_v-103c21b2", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Subscription/form.vue":173,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],173:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/subscriptions/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/subscriptions', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Subscription Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group user_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"user_id\" class=\"col-sm-2 control-label\">User <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.user_id\" placeholder=\"user_id\" v-validate:user_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.user_id.required\">User is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"id\" class=\"col-sm-2 control-label\">Id <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.id\" placeholder=\"id\" v-validate:id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.id.required\">Id is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"type\" class=\"col-sm-2 control-label\">Type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.type\" placeholder=\"type\" v-validate:type=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.type.required\">Type is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Subscription <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-96bebe3e", module.exports)
  } else {
    hotAPI.update("_v-96bebe3e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],174:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Subscription/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        subscriptionForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/subscriptions/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/subscriptions', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/subscriptions';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Subscription  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>User</th>\n<th>Id</th>\n<th>Type</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.user_id}}</td>\n<td>{{data.id}}</td>\n<td>{{data.type}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <subscription-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></subscription-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2ecc708a", module.exports)
  } else {
    hotAPI.update("_v-2ecc708a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Subscription/form.vue":173,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],175:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Task/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        taskForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/tasks/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Task Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<task-form :created-object.sync=\"createdTask\"></task-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-55450abf", module.exports)
  } else {
    hotAPI.update("_v-55450abf", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Task/form.vue":176,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],176:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/tasks/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/tasks', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/tasks/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/tasks');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/tasks/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/tasks');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Task Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group provider_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"provider_id\" class=\"col-sm-2 control-label\">Provider <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.provider_id\" placeholder=\"provider_id\" v-validate:provider_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.provider_id.required\">Provider is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group user_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"user_id\" class=\"col-sm-2 control-label\">User <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.user_id\" placeholder=\"user_id\" v-validate:user_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.user_id.required\">User is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group external_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"external_id\" class=\"col-sm-2 control-label\">External <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <textarea class=\"form-control\" v-model=\"object.external_id\" placeholder=\"external_id\" v-validate:external_id=\"{required:true}\"></textarea>\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.external_id.required\">External is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Task <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-1203bc79", module.exports)
  } else {
    hotAPI.update("_v-1203bc79", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],177:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Task/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        taskForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/tasks/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/tasks', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/tasks/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/tasks';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Task  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Provider</th>\n<th>User</th>\n<th>External</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.provider_id}}</td>\n<td>{{data.user_id}}</td>\n<td>{{data.external_id}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <task-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></task-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-45fce353", module.exports)
  } else {
    hotAPI.update("_v-45fce353", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Task/form.vue":176,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],178:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Taskable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        taskableForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/taskables/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Taskable Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<taskable-form :created-object.sync=\"createdTaskable\"></taskable-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-b43798b6", module.exports)
  } else {
    hotAPI.update("_v-b43798b6", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Taskable/form.vue":179,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],179:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/taskables/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/taskables', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Taskable Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group task_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"task_id\" class=\"col-sm-2 control-label\">Task <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.task_id\" placeholder=\"task_id\" v-validate:task_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.task_id.required\">Task is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group taskable_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"taskable_id\" class=\"col-sm-2 control-label\">Taskable <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.taskable_id\" placeholder=\"taskable_id\" v-validate:taskable_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.taskable_id.required\">Taskable is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group taskable_type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"taskable_type\" class=\"col-sm-2 control-label\">Taskable type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.taskable_type\" placeholder=\"taskable_type\" v-validate:taskable_type=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.taskable_type.required\">Taskable type is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Taskable <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-62a2e55f", module.exports)
  } else {
    hotAPI.update("_v-62a2e55f", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],180:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Taskable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        taskableForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/taskables/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/taskables', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/taskables';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Taskable  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Task</th>\n<th>Taskable</th>\n<th>Taskable type</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.task_id}}</td>\n<td>{{data.taskable_id}}</td>\n<td>{{data.taskable_type}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <taskable-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></taskable-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-d2c7e78e", module.exports)
  } else {
    hotAPI.update("_v-d2c7e78e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Taskable/form.vue":179,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],181:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Team/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        teamForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/team/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Team Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<team-form :created-object.sync=\"createdTeam\"></team-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-36ec1e32", module.exports)
  } else {
    hotAPI.update("_v-36ec1e32", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Team/form.vue":182,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],182:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/team/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/team', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.IDteam;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/team/' + object.IDteam, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/team');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/team/' + object.IDteam, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/team');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Team Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group Teamname\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"Teamname\" class=\"col-sm-2 control-label\">Teamname <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.Teamname\" placeholder=\"Teamname\" v-validate:teamname=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.teamname.required\">Teamname is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Team <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-bd6ebabe", module.exports)
  } else {
    hotAPI.update("_v-bd6ebabe", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],183:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Team/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        teamForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/team/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/team', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/team/' + data.IDteam);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/team';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Team  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IDteam</th>\n<th>Teamname</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.IDteam}}</td>\n<td>{{data.Teamname}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <team-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></team-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-557c6d0a", module.exports)
  } else {
    hotAPI.update("_v-557c6d0a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Team/form.vue":182,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],184:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Teamuser/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        teamuserForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/teamusers/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Teamuser Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<teamuser-form :created-object.sync=\"createdTeamuser\"></teamuser-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-18fc1e7c", module.exports)
  } else {
    hotAPI.update("_v-18fc1e7c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Teamuser/form.vue":185,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],185:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/teamusers/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/teamusers', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.IDteam;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/teamusers/' + object.IDteam, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/teamusers');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/teamusers/' + object.IDteam, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/teamusers');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Teamuser Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group IDteam\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDteam\" class=\"col-sm-2 control-label\">IDteam <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDteam\" placeholder=\"IDteam\" v-validate:i_dteam=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_dteam.required\">IDteam is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group IDusers\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"IDusers\" class=\"col-sm-2 control-label\">IDusers <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.IDusers\" placeholder=\"IDusers\" v-validate:i_dusers=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.i_dusers.required\">IDusers is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Teamuser <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-548a5f94", module.exports)
  } else {
    hotAPI.update("_v-548a5f94", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],186:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Teamuser/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        teamuserForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/teamusers/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/teamusers', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/teamusers/' + data.IDteam);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/teamusers';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Teamuser  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>IDteam</th>\n<th>IDusers</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.IDteam}}</td>\n<td>{{data.IDusers}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <teamuser-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></teamuser-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-09b3f710", module.exports)
  } else {
    hotAPI.update("_v-09b3f710", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Teamuser/form.vue":185,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],187:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Token/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        tokenForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/tokens/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Token Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<token-form :created-object.sync=\"createdToken\"></token-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-68d1b0f6", module.exports)
  } else {
    hotAPI.update("_v-68d1b0f6", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Token/form.vue":188,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],188:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/tokens/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/tokens', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/tokens/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/tokens');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/tokens/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/tokens');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Token Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group provider_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"provider_id\" class=\"col-sm-2 control-label\">Provider <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.provider_id\" placeholder=\"provider_id\" v-validate:provider_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.provider_id.required\">Provider is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group user_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"user_id\" class=\"col-sm-2 control-label\">User <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.user_id\" placeholder=\"user_id\" v-validate:user_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.user_id.required\">User is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group access_token\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"access_token\" class=\"col-sm-2 control-label\">Access token <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <textarea class=\"form-control\" v-model=\"object.access_token\" placeholder=\"access_token\" v-validate:access_token=\"{required:true}\"></textarea>\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.access_token.required\">Access token is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group refresh_token\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"refresh_token\" class=\"col-sm-2 control-label\">Refresh token <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <textarea class=\"form-control\" v-model=\"object.refresh_token\" placeholder=\"refresh_token\" v-validate:refresh_token=\"{required:true}\"></textarea>\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.refresh_token.required\">Refresh token is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Token <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-ef544d82", module.exports)
  } else {
    hotAPI.update("_v-ef544d82", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],189:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Token/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        tokenForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/tokens/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/tokens', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/tokens/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/tokens';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Token  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Provider</th>\n<th>User</th>\n<th>Access token</th>\n<th>Refresh token</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.provider_id}}</td>\n<td>{{data.user_id}}</td>\n<td>{{data.access_token}}</td>\n<td>{{data.refresh_token}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <token-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></token-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-8761ffce", module.exports)
  } else {
    hotAPI.update("_v-8761ffce", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Token/form.vue":188,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],190:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Update/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Performance/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        updateForm: _form2.default,
        performances: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/updates/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Update Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#performances\" data-toggle=\"tab\">performances</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <update-form :created-object.sync=\"createdUpdate\"></update-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"performances\">\n                              <performances :fromid=\"getId()\" :url=\"getUrl('performances')\"></performances>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-4d6c4b3b", module.exports)
  } else {
    hotAPI.update("_v-4d6c4b3b", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Performance/list.vue":144,"../Update/form.vue":191,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],191:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../User/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../Vehicle/form.vue');

var _form4 = _interopRequireDefault(_form3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import modal from '../../snippets/modal.vue'; 
exports.default = {
    components: { userForm: _form2.default,
        vehicleForm: _form4.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchUser();
        this.fetchVehicle();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        },
        'createdVehicle': function createdVehicle(val, oldVal) {
            this.object.vehicle_id = this.createdVehicle.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/updates/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchVehicle: function fetchVehicle() {
            this.$http.get('/api/Middle/vehicles').then(function (response) {
                this.VehicleList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/updates', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/updates/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/updates/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/updates');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/updates/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/updates');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>Update Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group vehicle_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"vehicle_id\" class=\"col-sm-2 control-label\">Vehicle <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_vehicle\">\n                        <select v-model=\"object.vehicle_id\" class=\"form-control\" v-validate:vehicle_id=\"{required:true}\">\n                            <option v-for=\"Vehicle in VehicleList\" :value=\"Vehicle.id\"> \n                                    {{ Vehicle.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.vehicle_id.required\">Vehicle is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdVehicle.id\" v-validate:vehicle_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_vehicle\" icon=\"add\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_vehicle\" icon=\"remove\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_vehicle\">\n\n                        <div v-if=\"createdVehicle.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdVehicle.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <vehicle-form force-mode=\"create\" :created-object.sync=\"createdVehicle\"></vehicle-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group date_reference\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"date_reference\" class=\"col-sm-2 control-label\">Date reference <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.date_reference\" placeholder=\"date_reference\" v-validate:date_reference=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.date_reference.required\">Date reference is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group date_recieved\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"date_recieved\" class=\"col-sm-2 control-label\">Date recieved <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.date_recieved\" placeholder=\"date_recieved\" v-validate:date_recieved=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.date_recieved.required\">Date recieved is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group type\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"type\" class=\"col-sm-2 control-label\">Type <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.type\" placeholder=\"type\" v-validate:type=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.type.required\">Type is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group title\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"title\" class=\"col-sm-2 control-label\">Title <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.title\" placeholder=\"title\" v-validate:title=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.title.required\">Title is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group source\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"source\" class=\"col-sm-2 control-label\">Source <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.source\" placeholder=\"source\" v-validate:source=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.source.required\">Source is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group notes\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"notes\" class=\"col-sm-2 control-label\">Notes <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.notes\" placeholder=\"notes\" v-validate:notes=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.notes.required\">Notes is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group financials\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"financials\" class=\"col-sm-2 control-label\">Financials <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.financials\" placeholder=\"financials\" v-validate:financials=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.financials.required\">Financials is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         Update <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-0a2afcf5", module.exports)
  } else {
    hotAPI.update("_v-0a2afcf5", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../User/form.vue":194,"../Vehicle/form.vue":202,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],192:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Update/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        updateForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/updates/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/updates', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/updates/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/updates';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Update  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Updated by</th>\n<th>Vehicle</th>\n<th>Date reference</th>\n<th>Date recieved</th>\n<th>Type</th>\n<th>Title</th>\n<th>Source</th>\n<th>Notes</th>\n<th>Financials</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.vehicle.name }}\n                                              \n\n                                               </td> <td>{{data.date_reference}}</td>\n<td>{{data.date_recieved}}</td>\n<td>{{data.type}}</td>\n<td>{{data.title}}</td>\n<td>{{data.source}}</td>\n<td>{{data.notes}}</td>\n<td>{{data.financials}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <update-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></update-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3e2423cf", module.exports)
  } else {
    hotAPI.update("_v-3e2423cf", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Update/form.vue":191,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],193:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../User/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Account/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        userForm: _form2.default,
        accountsUpdatedBy: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/users/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>User Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#accountsUpdatedBy\" data-toggle=\"tab\">accountsUpdatedBy</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <user-form :created-object.sync=\"createdUser\"></user-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"accountsUpdatedBy\">\n                              <accounts-updated-by :fromid=\"getId()\" :url=\"getUrl('accountsUpdatedBy')\"></accounts-updated-by>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-57c60339", module.exports)
  } else {
    hotAPI.update("_v-57c60339", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Account/list.vue":36,"../User/form.vue":194,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],194:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/users/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/users', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/users/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/users/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/users');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/users/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/users');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>User Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group client_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"client_id\" class=\"col-sm-2 control-label\">Client <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.client_id\" placeholder=\"client_id\" v-validate:client_id=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.client_id.required\">Client is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group contact_provider\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"contact_provider\" class=\"col-sm-2 control-label\">Contact provider <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.contact_provider\" placeholder=\"contact_provider\" v-validate:contact_provider=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.contact_provider.required\">Contact provider is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group event_provider\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"event_provider\" class=\"col-sm-2 control-label\">Event provider <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.event_provider\" placeholder=\"event_provider\" v-validate:event_provider=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.event_provider.required\">Event provider is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group mail_provider\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"mail_provider\" class=\"col-sm-2 control-label\">Mail provider <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.mail_provider\" placeholder=\"mail_provider\" v-validate:mail_provider=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.mail_provider.required\">Mail provider is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group task_provider\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"task_provider\" class=\"col-sm-2 control-label\">Task provider <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.task_provider\" placeholder=\"task_provider\" v-validate:task_provider=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.task_provider.required\">Task provider is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group surname\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"surname\" class=\"col-sm-2 control-label\">Surname <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.surname\" placeholder=\"surname\" v-validate:surname=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.surname.required\">Surname is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group name\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.name.required\">Name is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group nickname\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"nickname\" class=\"col-sm-2 control-label\">Nickname <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.nickname\" placeholder=\"nickname\" v-validate:nickname=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.nickname.required\">Nickname is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group birthdate\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"birthdate\" class=\"col-sm-2 control-label\">Birthdate <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.birthdate\" placeholder=\"birthdate\" v-validate:birthdate=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.birthdate.required\">Birthdate is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group email\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"email\" class=\"col-sm-2 control-label\">Email <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.email\" placeholder=\"email\" v-validate:email=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.email.required\">Email is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group address\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"address\" class=\"col-sm-2 control-label\">Address <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.address\" placeholder=\"address\" v-validate:address=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.address.required\">Address is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group zip\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"zip\" class=\"col-sm-2 control-label\">Zip <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.zip\" placeholder=\"zip\" v-validate:zip=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.zip.required\">Zip is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group city\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"city\" class=\"col-sm-2 control-label\">City <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.city\" placeholder=\"city\" v-validate:city=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.city.required\">City is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group country\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"country\" class=\"col-sm-2 control-label\">Country <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.country\" placeholder=\"country\" v-validate:country=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.country.required\">Country is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group password\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"password\" class=\"col-sm-2 control-label\">Password <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.password\" placeholder=\"password\" v-validate:password=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.password.required\">Password is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group remember_token\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"remember_token\" class=\"col-sm-2 control-label\">Remember token <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.remember_token\" placeholder=\"remember_token\" v-validate:remember_token=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.remember_token.required\">Remember token is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group stripe_active\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"stripe_active\" class=\"col-sm-2 control-label\">Stripe active <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.stripe_active\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.stripe_active\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.stripe_active\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group stripe_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"stripe_id\" class=\"col-sm-2 control-label\">Stripe <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.stripe_id\" placeholder=\"stripe_id\" v-validate:stripe_id=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.stripe_id.required\">Stripe is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group stripe_subscription\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"stripe_subscription\" class=\"col-sm-2 control-label\">Stripe subscription <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.stripe_subscription\" placeholder=\"stripe_subscription\" v-validate:stripe_subscription=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.stripe_subscription.required\">Stripe subscription is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group stripe_plan\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"stripe_plan\" class=\"col-sm-2 control-label\">Stripe plan <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.stripe_plan\" placeholder=\"stripe_plan\" v-validate:stripe_plan=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.stripe_plan.required\">Stripe plan is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group last_four\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"last_four\" class=\"col-sm-2 control-label\">Last four <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.last_four\" placeholder=\"last_four\" v-validate:last_four=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.last_four.required\">Last four is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group trial_ends_at\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"trial_ends_at\" class=\"col-sm-2 control-label\">Trial ends at <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.trial_ends_at\" placeholder=\"trial_ends_at\" v-validate:trial_ends_at=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.trial_ends_at.required\">Trial ends at is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group subscription_ends_at\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"subscription_ends_at\" class=\"col-sm-2 control-label\">Subscription ends at <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.subscription_ends_at\" placeholder=\"subscription_ends_at\" v-validate:subscription_ends_at=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.subscription_ends_at.required\">Subscription ends at is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         User <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-1484b4f3", module.exports)
  } else {
    hotAPI.update("_v-1484b4f3", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],195:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../User/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        userForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/users/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/users', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/users/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/users';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>User  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Client</th>\n<th>Contact provider</th>\n<th>Event provider</th>\n<th>Mail provider</th>\n<th>Task provider</th>\n<th>Surname</th>\n<th>Name</th>\n<th>Nickname</th>\n<th>Birthdate</th>\n<th>Email</th>\n<th>Address</th>\n<th>Zip</th>\n<th>City</th>\n<th>Country</th>\n<th>Password</th>\n<th>Remember token</th>\n<th>Stripe active</th>\n<th>Stripe</th>\n<th>Stripe subscription</th>\n<th>Stripe plan</th>\n<th>Last four</th>\n<th>Trial ends at</th>\n<th>Subscription ends at</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.client_id}}</td>\n<td>{{data.contact_provider}}</td>\n<td>{{data.event_provider}}</td>\n<td>{{data.mail_provider}}</td>\n<td>{{data.task_provider}}</td>\n<td>{{data.surname}}</td>\n<td>{{data.name}}</td>\n<td>{{data.nickname}}</td>\n<td>{{data.birthdate}}</td>\n<td>{{data.email}}</td>\n<td>{{data.address}}</td>\n<td>{{data.zip}}</td>\n<td>{{data.city}}</td>\n<td>{{data.country}}</td>\n<td>{{data.password}}</td>\n<td>{{data.remember_token}}</td>\n<td>{{data.stripe_active}}</td>\n<td>{{data.stripe_id}}</td>\n<td>{{data.stripe_subscription}}</td>\n<td>{{data.stripe_plan}}</td>\n<td>{{data.last_four}}</td>\n<td>{{data.trial_ends_at}}</td>\n<td>{{data.subscription_ends_at}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <user-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></user-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-487ddbcd", module.exports)
  } else {
    hotAPI.update("_v-487ddbcd", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../User/form.vue":194,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],196:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Userable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        userableForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/userables/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>Userable Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<userable-form :created-object.sync=\"createdUserable\"></userable-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-15e05f1f", module.exports)
  } else {
    hotAPI.update("_v-15e05f1f", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Userable/form.vue":197,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],197:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/userables/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/userables', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {} //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {}
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>Userable Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group user_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"user_id\" class=\"col-sm-2 control-label\">User <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.user_id\" placeholder=\"user_id\" v-validate:user_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.user_id.required\">User is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group userable_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"userable_id\" class=\"col-sm-2 control-label\">Userable <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.userable_id\" placeholder=\"userable_id\" v-validate:userable_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.userable_id.required\">Userable is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group userable_type\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"userable_type\" class=\"col-sm-2 control-label\">Userable type <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.userable_type\" placeholder=\"userable_type\" v-validate:userable_type=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.userable_type.required\">Userable type is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n                \n                <div>\n                    \n\n    <div class=\"form-group external_contact_id\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"external_contact_id\" class=\"col-sm-2 control-label\">External contact <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"number\" class=\"form-control\" v-model=\"object.external_contact_id\" placeholder=\"external_contact_id\" v-validate:external_contact_id=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.external_contact_id.required\">External contact is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 Userable <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-5ac1de4e", module.exports)
  } else {
    hotAPI.update("_v-5ac1de4e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],198:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Userable/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        userableForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/userables/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/userables', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {},
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/userables';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Userable  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>User</th>\n<th>Userable</th>\n<th>Userable type</th>\n<th>External contact</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.user_id}}</td>\n<td>{{data.userable_id}}</td>\n<td>{{data.userable_type}}</td>\n<td>{{data.external_contact_id}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <userable-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></userable-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-069837b3", module.exports)
  } else {
    hotAPI.update("_v-069837b3", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Userable/form.vue":197,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],199:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : bank-account</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-652cad04", module.exports)
  } else {
    hotAPI.update("_v-652cad04", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],200:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : cash-management</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-55d63465", module.exports)
  } else {
    hotAPI.update("_v-55d63465", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],201:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Vehicle/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Account/list.vue');

var _list2 = _interopRequireDefault(_list);

var _list3 = require('../Share/list.vue');

var _list4 = _interopRequireDefault(_list3);

var _list5 = require('../Update/list.vue');

var _list6 = _interopRequireDefault(_list5);

var _list7 = require('../VehiclesCurrenciesAllotment/list.vue');

var _list8 = _interopRequireDefault(_list7);

var _list9 = require('../VehiclesRegionsAllotment/list.vue');

var _list10 = _interopRequireDefault(_list9);

var _list11 = require('../VehiclesRisksAllotment/list.vue');

var _list12 = _interopRequireDefault(_list11);

var _holdingList = require('../Vehicle/holding-list.vue');

var _holdingList2 = _interopRequireDefault(_holdingList);

var _indirectHoldingList = require('../Vehicle/indirect-holding-list.vue');

var _indirectHoldingList2 = _interopRequireDefault(_indirectHoldingList);

var _holdingAnalysis = require('../Vehicle/holding-analysis.vue');

var _holdingAnalysis2 = _interopRequireDefault(_holdingAnalysis);

var _orgChart = require('../Vehicle/org-chart.vue');

var _orgChart2 = _interopRequireDefault(_orgChart);

var _operationList = require('../Vehicle/operation-list.vue');

var _operationList2 = _interopRequireDefault(_operationList);

var _shares_owned = require('../Vehicle/shares_owned.vue');

var _shares_owned2 = _interopRequireDefault(_shares_owned);

var _shareholdersList = require('../Vehicle/shareholders-list.vue');

var _shareholdersList2 = _interopRequireDefault(_shareholdersList);

var _bankAccount = require('../Vehicle/bank-account.vue');

var _bankAccount2 = _interopRequireDefault(_bankAccount);

var _cashManagement = require('../Vehicle/cash-management.vue');

var _cashManagement2 = _interopRequireDefault(_cashManagement);

var _valuation = require('../Vehicle/valuation.vue');

var _valuation2 = _interopRequireDefault(_valuation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehicleForm: _form2.default,
        accounts: _list2.default,
        shares: _list4.default,
        updates: _list6.default,
        vehiclesCurrenciesAllotments: _list8.default,
        vehiclesRegionsAllotments: _list10.default,
        vehiclesRisksAllotments: _list12.default,
        holdingList: _holdingList2.default,
        indirectHoldingList: _indirectHoldingList2.default,
        holdingAnalysis: _holdingAnalysis2.default,
        orgChart: _orgChart2.default,
        operationList: _operationList2.default,
        sharesOwned: _shares_owned2.default,
        shareholdersList: _shareholdersList2.default,
        bankAccount: _bankAccount2.default,
        cashManagement: _cashManagement2.default,
        valuation: _valuation2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_family: false,

            createdFamily: {},

            FamilyList: [],

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_dealsterm: false,

            createdDealsterm: {},

            DealstermList: [],

            showForm_dealsstage: false,

            createdDealsstage: {},

            DealsstageList: [],

            showForm_dealscategory: false,

            createdDealscategory: {},

            DealscategoryList: [],

            showForm_vehicleType: false,

            createdVehicleType: {},

            VehicleTypeList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/vehicles/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>Vehicle Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li><a href=\"#holding-list\" data-toggle=\"tab\">holding-list</a></li><li><a href=\"#indirect-holding-list\" data-toggle=\"tab\">indirect-holding-list</a></li><li><a href=\"#holding-analysis\" data-toggle=\"tab\">holding-analysis</a></li><li><a href=\"#org-chart\" data-toggle=\"tab\">org-chart</a></li><li><a href=\"#operation-list\" data-toggle=\"tab\">operation-list</a></li><li><a href=\"#shares_owned\" data-toggle=\"tab\">shares_owned</a></li><li><a href=\"#shareholders-list\" data-toggle=\"tab\">shareholders-list</a></li><li><a href=\"#bank-account\" data-toggle=\"tab\">bank-account</a></li><li><a href=\"#cash-management\" data-toggle=\"tab\">cash-management</a></li><li><a href=\"#valuation\" data-toggle=\"tab\">valuation</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n            \n                <div>\n                        <!-- Nav tabs -->\n                        <ul class=\"nav nav-tabs\" role=\"tablist\">\n                        <li role=\"presentation\" class=\"active\"><a href=\"#form\" aria-controls=\"home\" role=\"tab\" data-toggle=\"tab\">Vehicle form</a></li>\n                        <li><a href=\"#accounts\" role=\"tab\" data-toggle=\"tab\">accounts</a></li><li><a href=\"#shares\" role=\"tab\" data-toggle=\"tab\">shares</a></li><li><a href=\"#updates\" role=\"tab\" data-toggle=\"tab\">updates</a></li><li><a href=\"#vehiclesCurrenciesAllotments\" role=\"tab\" data-toggle=\"tab\">vehiclesCurrenciesAllotments</a></li><li><a href=\"#vehiclesRegionsAllotments\" role=\"tab\" data-toggle=\"tab\">vehiclesRegionsAllotments</a></li><li><a href=\"#vehiclesRisksAllotments\" role=\"tab\" data-toggle=\"tab\">vehiclesRisksAllotments</a></li>\n                        </ul>\n\n                        <!-- Tab panes -->\n                        <div class=\"tab-content\">\n                        <div role=\"tabpanel\" class=\"tab-pane active\" id=\"form\">\n                             <vehicle-form :created-object.sync=\"createdVehicle\"></vehicle-form>\n                        </div>\n                        \n                                   <div class=\"tab-pane fade in\" id=\"accounts\">\n                                      <accounts :from-id=\"getId\" :url=\"getUrl('accounts')\"></accounts>\n                                   </div>\n\n                                   <div class=\"tab-pane fade in\" id=\"shares\">\n                                      <shares :from-id=\"getId\" :url=\"getUrl('shares')\"></shares>\n                                   </div>\n\n                                   <div class=\"tab-pane fade in\" id=\"updates\">\n                                      <updates :from-id=\"getId\" :url=\"getUrl('updates')\"></updates>\n                                   </div>\n\n                                   <div class=\"tab-pane fade in\" id=\"vehiclesCurrenciesAllotments\">\n                                      <vehicles-currencies-allotments :from-id=\"getId\" :url=\"getUrl('vehiclesCurrenciesAllotments')\"></vehicles-currencies-allotments>\n                                   </div>\n\n                                   <div class=\"tab-pane fade in\" id=\"vehiclesRegionsAllotments\">\n                                      <vehicles-regions-allotments :from-id=\"getId\" :url=\"getUrl('vehiclesRegionsAllotments')\"></vehicles-regions-allotments>\n                                   </div>\n\n                                   <div class=\"tab-pane fade in\" id=\"vehiclesRisksAllotments\">\n                                      <vehicles-risks-allotments :from-id=\"getId\" :url=\"getUrl('vehiclesRisksAllotments')\"></vehicles-risks-allotments>\n                                   </div>\n\n                        </div>\n\n                        </div>\n                \n            </div>\n            \n                <div class=\"tab-pane fade in\" id=\"holding-list\">\n                    <holding-list></holding-list>\n\n                 </div>\n                \n                <div class=\"tab-pane fade in\" id=\"indirect-holding-list\">\n                    <indirect-holding-list></indirect-holding-list>\n\n                 </div>\n                \n                <div class=\"tab-pane fade in\" id=\"holding-analysis\">\n                    <holding-analysis></holding-analysis>\n\n                 </div>\n                \n                <div class=\"tab-pane fade in\" id=\"org-chart\">\n                    <org-chart></org-chart>\n\n                 </div>\n                \n                <div class=\"tab-pane fade in\" id=\"operation-list\">\n                    <operation-list></operation-list>\n\n                 </div>\n                \n                <div class=\"tab-pane fade in\" id=\"shares_owned\">\n                    <shares-owned></shares-owned>\n\n                 </div>\n                \n                <div class=\"tab-pane fade in\" id=\"shareholders-list\">\n                    <shareholders-list></shareholders-list>\n\n                 </div>\n                \n                <div class=\"tab-pane fade in\" id=\"bank-account\">\n                    <bank-account></bank-account>\n\n                 </div>\n                \n                <div class=\"tab-pane fade in\" id=\"cash-management\">\n                    <cash-management></cash-management>\n\n                 </div>\n                \n                <div class=\"tab-pane fade in\" id=\"valuation\">\n                    <valuation></valuation>\n\n                 </div>\n                \n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-fcaae71c", module.exports)
  } else {
    hotAPI.update("_v-fcaae71c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Account/list.vue":36,"../Share/list.vue":168,"../Update/list.vue":192,"../Vehicle/bank-account.vue":199,"../Vehicle/cash-management.vue":200,"../Vehicle/form.vue":202,"../Vehicle/holding-analysis.vue":203,"../Vehicle/holding-list.vue":204,"../Vehicle/indirect-holding-list.vue":205,"../Vehicle/operation-list.vue":207,"../Vehicle/org-chart.vue":208,"../Vehicle/shareholders-list.vue":209,"../Vehicle/shares_owned.vue":210,"../Vehicle/valuation.vue":211,"../VehiclesCurrenciesAllotment/list.vue":217,"../VehiclesRegionsAllotment/list.vue":220,"../VehiclesRisksAllotment/list.vue":223,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],202:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Family/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../User/form.vue');

var _form4 = _interopRequireDefault(_form3);

var _form5 = require('../Dealsterm/form.vue');

var _form6 = _interopRequireDefault(_form5);

var _form7 = require('../Dealsstage/form.vue');

var _form8 = _interopRequireDefault(_form7);

var _form9 = require('../Dealscategory/form.vue');

var _form10 = _interopRequireDefault(_form9);

var _form11 = require('../VehicleType/form.vue');

var _form12 = _interopRequireDefault(_form11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import modal from '../../snippets/modal.vue'; 
exports.default = {
    components: { familyForm: _form2.default,
        userForm: _form4.default,
        dealstermForm: _form6.default,
        dealsstageForm: _form8.default,
        dealscategoryForm: _form10.default,
        vehicleTypeForm: _form12.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchFamily();
        this.fetchUser();
        this.fetchDealsterm();
        this.fetchDealsstage();
        this.fetchDealscategory();
        this.fetchVehicleType();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdFamily': function createdFamily(val, oldVal) {
            this.object.family_id = this.createdFamily.id;
        },
        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        },
        'createdDealsterm': function createdDealsterm(val, oldVal) {
            this.object.dealsterm_id = this.createdDealsterm.idDealsTerm;
        },
        'createdDealsstage': function createdDealsstage(val, oldVal) {
            this.object.dealsstage_id = this.createdDealsstage.idDealsStage;
        },
        'createdDealscategory': function createdDealscategory(val, oldVal) {
            this.object.dealscategory_id = this.createdDealscategory.idDealsCategories;
        },
        'createdVehicleType': function createdVehicleType(val, oldVal) {
            this.object.vehicle_type_id = this.createdVehicleType.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_family: false,

            createdFamily: {},

            FamilyList: [],

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_dealsterm: false,

            createdDealsterm: {},

            DealstermList: [],

            showForm_dealsstage: false,

            createdDealsstage: {},

            DealsstageList: [],

            showForm_dealscategory: false,

            createdDealscategory: {},

            DealscategoryList: [],

            showForm_vehicleType: false,

            createdVehicleType: {},

            VehicleTypeList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/vehicles/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchFamily: function fetchFamily() {
            this.$http.get('/api/Middle/families').then(function (response) {
                this.FamilyList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchDealsterm: function fetchDealsterm() {
            this.$http.get('/api/Middle/dealsterms').then(function (response) {
                this.DealstermList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchDealsstage: function fetchDealsstage() {
            this.$http.get('/api/Middle/dealsstage').then(function (response) {
                this.DealsstageList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchDealscategory: function fetchDealscategory() {
            this.$http.get('/api/Middle/dealscategories').then(function (response) {
                this.DealscategoryList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchVehicleType: function fetchVehicleType() {
            this.$http.get('/api/Middle/vehicle_types').then(function (response) {
                this.VehicleTypeList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/vehicles', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/vehicles/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/vehicles/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/vehicles');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/vehicles/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/vehicles');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>Vehicle Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group family_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"family_id\" class=\"col-sm-2 control-label\">Family <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_family\">\n                        <select v-model=\"object.family_id\" class=\"form-control\" v-validate:family_id=\"{required:true}\">\n                            <option v-for=\"Family in FamilyList\" :value=\"Family.id\"> \n                                    {{ Family.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.family_id.required\">Family is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdFamily.id\" v-validate:family_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_family\" icon=\"add\" @click.prevent=\"showForm_family= ! showForm_family, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_family\" icon=\"remove\" @click.prevent=\"showForm_family= ! showForm_family\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_family\">\n\n                        <div v-if=\"createdFamily.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdFamily.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <family-form force-mode=\"create\" :created-object.sync=\"createdFamily\"></family-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group name\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.name.required\">Name is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group managed\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"managed\" class=\"col-sm-2 control-label\">Managed <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.managed\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.managed\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.managed\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group class\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"class\" class=\"col-sm-2 control-label\">Class <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.class\" placeholder=\"class\" v-validate:class=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.class.required\">Class is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group subcategory\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"subcategory\" class=\"col-sm-2 control-label\">Subcategory <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.subcategory\" placeholder=\"subcategory\" v-validate:subcategory=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.subcategory.required\">Subcategory is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group active\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"active\" class=\"col-sm-2 control-label\">Active <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.active\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.active\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.active\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group creation_date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"creation_date\" class=\"col-sm-2 control-label\">Creation date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.creation_date\" placeholder=\"creation_date\" v-validate:creation_date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.creation_date.required\">Creation date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group duration\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"duration\" class=\"col-sm-2 control-label\">Duration <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.duration\" placeholder=\"duration\" v-validate:duration=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.duration.required\">Duration is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group legal_form\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"legal_form\" class=\"col-sm-2 control-label\">Legal form <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.legal_form\" placeholder=\"legal_form\" v-validate:legal_form=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.legal_form.required\">Legal form is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group domiciliation\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"domiciliation\" class=\"col-sm-2 control-label\">Domiciliation <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.domiciliation\" placeholder=\"domiciliation\" v-validate:domiciliation=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.domiciliation.required\">Domiciliation is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group fiscal_year_end_date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"fiscal_year_end_date\" class=\"col-sm-2 control-label\">Fiscal year end date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.fiscal_year_end_date\" placeholder=\"fiscal_year_end_date\" v-validate:fiscal_year_end_date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.fiscal_year_end_date.required\">Fiscal year end date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group tax_residence\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"tax_residence\" class=\"col-sm-2 control-label\">Tax residence <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.tax_residence\" placeholder=\"tax_residence\" v-validate:tax_residence=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.tax_residence.required\">Tax residence is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group nationality\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"nationality\" class=\"col-sm-2 control-label\">Nationality <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.nationality\" placeholder=\"nationality\" v-validate:nationality=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.nationality.required\">Nationality is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group tax_regime\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"tax_regime\" class=\"col-sm-2 control-label\">Tax regime <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.tax_regime\" placeholder=\"tax_regime\" v-validate:tax_regime=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.tax_regime.required\">Tax regime is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group mandate_type\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"mandate_type\" class=\"col-sm-2 control-label\">Mandate type <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.mandate_type\" placeholder=\"mandate_type\" v-validate:mandate_type=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.mandate_type.required\">Mandate type is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group id_number\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"id_number\" class=\"col-sm-2 control-label\">Id number <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.id_number\" placeholder=\"id_number\" v-validate:id_number=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.id_number.required\">Id number is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group id_date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"id_date\" class=\"col-sm-2 control-label\">Id date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.id_date\" placeholder=\"id_date\" v-validate:id_date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.id_date.required\">Id date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group professional\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"professional\" class=\"col-sm-2 control-label\">Professional <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <!--\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.professional\" type=\"radio\" value=\"1\"> Yes\n                    </label>\n                    <label class=\"radio-inline\">\n                        <input v-model=\"object.professional\" type=\"radio\" value=\"0\"> No\n                    </label>-->\n\n                    <ui-switch :value.sync=\"object.professional\" label=\"\"></ui-switch>\n                        \n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group mif_profile\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"mif_profile\" class=\"col-sm-2 control-label\">Mif profile <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.mif_profile\" placeholder=\"mif_profile\" v-validate:mif_profile=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.mif_profile.required\">Mif profile is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group fatca\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"fatca\" class=\"col-sm-2 control-label\">Fatca <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.fatca\" placeholder=\"fatca\" v-validate:fatca=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.fatca.required\">Fatca is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group activities\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"activities\" class=\"col-sm-2 control-label\">Activities <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <textarea class=\"form-control\" v-model=\"object.activities\" placeholder=\"activities\" v-validate:activities=\"{required:true}\"></textarea>\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.activities.required\">Activities is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group asset_name\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"asset_name\" class=\"col-sm-2 control-label\">Asset name <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.asset_name\" placeholder=\"asset_name\" v-validate:asset_name=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.asset_name.required\">Asset name is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group shareholders\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"shareholders\" class=\"col-sm-2 control-label\">Shareholders <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.shareholders\" placeholder=\"shareholders\" v-validate:shareholders=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.shareholders.required\">Shareholders is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group lead\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"lead\" class=\"col-sm-2 control-label\">Lead <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.lead\" placeholder=\"lead\" v-validate:lead=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.lead.required\">Lead is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group investment_type\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"investment_type\" class=\"col-sm-2 control-label\">Investment type <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.investment_type\" placeholder=\"investment_type\" v-validate:investment_type=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.investment_type.required\">Investment type is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group contract_number\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"contract_number\" class=\"col-sm-2 control-label\">Contract number <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.contract_number\" placeholder=\"contract_number\" v-validate:contract_number=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.contract_number.required\">Contract number is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group interest_rate\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"interest_rate\" class=\"col-sm-2 control-label\">Interest rate <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.interest_rate\" placeholder=\"interest_rate\" v-validate:interest_rate=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.interest_rate.required\">Interest rate is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group notes\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"notes\" class=\"col-sm-2 control-label\">Notes <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.notes\" placeholder=\"notes\" v-validate:notes=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.notes.required\">Notes is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group dealsterm_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"dealsterm_id\" class=\"col-sm-2 control-label\">Dealsterm <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_dealsterm\">\n                        <select v-model=\"object.dealsterm_id\" class=\"form-control\" v-validate:dealsterm_id=\"{required:true}\">\n                            <option v-for=\"Dealsterm in DealstermList\" :value=\"Dealsterm.idDealsTerm\"> \n                                    {{ Dealsterm.Description }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.dealsterm_id.required\">Dealsterm is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdDealsterm.idDealsTerm\" v-validate:dealsterm_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_dealsterm\" icon=\"add\" @click.prevent=\"showForm_dealsterm= ! showForm_dealsterm, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_dealsterm\" icon=\"remove\" @click.prevent=\"showForm_dealsterm= ! showForm_dealsterm\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_dealsterm\">\n\n                        <div v-if=\"createdDealsterm.idDealsTerm\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdDealsterm.Description }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <dealsterm-form force-mode=\"create\" :created-object.sync=\"createdDealsterm\"></dealsterm-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group dealsstage_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"dealsstage_id\" class=\"col-sm-2 control-label\">Dealsstage <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_dealsstage\">\n                        <select v-model=\"object.dealsstage_id\" class=\"form-control\" v-validate:dealsstage_id=\"{required:true}\">\n                            <option v-for=\"Dealsstage in DealsstageList\" :value=\"Dealsstage.idDealsStage\"> \n                                    {{ Dealsstage.Description }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.dealsstage_id.required\">Dealsstage is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdDealsstage.idDealsStage\" v-validate:dealsstage_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_dealsstage\" icon=\"add\" @click.prevent=\"showForm_dealsstage= ! showForm_dealsstage, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_dealsstage\" icon=\"remove\" @click.prevent=\"showForm_dealsstage= ! showForm_dealsstage\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_dealsstage\">\n\n                        <div v-if=\"createdDealsstage.idDealsStage\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdDealsstage.Description }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <dealsstage-form force-mode=\"create\" :created-object.sync=\"createdDealsstage\"></dealsstage-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group dealscategory_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"dealscategory_id\" class=\"col-sm-2 control-label\">Dealscategory <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_dealscategory\">\n                        <select v-model=\"object.dealscategory_id\" class=\"form-control\" v-validate:dealscategory_id=\"{required:true}\">\n                            <option v-for=\"Dealscategory in DealscategoryList\" :value=\"Dealscategory.idDealsCategories\"> \n                                    {{ Dealscategory.Description }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.dealscategory_id.required\">Dealscategory is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdDealscategory.idDealsCategories\" v-validate:dealscategory_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_dealscategory\" icon=\"add\" @click.prevent=\"showForm_dealscategory= ! showForm_dealscategory, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_dealscategory\" icon=\"remove\" @click.prevent=\"showForm_dealscategory= ! showForm_dealscategory\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_dealscategory\">\n\n                        <div v-if=\"createdDealscategory.idDealsCategories\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdDealscategory.Description }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <dealscategory-form force-mode=\"create\" :created-object.sync=\"createdDealscategory\"></dealscategory-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group vehicle_type_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"vehicle_type_id\" class=\"col-sm-2 control-label\">Vehicle type <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_vehicleType\">\n                        <select v-model=\"object.vehicle_type_id\" class=\"form-control\" v-validate:vehicle_type_id=\"{required:true}\">\n                            <option v-for=\"VehicleType in VehicleTypeList\" :value=\"VehicleType.id\"> \n                                    {{ VehicleType.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.vehicle_type_id.required\">Vehicle type is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdVehicleType.id\" v-validate:vehicle_type_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_vehicleType\" icon=\"add\" @click.prevent=\"showForm_vehicleType= ! showForm_vehicleType, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_vehicleType\" icon=\"remove\" @click.prevent=\"showForm_vehicleType= ! showForm_vehicleType\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_vehicleType\">\n\n                        <div v-if=\"createdVehicleType.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdVehicleType.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <vehicle-type-form force-mode=\"create\" :created-object.sync=\"createdVehicleType\"></vehicle-type-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         Vehicle <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3e693e2c", module.exports)
  } else {
    hotAPI.update("_v-3e693e2c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Dealscategory/form.vue":77,"../Dealsstage/form.vue":86,"../Dealsterm/form.vue":92,"../Family/form.vue":110,"../User/form.vue":194,"../VehicleType/form.vue":213,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],203:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : holding-analysis</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3f93630e", module.exports)
  } else {
    hotAPI.update("_v-3f93630e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],204:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : holding-list</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-e551e660", module.exports)
  } else {
    hotAPI.update("_v-e551e660", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],205:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : indirect-holding-list</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-58c5b062", module.exports)
  } else {
    hotAPI.update("_v-58c5b062", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],206:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Vehicle/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehicleForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/vehicles/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/vehicles', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/vehicles/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/vehicles';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>Vehicle  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Family</th>\n<th>Updated by</th>\n<th>Name</th>\n<th>Managed</th>\n<th>Class</th>\n<th>Subcategory</th>\n<th>Active</th>\n<th>Creation date</th>\n<th>Duration</th>\n<th>Legal form</th>\n<th>Domiciliation</th>\n<th>Fiscal year end date</th>\n<th>Tax residence</th>\n<th>Nationality</th>\n<th>Tax regime</th>\n<th>Mandate type</th>\n<th>Id number</th>\n<th>Id date</th>\n<th>Professional</th>\n<th>Mif profile</th>\n<th>Fatca</th>\n<th>Activities</th>\n<th>Asset name</th>\n<th>Shareholders</th>\n<th>Lead</th>\n<th>Investment type</th>\n<th>Contract number</th>\n<th>Interest rate</th>\n<th>Notes</th>\n<th>Dealsterm</th>\n<th>Dealsstage</th>\n<th>Dealscategory</th>\n<th>Vehicle type</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.family.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td> <td>{{data.name}}</td>\n<td>{{data.managed}}</td>\n<td>{{data.class}}</td>\n<td>{{data.subcategory}}</td>\n<td>{{data.active}}</td>\n<td>{{data.creation_date}}</td>\n<td>{{data.duration}}</td>\n<td>{{data.legal_form}}</td>\n<td>{{data.domiciliation}}</td>\n<td>{{data.fiscal_year_end_date}}</td>\n<td>{{data.tax_residence}}</td>\n<td>{{data.nationality}}</td>\n<td>{{data.tax_regime}}</td>\n<td>{{data.mandate_type}}</td>\n<td>{{data.id_number}}</td>\n<td>{{data.id_date}}</td>\n<td>{{data.professional}}</td>\n<td>{{data.mif_profile}}</td>\n<td>{{data.fatca}}</td>\n<td>{{data.activities}}</td>\n<td>{{data.asset_name}}</td>\n<td>{{data.shareholders}}</td>\n<td>{{data.lead}}</td>\n<td>{{data.investment_type}}</td>\n<td>{{data.contract_number}}</td>\n<td>{{data.interest_rate}}</td>\n<td>{{data.notes}}</td>\n\n                                                <td>\n                                               {{ data.dealsterm.Description }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.dealsstage.Description }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.dealscategory.Description }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.vehicle_type.name }}\n                                              \n\n                                               </td>\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <vehicle-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></vehicle-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-72626506", module.exports)
  } else {
    hotAPI.update("_v-72626506", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Vehicle/form.vue":202,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],207:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : operation-list</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-7eec72ac", module.exports)
  } else {
    hotAPI.update("_v-7eec72ac", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],208:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : org-chart</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-72c930fd", module.exports)
  } else {
    hotAPI.update("_v-72c930fd", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],209:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : shareholders-list</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-2c7e3bea", module.exports)
  } else {
    hotAPI.update("_v-2c7e3bea", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],210:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : shares_owned</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-30a1bcfc", module.exports)
  } else {
    hotAPI.update("_v-30a1bcfc", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],211:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    components: {},

    props: {},

    ready: function ready() {
        //this.fetchActivities();
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },
    },

    data: function data() {
        return {};
    },


    filters: {},
    computed: {
        keyList: function keyList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        }
    },

    methods: {}
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n    <pre>        {{object | json}}\n    </pre>\n<h1>componentName : valuation</h1>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-6a75b149", module.exports)
  } else {
    hotAPI.update("_v-6a75b149", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],212:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../VehicleType/form.vue');

var _form2 = _interopRequireDefault(_form);

var _list = require('../Vehicle/list.vue');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehicleTypeForm: _form2.default,
        vehicles: _list2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {}

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/vehicle_types/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n<div class=\"row\">\n<h1>VehicleType Edit</h1>\n<ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n</div>\n\n\n    <div class=\"tabbable\">\n        <ul class=\"nav nav-pills nav-stacked col-md-3\">\n            <li class=\"active\"><a href=\"#general\" data-toggle=\"tab\">General</a></li>\n            <li class=\"\"><a href=\"#vehicles\" data-toggle=\"tab\">vehicles</a></li>\n        </ul>\n        <div class=\"tab-content col-md-8\">\n            <div class=\"tab-pane fade in active\" id=\"general\">\n             <vehicle-type-form :created-object.sync=\"createdVehicleType\"></vehicle-type-form> \n            </div>\n            \n                           <div class=\"tab-pane fade in\" id=\"vehicles\">\n                              <vehicles :fromid=\"getId()\" :url=\"getUrl('vehicles')\"></vehicles>\n                           </div>\n\n        </div><!--tab content-->\n    </div>\n    "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-235cf5d8", module.exports)
  } else {
    hotAPI.update("_v-235cf5d8", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Vehicle/list.vue":206,"../VehicleType/form.vue":213,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],213:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});


// import modal from '../../snippets/modal.vue'; 


exports.default = {
    components: {},

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {}

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/vehicle_types/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/vehicle_types', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go('/vehicle_types/' + object.id);
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/vehicle_types/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/vehicle_types');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/vehicle_types/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/vehicle_types');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n<!--<pre>\n    {{object | json}}\n</pre>-->\n\n    <h1>VehicleType Form</h1>\n\n    <div v-if=\"loading\">\n        <ui-preloader :show=\"true\"></ui-preloader>\n    </div>\n\n    <div class=\"row\" v-if=\"!loading\">\n    <div class=\"col-lg-12\">\n        <div class=\"ibox float-e-margins\">\n            <div class=\"ibox-title\">\n\n\n                <!--<div class=\"row\" v-if=\"mode=='update'\">\n                    <div class=\"col-md-12\">\n                        <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                    </div>\n                </div>-->\n            </div>\n            <div class=\"ibox-content\">\n\n  <validator name=\"validation1\">\n    <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                \n                <div>\n                    \n\n    <div class=\"form-group name\">\n        <div class=\"col-md-12 col-sm-12 \">\n        <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n        <div class=\"col-sm-10 \"> \n\n            <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n            <div class=\"errors\">\n                <p v-if=\"$validation1.name.required\">Name is required</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n                 </div>\n                 \n\n                  \n\n        <div class=\"col-sm-12\">\n            <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n            <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n            <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n            <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                <b v-if=\"mode=='create'\">Create</b>\n                <b v-if=\"mode=='update'\">Update</b>\n                 VehicleType <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n             </button>\n\n        </div>\n\n    </form>\n  </validator>\n\n\n            </div>\n        </div>\n    </div>\n</div>\n\n\n"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-3fc8b0dc", module.exports)
  } else {
    hotAPI.update("_v-3fc8b0dc", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],214:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../VehicleType/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehicleTypeForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/vehicle_types/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/vehicle_types', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/vehicle_types/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/vehicle_types';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>VehicleType  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Name</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n<td>{{data.name}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <vehicle-type-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></vehicle-type-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-1414ce6c", module.exports)
  } else {
    hotAPI.update("_v-1414ce6c", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../VehicleType/form.vue":213,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],215:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../VehiclesCurrenciesAllotment/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehiclesCurrenciesAllotmentForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_currency: false,

            createdCurrency: {},

            CurrencyList: [],

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/vehicles_currencies_allotments/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>VehiclesCurrenciesAllotment Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<vehicles-currencies-allotment-form :created-object.sync=\"createdVehiclesCurrenciesAllotment\"></vehicles-currencies-allotment-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-8ed284a0", module.exports)
  } else {
    hotAPI.update("_v-8ed284a0", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../VehiclesCurrenciesAllotment/form.vue":216,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],216:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Currency/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../User/form.vue');

var _form4 = _interopRequireDefault(_form3);

var _form5 = require('../Vehicle/form.vue');

var _form6 = _interopRequireDefault(_form5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: { currencyForm: _form2.default,
        userForm: _form4.default,
        vehicleForm: _form6.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchCurrency();
        this.fetchUser();
        this.fetchVehicle();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdCurrency': function createdCurrency(val, oldVal) {
            this.object.currency_id = this.createdCurrency.id;
        },
        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        },
        'createdVehicle': function createdVehicle(val, oldVal) {
            this.object.vehicle_id = this.createdVehicle.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_currency: false,

            createdCurrency: {},

            CurrencyList: [],

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/vehicles_currencies_allotments/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchCurrency: function fetchCurrency() {
            this.$http.get('/api/Middle/currencies').then(function (response) {
                this.CurrencyList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchVehicle: function fetchVehicle() {
            this.$http.get('/api/Middle/vehicles').then(function (response) {
                this.VehicleList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/vehicles_currencies_allotments', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/vehicles_currencies_allotments/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/vehicles_currencies_allotments');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/vehicles_currencies_allotments/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/vehicles_currencies_allotments');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};

// import modal from '../../snippets/modal.vue';
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>VehiclesCurrenciesAllotment Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group currency_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"currency_id\" class=\"col-sm-2 control-label\">Currency <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_currency\">\n                        <select v-model=\"object.currency_id\" class=\"form-control\" v-validate:currency_id=\"{required:true}\">\n                            <option v-for=\"Currency in CurrencyList\" :value=\"Currency.id\"> \n                                    {{ Currency.name }} \n                                    {{ Currency.symbol }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.currency_id.required\">Currency is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdCurrency.id\" v-validate:currency_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_currency\" icon=\"add\" @click.prevent=\"showForm_currency= ! showForm_currency, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_currency\" icon=\"remove\" @click.prevent=\"showForm_currency= ! showForm_currency\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_currency\">\n\n                        <div v-if=\"createdCurrency.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdCurrency.name }} \n                                {{ createdCurrency.symbol }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <currency-form force-mode=\"create\" :created-object.sync=\"createdCurrency\"></currency-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group vehicle_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"vehicle_id\" class=\"col-sm-2 control-label\">Vehicle <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_vehicle\">\n                        <select v-model=\"object.vehicle_id\" class=\"form-control\" v-validate:vehicle_id=\"{required:true}\">\n                            <option v-for=\"Vehicle in VehicleList\" :value=\"Vehicle.id\"> \n                                    {{ Vehicle.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.vehicle_id.required\">Vehicle is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdVehicle.id\" v-validate:vehicle_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_vehicle\" icon=\"add\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_vehicle\" icon=\"remove\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_vehicle\">\n\n                        <div v-if=\"createdVehicle.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdVehicle.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <vehicle-form force-mode=\"create\" :created-object.sync=\"createdVehicle\"></vehicle-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"date\" class=\"col-sm-2 control-label\">Date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.date\" placeholder=\"date\" v-validate:date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.date.required\">Date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group pourcentage\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"pourcentage\" class=\"col-sm-2 control-label\">Pourcentage <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.pourcentage\" placeholder=\"pourcentage\" v-validate:pourcentage=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.pourcentage.required\">Pourcentage is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         VehiclesCurrenciesAllotment <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-75556f6a", module.exports)
  } else {
    hotAPI.update("_v-75556f6a", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Currency/form.vue":68,"../User/form.vue":194,"../Vehicle/form.vue":202,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],217:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../VehiclesCurrenciesAllotment/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehiclesCurrenciesAllotmentForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/vehicles_currencies_allotments/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/vehicles_currencies_allotments', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/vehicles_currencies_allotments/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/vehicles_currencies_allotments';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>VehiclesCurrenciesAllotment  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Currency</th>\n<th>Updated by</th>\n<th>Vehicle</th>\n<th>Date</th>\n<th>Pourcentage</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.currency.name }}\n                                              \n\n                                               {{ data.currency.symbol }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.vehicle.name }}\n                                              \n\n                                               </td> <td>{{data.date}}</td>\n<td>{{data.pourcentage}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <vehicles-currencies-allotment-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></vehicles-currencies-allotment-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-ad62d378", module.exports)
  } else {
    hotAPI.update("_v-ad62d378", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../VehiclesCurrenciesAllotment/form.vue":216,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],218:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../VehiclesRegionsAllotment/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehiclesRegionsAllotmentForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_region: false,

            createdRegion: {},

            RegionList: [],

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/vehicles_regions_allotments/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>VehiclesRegionsAllotment Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<vehicles-regions-allotment-form :created-object.sync=\"createdVehiclesRegionsAllotment\"></vehicles-regions-allotment-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-76669f58", module.exports)
  } else {
    hotAPI.update("_v-76669f58", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../VehiclesRegionsAllotment/form.vue":219,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],219:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../Region/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../User/form.vue');

var _form4 = _interopRequireDefault(_form3);

var _form5 = require('../Vehicle/form.vue');

var _form6 = _interopRequireDefault(_form5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: { regionForm: _form2.default,
        userForm: _form4.default,
        vehicleForm: _form6.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchRegion();
        this.fetchUser();
        this.fetchVehicle();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdRegion': function createdRegion(val, oldVal) {
            this.object.region_id = this.createdRegion.id;
        },
        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        },
        'createdVehicle': function createdVehicle(val, oldVal) {
            this.object.vehicle_id = this.createdVehicle.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_region: false,

            createdRegion: {},

            RegionList: [],

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/vehicles_regions_allotments/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchRegion: function fetchRegion() {
            this.$http.get('/api/Middle/regions').then(function (response) {
                this.RegionList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchVehicle: function fetchVehicle() {
            this.$http.get('/api/Middle/vehicles').then(function (response) {
                this.VehicleList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/vehicles_regions_allotments', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/vehicles_regions_allotments/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/vehicles_regions_allotments');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/vehicles_regions_allotments/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/vehicles_regions_allotments');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};

// import modal from '../../snippets/modal.vue';
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>VehiclesRegionsAllotment Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group region_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"region_id\" class=\"col-sm-2 control-label\">Region <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_region\">\n                        <select v-model=\"object.region_id\" class=\"form-control\" v-validate:region_id=\"{required:true}\">\n                            <option v-for=\"Region in RegionList\" :value=\"Region.id\"> \n                                    {{ Region.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.region_id.required\">Region is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdRegion.id\" v-validate:region_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_region\" icon=\"add\" @click.prevent=\"showForm_region= ! showForm_region, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_region\" icon=\"remove\" @click.prevent=\"showForm_region= ! showForm_region\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_region\">\n\n                        <div v-if=\"createdRegion.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdRegion.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <region-form force-mode=\"create\" :created-object.sync=\"createdRegion\"></region-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group vehicle_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"vehicle_id\" class=\"col-sm-2 control-label\">Vehicle <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_vehicle\">\n                        <select v-model=\"object.vehicle_id\" class=\"form-control\" v-validate:vehicle_id=\"{required:true}\">\n                            <option v-for=\"Vehicle in VehicleList\" :value=\"Vehicle.id\"> \n                                    {{ Vehicle.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.vehicle_id.required\">Vehicle is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdVehicle.id\" v-validate:vehicle_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_vehicle\" icon=\"add\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_vehicle\" icon=\"remove\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_vehicle\">\n\n                        <div v-if=\"createdVehicle.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdVehicle.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <vehicle-form force-mode=\"create\" :created-object.sync=\"createdVehicle\"></vehicle-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"date\" class=\"col-sm-2 control-label\">Date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.date\" placeholder=\"date\" v-validate:date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.date.required\">Date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group pourcentage\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"pourcentage\" class=\"col-sm-2 control-label\">Pourcentage <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.pourcentage\" placeholder=\"pourcentage\" v-validate:pourcentage=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.pourcentage.required\">Pourcentage is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         VehiclesRegionsAllotment <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-33255112", module.exports)
  } else {
    hotAPI.update("_v-33255112", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../Region/form.vue":158,"../User/form.vue":194,"../Vehicle/form.vue":202,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],220:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../VehiclesRegionsAllotment/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehiclesRegionsAllotmentForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/vehicles_regions_allotments/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/vehicles_regions_allotments', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/vehicles_regions_allotments/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/vehicles_regions_allotments';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>VehiclesRegionsAllotment  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Region</th>\n<th>Updated by</th>\n<th>Vehicle</th>\n<th>Date</th>\n<th>Pourcentage</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.region.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.vehicle.name }}\n                                              \n\n                                               </td> <td>{{data.date}}</td>\n<td>{{data.pourcentage}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <vehicles-regions-allotment-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></vehicles-regions-allotment-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-671e77ec", module.exports)
  } else {
    hotAPI.update("_v-671e77ec", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../VehiclesRegionsAllotment/form.vue":219,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],221:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../VehiclesRisksAllotment/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehiclesRisksAllotmentForm: _form2.default

    },

    props: {},

    ready: function ready() {},

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },


    },

    data: function data() {
        return {

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {
        getId: function getId() {
            return this.$route.params.id;
        }
    },

    methods: {
        goBack: function goBack() {
            this.$route.router.go(window.history.back());
        },
        getUrl: function getUrl(methodName) {
            id = this.$route.params.id;
            return 'api/Middle/vehicles_risks_allotments/' + id + '/' + methodName;
        },
        getId: function getId() {
            return this.$route.params.id;
        }
    }
};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n\n        <div class=\"row\">\n        <h1>VehiclesRisksAllotment Edit</h1>\n        <ui-icon-button icon=\"navigate_before\" @click.prevent=\"goBack\" tooltip=\"Go back\" type=\"primary\" color=\"default\" class=\"pull-left\"></ui-icon-button>\n        </div>\n        \n<vehicles-risks-allotment-form :created-object.sync=\"createdVehiclesRisksAllotment\"></vehicles-risks-allotment-form>"
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-de6c7ac6", module.exports)
  } else {
    hotAPI.update("_v-de6c7ac6", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../VehiclesRisksAllotment/form.vue":222,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],222:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n.spacer{\n    height: 50px;\n    display: block;\n}\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../User/form.vue');

var _form2 = _interopRequireDefault(_form);

var _form3 = require('../Vehicle/form.vue');

var _form4 = _interopRequireDefault(_form3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import modal from '../../snippets/modal.vue'; 
exports.default = {
    components: { userForm: _form2.default,
        vehicleForm: _form4.default

    },

    props: {
        forceMode: {
            required: false,
            type: String
        },
        createdObject: {
            required: false,
            type: Object
        },
        label: {
            required: false,
            type: String
        },
        value: {
            required: false,
            type: String
        }

    },

    ready: function ready() {

        this.fetchUser();
        this.fetchVehicle();

        if (this.mode == 'update') {
            this.loading = true;
            this.fetchObject();
        }

        console.log("label");
        console.log(this.label);
        console.log("value");
        console.log(this.value);
    },

    watch: {
        // 'object.crm_app.activity_id': function (val, oldVal) {
        //     console.log(`value changed from ${oldVal} to ${val}`)
        // },

        'createdUser': function createdUser(val, oldVal) {
            this.object.updated_by = this.createdUser.id;
        },
        'createdVehicle': function createdVehicle(val, oldVal) {
            this.object.vehicle_id = this.createdVehicle.id;
        }

    },

    data: function data() {
        return {
            //debug:true,
            activityList: [],
            sending: false,
            loading: false,

            object: {},

            showForm_user: false,

            createdUser: {},

            UserList: [],

            showForm_vehicle: false,

            createdVehicle: {},

            VehicleList: []

        };
    },


    filters: {},
    computed: {

        mode: function mode() {
            if (this.forceMode) {
                return this.forceMode;
            }
            return this.$route.params.id ? 'update' : 'create';
        }

    },

    methods: {
        fetchObject: function fetchObject() {
            this.$http.get('/api/Middle/vehicles_risks_allotments/' + this.$route.params.id).then(function (response) {
                this.object = response.data.data;
                this.loading = false;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchUser: function fetchUser() {
            this.$http.get('/api/Middle/users').then(function (response) {
                this.UserList = response.data.data;
            }, function (response) {
                // error callback
            });
        },


        //retrouver les données du belong to pour afficher la liste déroulante
        fetchVehicle: function fetchVehicle() {
            this.$http.get('/api/Middle/vehicles').then(function (response) {
                this.VehicleList = response.data.data;
            }, function (response) {
                // error callback
            });
        },
        submit: function submit(object) {
            this.sending = true;

            if (this.mode == 'create') {
                this.$http.post('/api/Middle/vehicles_risks_allotments', object).then(function (response) {
                    this.sending = false;
                    this.object = response.data.data;

                    this.createdId = response.data.data.id;
                    this.createdObject = response.data.data;

                    if (!this.forceMode) {

                        this.$route.router.go(window.history.back());
                    }
                }, function (response) {
                    alert('erreur');
                    setTimeout(function () {
                        debugger;
                    }, 10000);
                    throw new Error("Something went badly wrong!");
                });
            } // endif mode create
            else if (this.mode == 'update') {

                    this.$http.put('/api/Middle/vehicles_risks_allotments/' + object.id, object).then(function (response) {
                        this.sending = false;
                        this.object = response.data.data;

                        this.createdObject = response.data.data;
                        this.$route.router.go('/vehicles_risks_allotments');
                    }, function (response) {
                        alert('erreur');
                        setTimeout(function () {
                            debugger;
                        }, 10000);
                        throw new Error("Something went badly wrong!");
                    });
                } //endif mode update

        },
        cancel: function cancel() {
            this.$route.router.go(window.history.back());
        },
        deleteObject: function deleteObject(object) {

            this.$http.delete('/api/Middle/vehicles_risks_allotments/' + object.id, object).then(function (response) {
                this.sending = false;

                this.$route.router.go('/vehicles_risks_allotments');
            }, function (response) {
                alert('erreur');
                setTimeout(function () {
                    debugger;
                }, 10000);
                throw new Error("Something went badly wrong!");
            });
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n        <!--<pre>\n            {{object | json}}\n        </pre>-->\n\n            <h1>VehiclesRisksAllotment Form</h1>\n\n            <div v-if=\"loading\">\n                <ui-preloader :show=\"true\"></ui-preloader>\n            </div>\n\n            <div class=\"row\" v-if=\"!loading\">\n            <div class=\"col-lg-12\">\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-title\">\n\n\n                        <!--<div class=\"row\" v-if=\"mode=='update'\">\n                            <div class=\"col-md-12\">\n                                <div class=\"pull-right\"><a @click=\"deleteObject(object)\"> Detete</a></div>\n                            </div>\n                        </div>-->\n                    </div>\n                    <div class=\"ibox-content\">\n\n          <validator name=\"validation1\">\n            <form novalidate=\"\" class=\"form-horizontal form-label-left\">\n                        \n                        <div>\n                            \n\n            <div class=\"form-group vehicle_id\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"vehicle_id\" class=\"col-sm-2 control-label\">Vehicle <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\n\n                    <div v-if=\"!showForm_vehicle\">\n                        <select v-model=\"object.vehicle_id\" class=\"form-control\" v-validate:vehicle_id=\"{required:true}\">\n                            <option v-for=\"Vehicle in VehicleList\" :value=\"Vehicle.id\"> \n                                    {{ Vehicle.name }} \n                            </option>\n                        </select>\n                        \n                        <div class=\"errors\">\n                            <p v-if=\"$validation1.vehicle_id.required\">Vehicle is required</p>\n                        </div>\n                    </div>\n\n                        <div v-else=\"\">\n                            <input type=\"text\" v-model=\"createdVehicle.id\" v-validate:vehicle_id=\"{required:true}\">\n                        </div>\n                    <ui-icon-button v-if=\"!showForm_vehicle\" icon=\"add\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle, this.object.client_id=''\" tooltip=\"Add\" type=\"normal\" color=\"primary\" class=\"pull-right\"></ui-icon-button>\n\n                    <ui-icon-button v-if=\"showForm_vehicle\" icon=\"remove\" @click.prevent=\"showForm_vehicle= ! showForm_vehicle\" tooltip=\"cancel\" type=\"normal\" color=\"default\" class=\"pull-right\"></ui-icon-button>\n\n                    <div class=\"well\" v-if=\"showForm_vehicle\">\n\n                        <div v-if=\"createdVehicle.id\">\n\t\t\t\t\t\t\t<b>\n                                {{ createdVehicle.name }} \n                            </b>\n\n                        </div>\n                        <div v-else=\"\">\n                            <vehicle-form force-mode=\"create\" :created-object.sync=\"createdVehicle\"></vehicle-form>\n                        </div>\n                    </div>\n                    \n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group date\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"date\" class=\"col-sm-2 control-label\">Date <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t<input type=\"number\" class=\"form-control datepicker\" v-model=\"object.date\" placeholder=\"date\" v-validate:date=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.date.required\">Date is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group name\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"name\" class=\"col-sm-2 control-label\">Name <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"text\" class=\"form-control\" v-model=\"object.name\" placeholder=\"name\" v-validate:name=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.name.required\">Name is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n                        \n                        <div>\n                            \n\n            <div class=\"form-group pourcentage\">\n                <div class=\"col-md-12 col-sm-12 \">\n                <label for=\"pourcentage\" class=\"col-sm-2 control-label\">Pourcentage <span class=\"text-danger\">*</span></label>\n                <div class=\"col-sm-10 \"> \n\t\t\n                    <input type=\"number\" class=\"form-control\" v-model=\"object.pourcentage\" placeholder=\"pourcentage\" v-validate:pourcentage=\"{required:true}\">\n\n                    <div class=\"errors\">\n                        <p v-if=\"$validation1.pourcentage.required\">Pourcentage is required</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    \n\n\n                         </div>\n                         \n\n                          \n\n                <div class=\"col-sm-12\">\n                    <!--<button @click=\"cancel\"  class=\"btn btn-default pull-right\">Cancel</button>-->\n                    <!--<button v-if=\"mode=='update'\" @click.prevent=\"deleteObject(object)\"  class=\"btn btn-danger pull-left\">Delete</button>-->\n                    <ui-icon-button v-if=\"mode=='update'\" icon=\"delete\" @click.prevent=\"deleteObject(object)\" tooltip=\"Delete\" type=\"normal\" color=\"danger\" class=\"pull-left\"></ui-icon-button>\n\n\n                    <button @click.prevent=\"submit(object)\" class=\"btn btn-primary pull-right\" :disabled=\"$validation1.invalid \">\n                        <b v-if=\"mode=='create'\">Create</b>\n                        <b v-if=\"mode=='update'\">Update</b>\n                         VehiclesRisksAllotment <i class=\"fa fa-spin fa-spinner\" v-show=\"sending\"></i>\n                     </button>\n\n                </div>\n\n            </form>\n          </validator>\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n.spacer{\n    height: 50px;\n    display: block;\n}\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-4d887457", module.exports)
  } else {
    hotAPI.update("_v-4d887457", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../User/form.vue":194,"../Vehicle/form.vue":202,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}],223:[function(require,module,exports){
var __vueify_insert__ = require("vueify/lib/insert-css")
var __vueify_style__ = __vueify_insert__.insert("\n\n")
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _form = require('../VehiclesRisksAllotment/form.vue');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        vehiclesRisksAllotmentForm: _form2.default

    },

    props: {
        url: {
            required: false,
            type: String
        },
        fromId: {
            required: false,
            type: String
        }

    },

    ready: function ready() {
        this.fetchData();
        //alert(this.fromId)
    },
    data: function data() {
        return {
            loading: false,
            showmodal: false,
            search: '',
            showFilters: false,
            labelList: [],
            dataList: [],

            currentPage: 0,
            itemsPerPage: 50,
            resultCount: 0

        };
    },


    filters: {
        count: function count(arr) {
            this.$set('total', arr.length);
            console.log(arr.length);
            return arr;
        },
        paginate: function paginate(list) {
            this.resultCount = list.length;
            if (this.totalPages && this.currentPage >= this.totalPages) {
                console.log(this.currentPage, this.totalPages);
                this.currentPage = this.totalPages - 1;
            }
            var index = this.currentPage * this.itemsPerPage;
            return list.slice(index, index + this.itemsPerPage);
        }

    },

    methods: {
        setPage: function setPage(pageNumber) {
            this.currentPage = pageNumber;
        },
        clickAdd: function clickAdd() {
            if (this.$route.params.id) {
                this.showmodal = !this.showmodal;
            } else {
                this.$route.router.go('/vehicles_risks_allotments/create');
            }
        },
        clickSearch: function clickSearch() {
            this.showFilters = !this.showFilters;
        },
        refresh: function refresh() {
            this.fetchData();
        },
        clickDelete: function clickDelete(data) {
            /*var confirm = return confirm('Are you sure you want to delete')
            if(confirm){
                this.delete(data)
            }*/

        },
        delete: function _delete(data) {
            this.$http.delete('/api/Middle/vehicles_risks_allotments', data).then(function (response) {
                this.fieldList.$remove(data);
                alert('successfully deleted');
            }, function (response) {
                // error callback
            });
        },
        edit: function edit(data) {
            this.$route.router.go('/vehicles_risks_allotments/' + data.id);
        },
        fetchData: function fetchData() {
            console.log('loaging : ' + this.loading);
            this.loading = !this.loading;
            console.log('loaging :' + this.loading);
            this.$http.get(this.fetchUrl).then(function (response) {
                this.dataList = response.data.data;
                this.loading = !this.loading;
                console.log(this.loading);
            }, function (response) {
                // error callback
            });
        }
    },
    computed: {
        labelList: function labelList() {
            var keys = [];
            for (var k in this.dataList[0]) {
                keys.push(k);
            }return keys;
        },
        totalPages: function totalPages() {
            return Math.ceil(this.resultCount / this.itemsPerPage);
        },
        fetchUrl: function fetchUrl() {
            if (this.url) {
                return this.url;
            }
            return '/api/Middle/vehicles_risks_allotments';
        },
        strangerValue: function strangerValue() {
            return this.$route.params.id;
        }
    }

};
if (module.exports.__esModule) module.exports = module.exports.default
;(typeof module.exports === "function"? module.exports.options: module.exports).template = "\n\n               <h1>VehiclesRisksAllotment  List</h1>\n\n\n               <br> <br> <br> <br> <br>\n                <div v-if=\"loading\">\n                    <ui-preloader :show=\"true\"></ui-preloader>\n                </div>\n\n                <div v-else=\"\">\n                   <div class=\"pull-left\">\n                       <span class=\"dropdown\">\n                           <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{itemsPerPage}} per page\n                           <span class=\"caret\"></span></button>\n                           <ul class=\"dropdown-menu\">\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=10, fetchData()\">10</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=20, fetchData()\">20</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=50, fetchData()\">50</a></li>\n                               <li><a href=\"#\" @click.prevent=\"itemsPerPage=100, fetchData()\">100</a></li>\n                           </ul>\n                       </span>\n                   </div>\n\n                    <div class=\"pull-right\">\n                       <div class=\"form-group\">\n                           <input type=\"text\" v-model=\"search\" class=\"form-control\" placeholder=\"search...\">\n                       </div>\n\n                        <ui-icon-button icon=\"refresh\" @click.prevent=\"refresh\" tooltip=\"refresh\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <ui-icon-button icon=\"add\" @click.prevent=\"clickAdd\" tooltip=\"Add\" type=\"normal\" color=\"default\" v-show=\"!showFilters\"></ui-icon-button>\n                        <!--<ui-icon-button icon=\"search\" @click.prevent=\"clickSearch\" tooltip=\"message tooltip\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                    </div>\n\n                    <div class=\"well\" v-show=\"showFilters\">\n                        <h2>Filters</h2>\n                        <p>\n                            ....\n                        </p>\n                    </div>\n\n\n\n\n\n\n\n                             <table class=\"table\">\n                                <thead>\n                                      <tr>\n                                            <th>Actions</th>  <th>Id</th>\n<th>Updated by</th>\n<th>Vehicle</th>\n<th>Date</th>\n<th>Name</th>\n<th>Pourcentage</th>\n\n                                      </tr>\n                              </thead>\n                              <tbody>\n                                   <tr v-for=\"data in dataList |  filterBy search | paginate | count\">\n                                       <td>\n                                           <!--<ui-icon-button icon=\"delete\" @click.prevent=\"clickDelete(data)\" tooltip=\"Delete\" type=\"normal\" color=\"default\"></ui-icon-button>-->\n                                           <ui-icon-button icon=\"mode_edit\" @click.prevent=\"edit(data)\" tooltip=\"Edit\" type=\"normal\" color=\"default\"></ui-icon-button>\n                                       </td>\n                                    <td>{{data.id}}</td>\n\n                                                <td>\n                                               {{ data.updated_by.surname }}\n                                              \n\n                                               {{ data.updated_by.name }}\n                                              \n\n                                               </td>\n                                                <td>\n                                               {{ data.vehicle.name }}\n                                              \n\n                                               </td> <td>{{data.date}}</td>\n<td>{{data.name}}</td>\n<td>{{data.pourcentage}}</td>\n\n                                   </tr>\n                              </tbody>\n                            </table>\n\n                           <div>\n                            <nav>\n                              <ul class=\"pagination hidden\">\n\n                                 <li v-for=\"pageNumber in  totalPages\">\n                                  <a href=\"#\" @click=\"setPage(pageNumber)\" v-class=\"current: currentPage === pageNumber\">{{ pageNumber+1 }}</a>\n                                </li>\n\n                              </ul>\n                            </nav>\n                            </div>\n\n\n\n\n                </div>\n\n\n                <ui-modal :show.sync=\"showmodal\" header=\"Scrolling Modal\" type=\"large\">\n               <vehicles-risks-allotment-form force-mode=\"create\" :label=\"strangerKey\" :value=\"strangerValue\"></vehicles-risks-allotment-form>\n               <div slot=\"footer\">\n                   <!-- <ui-button color=\"primary\">Say Hi</ui-button>-->\n                   <ui-button @click=\"showmodal=false\">Cancel</ui-button>\n               </div>\n               </ui-modal>\n\n\n\n               "
if (module.hot) {(function () {  module.hot.accept()
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.dispose(function () {
    __vueify_insert__.cache["\n\n"] = false
    document.head.removeChild(__vueify_style__)
  })
  if (!module.hot.data) {
    hotAPI.createRecord("_v-fcfcc99e", module.exports)
  } else {
    hotAPI.update("_v-fcfcc99e", module.exports, (typeof module.exports === "function" ? module.exports.options : module.exports).template)
  }
})()}
},{"../VehiclesRisksAllotment/form.vue":222,"vue":30,"vue-hot-reload-api":25,"vueify/lib/insert-css":31}]},{},[32]);

//# sourceMappingURL=Middle_main.js.map
